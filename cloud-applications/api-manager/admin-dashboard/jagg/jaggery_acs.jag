<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    include("jagg.jag");
    var site = require("/site/conf/site.json");
    var log = new Log("jagg.jaggery_acs.jag");
    var samlResponse = request.getParameter("SAMLResponse");
    var sessionId = session.getId();
    var samlRequest = request.getParameter("SAMLRequest");
    // create a sso relying party js object
    var security = require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
    var isLogoutResponse = false;
    var isLogoutRequest = false;

    // if saml response is not a log out response
    if (samlResponse != null) {
        isLogoutResponse = ssoRelyingParty.isLogoutResponse(samlResponse);
        if (!Boolean(isLogoutResponse)) {

            var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
            var fullUserName = ssoRelyingParty.getSAMLResponseNameId(samlResponse);
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var domainName = null;
            if(fullUserName != null){
                domainName = MultitenantUtils.getTenantDomain(fullUserName);
            }else{
                log.error("SAML response schema verification is failed.");
                response.sendRedirect("../site/pages/error-pages/401.jag");
                return;

            }

            // validating the assertion validity period
            if(site.ssoConfiguration.verifyAssertionValidityPeriod === 'true'){
                var timestampSkew=site.ssoConfiguration.timestampSkewInSeconds;
                if(timestampSkew==undefined){
                    timestampSkew="300";
                }
                ssoRelyingParty.setProperty("timestampSkewInSeconds", timestampSkew);
                var isAssertionValidityPeriodValid = ssoRelyingParty.validateAssertionValidityPeriod(samlResponse);
                if (!Boolean(isAssertionValidityPeriodValid)) {
                    log.error("SAML response assertion validity period verification is failed.");
                    response.sendRedirect("../site/pages/error-pages/401.jag");
                    return;
                }
            }

            // validating the audience restrictions
            var assertionConfig=site.ssoConfiguration.audienceRestrictionsEnabled;
            if(assertionConfig === 'true'){
                var isAudienceRestrictionsValid = ssoRelyingParty.validateAudienceRestrictions(samlResponse);
                if (!Boolean(isAudienceRestrictionsValid)) {
                    log.error("SAML response audience restrictions verification is failed.");
                    response.sendRedirect("../site/pages/error-pages/401.jag");
                    return;
                }
            }
            // relay state value should be a valid value, this value is mapped with request uri.
            var relayState = request.getParameter("RelayState");
            var requestedURI = ssoRelyingParty.getRelayStateProperty(relayState);
            if (requestedURI == null) {
                log.error("Relaystate value is invalid.");
                response.sendRedirect("../site/pages/error-pages/401.jag");
                return;
            }

            // validating the signature
            if(site.ssoConfiguration.responseSigningEnabled === 'true'){

                if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                    jagg.module("manager").loadTenantRegistry(String(domainName));
                    jagg.module("manager").loadTenantAxisConfiguration(String(domainName));
                }
                var isSignatureValid = ssoRelyingParty.validateSignature(samlResponse);
                if (!Boolean(isSignatureValid)) {
                    log.error("SAML response signature is verification failed.");
                    response.sendRedirect("../site/pages/error-pages/401.jag");
                    return;
                }
            }

            // validating the saml assertion signature
            var assertionSignatureConfig=site.ssoConfiguration.assertionSigningEnabled;
            if( assertionSignatureConfig === 'true'){
                if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                    jagg.module("manager").loadTenantRegistry(String(domainName));
                }
                var isAssertionSignatureValid = ssoRelyingParty.validateAssertionSignature(samlResponse);
                if (!Boolean(isAssertionSignatureValid)) {
                    log.error("SAML assertion signature is verification failed.");
                    response.sendRedirect("../site/pages/error-pages/401.jag");
                    return;
                }
            }

            ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse);
            ssoRelyingParty.addSession(session);
            session.put("showLogin", "false");
            var api = jagg.module("api");
            var isUserCreatePermitted = api.hasUserPermissions(ssoRelyingParty.getLoggedInUser(sessionId));
            var username = ssoRelyingParty.getLoggedInUser(sessionId);
            //First check whether user is having sufficent permissions [create/publish]
            if (isUserCreatePermitted.permitted && username.indexOf("@") != -1) {
                var userDomain = jagg.module("util").getTenantDomain(username);
                if (userDomain != null && userDomain != "") {
                    jagg.setUser({username: username, cookie: null, "userDomain": userDomain});
                    session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));
                } else {
                    log.error("The tenant domain value was not available for the user " + username);
                    response.sendRedirect("../site/pages/error-pages/error.jag");
                }
            } else {
                response.sendRedirect("../site/pages/error-pages/error.jag");
            }
            var isUserInAdminRoleResult = jagg.module("util").isUserInAdminRole();
            if (!isUserInAdminRoleResult.error) {
                if (isUserInAdminRoleResult.isAdmin) {
                    session.put("authenticated", true);
                    response.sendRedirect(requestedURI);
                } else {
                    log.error("user" + username + " not permitted since not a tenant admin.");
                    response.sendRedirect("../site/pages/error-pages/401.jag");
                    return;
                }
            }
        } else {
            // if the saml response is log out request from IDP, we log out from web app.
            ssoRelyingParty.invalidateSessionBySessionId(sessionId);
            session.invalidate();
            response.sendRedirect("../");
            return;
        }
    }

    // if SAML request is a log out request, then invalidate session.
    // Commenting this section for the time being since the session is already invalidated above.
    /* if (samlRequest != null) {
        isLogoutRequest = ssoRelyingParty.isLogoutRequest(samlRequest);
        if (Boolean(isLogoutRequest)) {
            try {
                ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
                session.invalidate();
            } catch (e) {
                log.error("Session has already been invalidated");
                log.error(e);
            }
        }
    } */
}());
%>
</body>
</html>
