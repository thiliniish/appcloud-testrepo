<%
var getAuthServerURL = function() {
    return getAPIStoreObj().getAuthServerURL();
};
var getHTTPsURL = function() {
    return getAPIStoreObj().getHTTPsURL(request.getRequestURL());
};

var getHTTPURL = function() {
   return getAPIStoreObj().getHTTPURL();
};


var getServer = function() {
    return {
        server : "localhost",
        port : "9443"
    };
};

var getAdminCookie = function() {
    //TODO : this should be set in the Context during the deployment

};

/**
 * This method will return the admin cookie used to authenticate the BPS end.
 */
var getBPSAdminCookieBySAMLToken = function () {
    var dateTime = new Date();
    var timeNow = dateTime.getTime();
    if (application.get("workflowCookieLastUpdatedTime") == null) {
        application.put("workflowCookieLastUpdatedTime", timeNow);
    }
    var adminCookieLastUpdatedTime = application.get("workflowCookieLastUpdatedTime");
    if (((timeNow - adminCookieLastUpdatedTime) > DEFAULT_COOKIE_REFRESH_INTERVAL) ||
        (application.get("workflowCookie") == null)) {
        updateAdminCookie();
        application.put("workflowCookieLastUpdatedTime", timeNow);
    }
    return application.get("workflowCookie");
};

/**
 * Updates the Admin cookie in the current session
 * @param serverUrl
 */
var updateAdminCookie = function () {
    try {
        var site = require("/site/conf/site.json");
        var serverUrl = site.workflows.workFlowServerURL;
        var user = jagg.getUser().username;
        var security = require("sso");
        var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
        var token = ssoRelyingParty.getSAMLToken(session.getId());
        var encodedToken = token;
        var xhr = new XMLHttpRequest();
        var endPoint = serverUrl + "SAML2SSOAuthenticationService";
        xhr.open("POST", endPoint);

        var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+encodedToken+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

        xhr.setRequestHeader('SOAPAction','urn:login');
        xhr.setRequestHeader('Content-Type','application/soap+xml');
        xhr.send(payload);
        var cookie = xhr.getResponseHeader("Set-Cookie");
        application.put("workflowCookie", cookie);
    } catch (e) {
        log.error("Error while updating admin cookie for  user :  " + user + "\n" + e.message);
        throw "Error while updating admin cookie for  user :  " + user
    }
};

var getAPIStoreObj = function() {
    var user = jagg.getUser();
    var store;
    if (user == null) {
        store = require('apistore');
        return new store.APIStore();
    } else {
        store = require('apistore');
        return new store.APIStore(user.username);
    }
};

var loadTenantRegistry = function (tenantDomain) {
    try {
        if (tenantDomain != null && tenantDomain != "") {
            getAPIStoreObj().loadRegistryOfTenant(tenantDomain);
            return
            {
                error:false
            }
            ;
        }
    } catch (e) {
        return {
            error:true,
            message:e.message
        };
    }    
};

//Method was taken from the api manager store jaggery app.
var loadTenantAxisConfiguration = function (tenantDomain) {

    try {
        if (tenantDomain != null && tenantDomain != "") {

            getAPIStoreObj().loadAxisConfigOfTenant(String(tenantDomain));
            return
            {
                error:false
            };
        }
    } catch (e) {
        return {
            error:true,
            message:e.message
        };
    }
};

%>
