<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
        (function() {
                include("jagg.jag");
                var site = require("/site/conf/site.json");
                var log = new Log();
                var samlResponse = request.getParameter("SAMLResponse");
                var sessionId = session.getId();
                var samlRequest =request.getParameter("SAMLRequest");
                // create a sso relying party js object
                var security =require("sso");
                var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
                var isLogoutResponse = false;
                var isLogoutRequest =false;

                // if saml response is not a log out response
                if(samlResponse!=null){
                    isLogoutResponse =ssoRelyingParty.isLogoutResponse(samlResponse);
                    if(!Boolean(isLogoutResponse)) {
                        // relay state value should be a valid value, this value is mapped with request uri.
                        var relayState = request.getParameter("RelayState");

                        var requestedURI =  ssoRelyingParty.getRelayStateProperty(relayState);
                        if(  requestedURI==null){
                            log.error("Relaystate value is invalid.");
                            response.sendRedirect("../error.jag");
                            return;
                        }

                        if(site.ssoConfiguration.passive == "true") {
                            var isPassiveAuthRes = ssoRelyingParty.isPassiveAuthResponse(samlResponse);
                            if(Boolean(isPassiveAuthRes))  {
                                session.put("hasTriedSSO", true);
                                response.sendRedirect(requestedURI);
                                return;
                            }
                        }
                        //Validate the saml response schema-check the number of response elements is 1 and check the number of assertions
                        //is equal to 1
                        var isResponseValid = ssoRelyingParty.validateSAMLResponseSchema(samlResponse);
                        if (!Boolean(isResponseValid)) {
                            log.error("SAML response schema verification is failed.");
                            response.sendRedirect("../site/pages/error-pages/401.html");
                            return;
                        }

                        // validating the assertion validity period
                        if(site.ssoConfiguration.verifyAssertionValidityPeriod === 'true'){
                            var timestampSkew=site.ssoConfiguration.timestampSkewInSeconds;
                            if(timestampSkew==undefined){
                                timestampSkew="300";
                            }
                            ssoRelyingParty.setProperty("timestampSkewInSeconds", timestampSkew);
                            var isAssertionValidityPeriodValid = ssoRelyingParty.validateAssertionValidityPeriod(samlResponse);
                            if (!Boolean(isAssertionValidityPeriodValid)) {
                                log.error("SAML response assertion validity period verification is failed.");
                                response.sendRedirect("../site/pages/error-pages/401.html");
                                return;
                            }
                        }

                        // validating the audience restrictions
                        var isAudienceRestrictionEnabled=site.ssoConfiguration.audienceRestrictionsEnabled;
                        if(isAudienceRestrictionEnabled === 'true'){
                            var isAudienceRestrictionsValid = ssoRelyingParty.validateAudienceRestrictions(samlResponse);
                            if (!Boolean(isAudienceRestrictionsValid)) {
                                log.error("SAML response audience restrictions verification is failed.");
                                response.sendRedirect("../site/pages/error-pages/401.html");
                                return;
                            }
                        }
                        var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
                        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
                        var fullUserName = ssoRelyingParty.getSAMLResponseNameId(samlResponse);
                        var domainName = null
                        if (fullUserName != null){
                            domainName = MultitenantUtils.getTenantDomain(fullUserName);
                        }

                        // validating the signature
                        if(site.ssoConfiguration.responseSigningEnabled === 'true'){
                            if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                                jagg.module("manager").loadTenantRegistry(String(domainName));
                            }

                            var isSignatureValid =ssoRelyingParty.validateSignature(samlResponse);
                            if(!Boolean(isSignatureValid)){
                                log.error("SAML response signature is verification failed.");
                                response.sendRedirect("../site/pages/error-pages/401.html");
                                return;
                            }
                        }
                        // validating the saml assertion signature
                        if(site.ssoConfiguration.assertionSigningEnabled === 'true'){
                            if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                                jagg.module("manager").loadTenantRegistry(String(domainName));
                            }
                            var isAssertionSignatureValid = ssoRelyingParty.validateAssertionSignature(samlResponse);
                            if (!Boolean(isAssertionSignatureValid)) {
                                log.error("SAML assertion signature is verification failed.");
                                response.sendRedirect("../site/pages/error-pages/401.html");
                                return;
                            }
                        }


                        ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse, session);
                        ssoRelyingParty.addSession(session);
                        session.put("showLogin", "false");
                        var api = jagg.module("api");

                        //update permission cache before validate user
                        api.updatePermissionCache(ssoRelyingParty.getLoggedInUser(sessionId));

                        var isUserPermitted=api.hasUserPermissions(ssoRelyingParty.getLoggedInUser(sessionId));
                        var hasPublisherAccess=api.hasPublisherAccess(ssoRelyingParty.getLoggedInUser(sessionId));
                        var showURL=false;
                        if(hasPublisherAccess){
                        showURL=hasPublisherAccess.permitted;
                        }
                        jagg.setUser({username:ssoRelyingParty.getLoggedInUser(sessionId), cookie:null, hasPublisherAccess:showURL});
                        sessionId = session.getId();
                        ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse, session);
                        ssoRelyingParty.addSession(session);
                        session.put("showLogin", "false");
                        session.put("LOGGED_IN_USER",ssoRelyingParty.getLoggedInUser(sessionId));
                        //First check whether user is having sufficent permissions [create/publish]
                         if(!isUserPermitted.permitted ){
                         response.sendRedirect("../site/pages/logout.jag");
                         } else{
			            var username = ssoRelyingParty.getLoggedInUser(sessionId);
			            var manager = jagg.module("manager");
          		        var  store = manager.getAPIStoreObj();
                        var decodedSamlReponse = ssoRelyingParty.decode(samlResponse);
                        var groupId = store.getGroupIds(decodedSamlReponse);
                       //Store and empty string instead of null if no group Id is found. This is done so that when checking for a string array
                       //the null value returned would not cause any issue.
                        if(groupId == null){
                          groupId = "";
                        }

			            session.put("groupId", groupId)
			            var subscriber = store.getSubscriber(username);
    			        if (!subscriber) {
        			        store.addSubscriber(username, groupId);
        			        subscriber = store.getSubscriber(username);
    			        }
                        session.put("LOGGED_IN_USER",ssoRelyingParty.getLoggedInUser(sessionId));
						session.put("hasPublisherAccess",showURL);
                        if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                            jagg.module("manager").loadTenantAxisConfiguration(String(domainName));
                        }
                        //------------------------------ Start of Cloud specific implementation ------------------------------

                        //Getting Tenant ID
                        var PrivilegedCarbonContext = Packages.org.wso2.carbon.context.PrivilegedCarbonContext;
                        var context = PrivilegedCarbonContext.getThreadLocalCarbonContext();
                        var realmService = context.getOSGiService((java.lang.Class).forName('org.wso2.carbon.user.core.service.RealmService'));
                        var tenantManager = realmService.getTenantManager();
                        var tenantId = tenantManager.getTenantId(domainName);

                        //Getting firstname lastname and email
                        var carbon = require('carbon');
                        var server = carbon.server;
                        var userManager = new carbon.user.UserManager(server, tenantId);
                        var username = ssoRelyingParty.getLoggedInUser(sessionId);
                        var user = new carbon.user.User(userManager, username.substring(0, username.lastIndexOf("@")));

                        try {
                            var result = user.getClaims('default');
                            var claims = {};
                            if(result != null){
                                for (var i = 0; i < result.length; i++) {
                                    var uri = result[i].getClaimUri();

                                    if (uri.indexOf("wso2.org") > 0) {
                                        if (uri.indexOf("lastname") > 0) {
                                            var tmp = result[i].getValue();
                                            if(tmp.indexOf("@") < 0 && tmp.indexOf("$") != 0){
                                                claims.lastname = result[i].getValue();
                                            }
                                        } else if (uri.indexOf("givenname") > 0) {
                                            var tmp = result[i].getValue();
                                            if(tmp.indexOf("$") != 0){
                                                claims.firstname = result[i].getValue();
                                            }
                                        } else if (uri.indexOf("emailaddress") > 0) {
                                            claims.email = result[i].getValue();
                                        }
                                    }
                                }
                            }

                            //Checking wheather the user is Tenant Admin
                            var adminRoles = ['admin'];
                            var isTenantAdmin = user.hasRoles(adminRoles);

                            //getting tenant display name
                            var db = new Database("cloud_mgt");
                            var results = db.query("SELECT displayName FROM ORGANIZATIONS WHERE tenantDomain='" + domainName + "';");
                            var tenantDisplayName = results[0]["displayName"];
                            db.close();

                            jagg.setUser({
                                username: jagg.getUser().username,
                                fullName: claims.firstname + " " + claims.lastname,
                                email: claims.email,
                                tenantDomain: domainName,
                                tenantDisplayName: tenantDisplayName,
                                isTenantAdmin: isTenantAdmin,
                                cookie: jagg.getUser().cookie
                            });

                            log.info("API Store Logged in User [ User : " + jagg.getUser().username +
                                    ", Full Name : " + jagg.getUser().fullName +
                                    ", Email : " + jagg.getUser().email +
                                    ", Tenant : " + jagg.getUser().tenantDomain +
                                    ", Is Admin : " + jagg.getUser().isTenantAdmin +
                                    ", Tenant Display Name : " + jagg.getUser().tenantDisplayName + " ]");

                        }catch (e) {
                            log.error("Error while getting user information for the user : "
                                    + ssoRelyingParty.getLoggedInUser(sessionId));
                            log.error(e);
                        }

                        //------------------------------ End of Cloud specific implementation ------------------------------
                        response.sendRedirect(requestedURI);
                        return;
                   }
                }else{
                        // if the saml response is log out request from IDP, we log out from web app.
                        ssoRelyingParty.invalidateSessionBySessionId(sessionId);
                        response.sendRedirect("../");
                        return;
                    }

                }

                // if saml request is a log out request, then invalidate session.
                if(samlRequest!=null){
                    isLogoutRequest =ssoRelyingParty.isLogoutRequest(samlRequest);
                    if(Boolean(isLogoutRequest))  {
                        ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
                    }
                }



                }());
  %>
</body>
</html>

