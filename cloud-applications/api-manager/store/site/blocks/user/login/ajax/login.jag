<%
include("/jagg/jagg.jag");

(function () {
    response.contentType = "application/json; charset=UTF-8";
    response.addHeader('Pragma', 'No-cache');
    response.addHeader('Cache-control', 'no-cache');
    response.contentType = "application/json; charset=UTF-8";    
    var manager = jagg.module("manager"), 
        store = manager.getAPIStoreObj(),
        groupId = "";

    var mod, obj, result, username,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag");

    var validation = {
        "action": { type: "safetext"},
        "tenant": { type: "tenant"},
        "username": { type: "loginname"}
    };

    var validation_errors = jagg.validateInputs(validation);

    if(validation_errors != true){
            print({
                error:true,
                message: msg.error.invalidInputs(validation_errors)
            });        
    }else if (action === "getAPIPublisherURL") {
             mod = jagg.module("manager");
             var resultVal=mod.getAPIPublisherURL();
             if (resultVal.error) {
                obj = {
                      error:true,
                      message:resultVal.message
                      };
             } else {
                      obj = {
                      error:false,
                      url:resultVal.url
                      }
                      }
    print(obj);
    }else if (action === "loginWithSAMLToken") {
             var log = new Log();

             mod = jagg.module("user");
             var samlToken = request.getParameter("samlToken");
                 result = mod.loginWithSAMLToken(samlToken);
            if (result.error) {
                 obj = {
                     error:result.error,
                     message:result.message
                 };
             } else {
                 obj = {
                     error:false
                 }
             }

             jagg.setUser({username:result.username, cookie:result.cookie});
             session.put("showLogin", "false");

             print(obj);
    }else if (action === "logout") {
        jagg.setUser(null);
        session.remove("selectedApp");
        session.remove("userLoginType");
        print({
            error:false
        });
    }else if( request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()){
        print({
            error:true,
            message: msg.error.csrfError
        });
    }            
    else if (action === "login" && request.getMethod() == 'POST') {
        mod = jagg.module("user");
        username = request.getParameter("username");
        var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
		var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    	var user= MultitenantUtils.getTenantAwareUsername(username);
		var domain= MultitenantUtils.getTenantDomain(username);
		if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME === domain) {
			username = user;
		} else {
			username = user + "@" + domain;
		}
        username = String(username);
        var tenant = jagg.getTenantDomain();
        result = mod.login(username, request.getParameter("password"),tenant);
        if (result.error) {
            obj = {
                error:result.error,
                message:result.message
            };
        } else {
            obj = {
                error:false
            }
        jagg.setUser({username:result.username, isSuperTenant:result.isSuperTenant, cookie:result.cookie, hasPublisherAccess:result.hasPublisherAccess});
        session.put("showLogin", "false");
        session.put("userLoginType","basic");

        //Get logged in user profile info
        var userInfo = getUserInfo(user);
        //Get Tenant display name
        var tenantDisplayName = getTenantDisplayName(domain);

        var loggedInUser = jagg.getUser();
        loggedInUser.tenantDomain = domain;
        if(userInfo) {
            loggedInUser.fullName = userInfo.fullName;
            loggedInUser.email = userInfo.email;
            loggedInUser.isTenantAdmin = userInfo.isTenantAdmin;
        }

        if(tenantDisplayName) {
            loggedInUser.tenantDisplayName = tenantDisplayName;
        }
        jagg.setUser(loggedInUser);

        }
        print(obj);
    } else {
        print({
            error:true,
            message:msg.error.invalidAction(action)
        });
    }
}());

function getTenantDisplayName(domainName) {
    var tenantDisplayName;
    var log = new Log();
    try{
        var db = new Database("cloud_mgt");
        var results = db.query("SELECT displayName FROM ORGANIZATIONS WHERE tenantDomain='" + domainName + "';");
        tenantDisplayName = results[0]["displayName"];
        db.close();
    } catch(e) {
        var errorMsg = "Error while getting tenant display name of " + domainName;
        log.error(errorMsg);
        log.error(e);
    }
    return tenantDisplayName;
}

function getUserInfo(username) {
    var userInfo;
    var log = new Log();
    try {
        var carbon = require('carbon');
        var tenantId = -1234;
        var manager = jagg.module("manager");
        var server = carbon.server;
        var userManager = new carbon.user.UserManager(server, tenantId);
        var user = new carbon.user.User(userManager, username);

        //Checking wheather the user is Tenant Admin
        var adminRoles = ['admin'];
        var isTenantAdmin = user.hasRoles(adminRoles);

        //Get claims
        var claims = user.getClaims('default');
        var convertedClaims = convertClaims(claims);
        var fullName = convertedClaims.firstname + " " + convertedClaims.lastname;
        var email = convertedClaims.email;
        userInfo = {fullName: fullName, email: email, isTenantAdmin: isTenantAdmin}
    } catch (e) {
        var errorMsg = "Error while getting user information of  " + username;
        log.error(errorMsg);
        log.error(e);
    }
    return userInfo;
}

function convertClaims(result) {
    var claims = {};
    if(result != null){
        for (var i = 0; i < result.length; i++) {
            var uri = result[i].getClaimUri();

            if (uri.indexOf("wso2.org") > 0) {
                if (uri.indexOf("lastname") > 0) {
                    var tmp = result[i].getValue();
                    if(tmp.indexOf("@") < 0 && tmp.indexOf("$") != 0){
                        claims.lastname = result[i].getValue();
                    }
                } else if (uri.indexOf("givenname") > 0) {
                    var tmp = result[i].getValue();
                    if(tmp.indexOf("$") != 0){
                        claims.firstname = result[i].getValue();
                    }
                } else if (uri.indexOf("emailaddress") > 0) {
                    claims.email = result[i].getValue();
                }
            }
        }
    }
    return claims;
}
%>
