<%
include("/jagg/jagg.jag");
include("/jagg/cloud/constants.jag");

var log = new Log("site.block.pricing.account.update.ajax.update.jag");
var mod = jagg.module("pricing");
var encoder = Packages.org.wso2.carbon.ui.util.CharacterEncoder;

(function () {
    var result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json");
    var responseObject;
    var ssoEnabled = site.ssoConfiguration.enabled;
    var msg = require("/site/conf/ui-messages.jag");
    var message;
    var user = jagg.getUser();
    if (!user) {
        if (!ssoEnabled) {
            print({
                error: true,
                message: msg.error.loginRequired(action)
            });
        }
        return;
    }
    var tenantDomain = null;
    var multiTenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    if (user != null && user.username != null) {
        tenantDomain = multiTenantUtils.getTenantDomain(user.username);
    }
    var monetizationStatus = jagg.module("pricing").isMonetizationEnabled(tenantDomain);

    if (monetizationStatus == null || monetizationStatus.error || !monetizationStatus.monetizationEnabled) {
        print({
            error: true,
            statusCode: 403,
            message: "API monetization feature is not available for this tenant.  Please contact the store admin."
        });
    }
    if (action == "updateAccount") {
        var accountData = {};
        accountData.firstName = String(encoder.getSafeText(request.getParameter("firstName")));
        accountData.lastName =  String(encoder.getSafeText(request.getParameter("lastName")));
        accountData.address1 =  String(encoder.getSafeText(request.getParameter("address1")));
        accountData.address2 =  String(encoder.getSafeText(request.getParameter("address2")));
        accountData.city =  String(encoder.getSafeText(request.getParameter("city")));
        accountData.state =  String(encoder.getSafeText(request.getParameter("state")));
        accountData.zipCode =  String(encoder.getSafeText(request.getParameter("zipCode")));
        accountData.country =  String(encoder.getSafeText(request.getParameter("country")));
        accountData.workEmail =  String(encoder.getSafeText(request.getParameter("email")));
        responseFrom = request.getParameter("responseFrom");
        var result = mod.updateContactInfo(accountData);
        print(result);
    } else {
        message = "Invalid Action specified for action " + action;
        responseObj = {
            error: true,
            message: message,
            statusCode: 500
        };
        print(responseObj);
    }
}());
%>