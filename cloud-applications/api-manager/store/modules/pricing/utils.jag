<%
var carbon = require('carbon');
var server = carbon.server;
var billingService = server.osgiService('org.wso2.carbon.cloud.billing.service.CloudBillingService');
var apiMonService = server.osgiService('org.wso2.carbon.cloud.billing.service.APICloudMonetizationService');

var mdAlgorithm = "SHA-512";


var getConfigInJson = function () {
    try {
        return JSON.parse(billingService.getConfigInJson());
    } catch (e) {
        log.error("Error while getting the billing configurations as JSON");
        throw e;
    }
};

var dateTimeFormatter = function (dateTimeFormat) {
    return new Packages.java.text.SimpleDateFormat(dateTimeFormat);
};

//validate passthrough token
var validatePassThroughHash = function (token) {
    var tokenHash = session.get(ZUORA_SIGNATURE_HASH);
    return billingService.validateHash(token, tokenHash, mdAlgorithm);
};

//Base64 decode and decrypt the workflow data
var decryptWorkflowData = function (workflowData) {
    var cryptoUtil = Packages.org.wso2.carbon.core.util.CryptoUtil.getDefaultCryptoUtil();
    var charset = Packages.java.nio.charset.Charset.defaultCharset();
    var decryptedDataString = new Packages.java.lang.String(cryptoUtil.base64DecodeAndDecrypt(workflowData), charset);
    var decryptedData = {};
    if (decryptedDataString != null && !"".equals(decryptedDataString)) {
        var dataArray = decryptedDataString.trim().split(":");
        decryptedData.workflowRefId = String(dataArray[0]);
        decryptedData.ratePlanName = String(dataArray[1]);
        decryptedData.appName = String(dataArray[2]);
        decryptedData.apiName = String(dataArray[3]);
        decryptedData.apiVersion = String(dataArray[4]);
    }
    return decryptedData;
};

//populate account information object
var populateAccountInfo = function (accountData, metaData, effectiveDate, ratePlanId) {
    var subscribeToRatePlans = [];
    var data = {};
    var dateFormatter = dateTimeFormatter(ZUORA_DATE_FORMAT);

    data.name = accountData.firstName + " " + accountData.lastName;
    data.autoPay = true;
    data.currency = "USD";
    data.billToContact = {};
    var item = {};
    item["productRatePlanId"] = ratePlanId;
    subscribeToRatePlans.push(item);
    data.subscription = {
        "termType": "EVERGREEN",
        "autoRenew": true,
        "subscribeToRatePlans": subscribeToRatePlans,
        "contractEffectiveDate": dateFormatter.format(effectiveDate)
    };

    data.hpmCreditCardPaymentMethodId = metaData.refId;
    data.billToContact = accountData;
    data.invoiceCollect = true;
    data.invoiceTargetDate = dateFormatter.format(effectiveDate);
    return data;
};

var sendHTTPRequest = function (url, type, headers, data, username, password) {

    var xhr = new XMLHttpRequest();
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('apiAccessKeyId', username);
    xhr.setRequestHeader('apiSecretAccessKey', password);

    if (headers != null) {
        for (var i = 0; i < headers.length; i++) {
            xhr.setRequestHeader(headers[i].name, headers[i].value);
        }
    }

    xhr.open(type, url);
    xhr.send(data);

    var response = xhr.responseText;
    if (response != null) {
        return JSON.parse(response);
    } else {
        log.error("HTTP request: response from zuora cannot be null");
        throw Error("Response from zuora cannot be null");
    }
};
%>