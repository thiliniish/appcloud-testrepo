<%
include("/jagg/jagg.jag");
include("/jagg/cloud/constants.jag");
include("/modules/pricing/utils.jag");

var log = new Log("modules/pricing/manager.jag");
var apiMonService = server.osgiService('org.wso2.carbon.cloud.billing.service.APICloudMonetizationService');
var mdAlgorithm = "SHA-512";

//Generate zuora HPM page parameters
var generateParams = function (workflowReference) {

    try {
        var clientParams = JSON.parse(billingService.prepareParams());
        session.put(ZUORA_SIGNATURE_HASH, billingService.generateHash(clientParams.token, mdAlgorithm));
        clientParams.field_passthrough1 = clientParams.token;
        clientParams.field_passthrough4 = workflowReference;
        if (log.isDebugEnabled()) {
            log.debug("Parameters generated for tenant: " + clientParams.tenantId);
        }
        return {
            error: false,
            statusCode: 200,
            params: clientParams
        }
    } catch (e) {
        log.error("Error while generating params: ");
        log.error(e);
        return {
            error: true,
            statusCode: 500,
            message: "Internal error. Please retry..."
        }
    }

};

var isMonetizationEnabled = function (tenantDomain) {
    try {
        var monetizationStatus = apiMonService.isMonetizationEnabled(tenantDomain);
        return {
            error: false,
            statusCode: 200,
            monetizationEnabled: monetizationStatus
        }
    } catch (e) {
        log.error("Error while checking the monetization status for tenant: " + tenantDomain);
        log.error(e);
        return {
            error: true,
            statusCode: 500,
            message: "Internal error. Please retry..."
        }
    }

};

var createAccount = function (accountData, metaData, workflowRefData) {

    var ratePlanId, errorMsg;
    var username = jagg.getUser().username;
    var multiTenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var tenantDomain = multiTenantUtils.getTenantDomain(username);

    if (workflowRefData == null || "".equals(workflowRefData)) {
        errorMsg = "Workflow refId is invalid. it should be neither null nor empty";
        log.error(errorMsg);
        return {
            error: true,
            statusCode: 500,
            message: errorMsg
        };
    }

    //var apiData = JSON.parse(apiMonService.decryptWorkflowData(workflowRefData));
    var apiData = decryptWorkflowData(workflowRefData);
    try {
        ratePlanId = apiMonService.getRatePlanId(tenantDomain, apiData.ratePlanName);
        if (ratePlanId == null || "".equals(ratePlanId)) {
            errorMsg = "Rate plan invalid. it should be neither null nor empty";
            log.error(errorMsg);
            return {
                error: true,
                statusCode: 500,
                message: errorMsg
            };
        }
    } catch (e) {
        log.error("Error while getting subscribed rate plan id.");
        log.error(e);
        return {
            error: true,
            statusCode: 500,
            message: e.message
        };
    }

    try {
        var effectiveDate = new Packages.java.util.Date();
        var data = populateAccountInfo(accountData, metaData, effectiveDate, ratePlanId);
        var response = billingService.createChildAccount(tenantDomain, stringify(data));

        var responseObj = JSON.parse(response);
        var createChildResObj = responseObj.createChildResponse;
        var addParentObj = responseObj.addParentResponse;
        var updateSubscriberResult, addSubscriptionResult;
        //Query template account and add that profiles
        if (createChildResObj.success) {
            updateSubscriberResult = apiMonService.updateAPISubscriberInfo(username, tenantDomain, false,
                    createChildResObj.accountNumber);
            log.info("update subscriber status: " + updateSubscriberResult);
            if (updateSubscriberResult) {
                apiData.subscriptionId = createChildResObj.subscriptionId;
                apiData.ratePlanId = ratePlanId;
                var sqlDateFormat = dateTimeFormatter(MYSQL_DATETIME_FORMAT);
                var formattedEffectiveDate = sqlDateFormat.format(effectiveDate);
                addSubscriptionResult = apiMonService.addSubscriptionInformation(tenantDomain, createChildResObj
                        .accountNumber, stringify(apiData), formattedEffectiveDate);
                log.info("Add subscription status: " + addSubscriptionResult);
                if (!addSubscriptionResult) {
                    log.error("Error while updating subscription information. subscription information update failed. "
                            + "account name: " + data.name + " account number: " + createChildResObj.accountNumber + "for tenant:"
                            + tenantDomain);
                    //Send error notification. Roll back won't happen since the subscriptions has been already paid
                    return {
                        error: true,
                        statusCode: 500,
                        message: "Subscription unsuccessful. Since the payment has already been processed, please contact" +
                        "support."
                    };
                }
            } else {
                log.error("Error while updating subscriber information. Account update failed. Account: " + data.name
                        + " will get deleted. Please issue a refund for " + data.name + " in tenant: " + tenantDomain);
                var deleteResponse = JSON.parse(billingService.deleteAccount(data.name));
                if (deleteResponse != null && deleteResponse.success != null && deleteResponse.success) {
                    //Send error notification to cloud to issue a refund
                    return {
                        error: true,
                        statusCode: 500,
                        message: "Subscription unsuccessful. You'll get a refund. if not please contact support."
                    };
                } else {
                    return {
                        error: true,
                        statusCode: 500,
                        message: "Subscription unsuccessful. your payment has already processed. Please contact support."
                    };
                }
            }

            if (!addParentObj.successSpecified || !addParentObj.success) {
                log.error("Adding parent failed for child." + " Tenant: " + tenantDomain + " For monetizing. Reasons: "
                        + stringify(createChildResObj.reasons));
            }
        } else {
            errorMsg = "Billing account creation failed.";
            log.error(errorMsg + " Tenant: " + tenantDomain + " For monetizing. Reasons: " + stringify
                    (createChildResObj.reasons));
            return {
                error: true,
                statusCode: 500,
                message: errorMsg + "Please Retry..."
            };
        }

        var modWorkflow = jagg.module("workflow");
        var workflowStatus;
        var workflowDesc;
        var workflowReference = apiData.workflowRefId;
        if (updateSubscriberResult && addSubscriptionResult) {
            workflowStatus = "APPROVED";
            workflowDesc = "subscription successful";
            return modWorkflow.resumeWorkflow(workflowReference, workflowStatus, workflowDesc);
        } else {
            workflowStatus = "REJECTED";
            workflowDesc = "subscription unsuccessful";
            modWorkflow.resumeWorkflow(workflowReference, workflowStatus, workflowDesc);
            //Send error notification. Roll back won't happen since the subscriptions has been already paid
            return {
                error: true,
                statusCode: 500,
                message: errorMsg + "Subscription failed. API will not be activated." +
                "Since the payment has already been processed, please contact support."
            };
        }


    } catch (e) {
        log.error("Child account creation failure. ");
        log.error(e);
        return {
            error: true,
            statusCode: 500,
            message: e.message
        };
    }
};

var decryptWorkflowData = function (workflowData) {
    var cryptoUtil = Packages.org.wso2.carbon.core.util.CryptoUtil.getDefaultCryptoUtil();
    var charset = Packages.java.nio.charset.Charset.defaultCharset();
    var decryptedDataString = new Packages.java.lang.String(cryptoUtil.base64DecodeAndDecrypt(workflowData), charset);
    var decryptedData = {};
    if (decryptedDataString != null && !"".equals(decryptedDataString)) {
        var dataArray = decryptedDataString.trim().split(":");
        decryptedData.workflowRefId = String(dataArray[0]);
        decryptedData.ratePlanName = String(dataArray[1]);
        decryptedData.appName = String(dataArray[2]);
        decryptedData.apiName = String(dataArray[3]);
        decryptedData.apiVersion = String(dataArray[4]);
    }
    return decryptedData;
};

//populate account information object
var populateAccountInfo = function (accountData, metaData, effectiveDate, ratePlanId) {
    var subscribeToRatePlans = [];
    var data = {};
    var dateFormatter = dateTimeFormatter(ZUORA_DATE_FORMAT);

    data.name = accountData.firstName + " " + accountData.lastName;
    data.autoPay = true;
    data.currency = "USD";
    data.billToContact = {};
    var item = {};
    item["productRatePlanId"] = ratePlanId;
    subscribeToRatePlans.push(item);
    data.subscription = {
        "termType": "EVERGREEN",
        "autoRenew": true,
        "subscribeToRatePlans": subscribeToRatePlans,
        "contractEffectiveDate": dateFormatter.format(effectiveDate)
    };

    data.hpmCreditCardPaymentMethodId = metaData.refId;
    data.billToContact = accountData;
    data.invoiceCollect = true;
    data.invoiceTargetDate = dateFormatter.format(effectiveDate);
    return data;
};
%>