<%
include("/jagg/jagg.jag");
include("/jagg/cloud/constants.jag");
include("/modules/pricing/utils.jag");

var billingConstants = Packages.org.wso2.carbon.cloud.billing.commons.BillingConstants;
var msg;
var log = new Log("modules.pricing.manager.jag");
var errorObj = {
    error: true,
    statusCode: 500,
    message: "Internal error. Please retry..."
};

//Create Billing vendor parameters
var generateParameters = function (tenantDomain, workflowReference) {
    try {
        var clientParams = JSON.parse(billingService.callVendorMethod("getPublishableKeyForTenant", tenantDomain));
        session.put(STRIPE_SIGNATURE_HASH, billingService.generateHash(clientParams.token, mdAlgorithm));
        //passthrough parameters are used to pass the values between the iframe and account creation page. we can use
        //those parameters by iteratively number them from 1
        //field_passthrough1 is client token
        clientParams.field_passthrough1 = clientParams.token;

        if (workflowReference != null) {
            //field_passthrough2 is workflowReference
            clientParams.field_passthrough2 = workflowReference;
            var apiData = decryptAndGetApiData(workflowReference);
            //field_passthrough4 is selectedApp
            clientParams.field_passthrough4 = apiData.appName;
        }
        //field_passthrough3 is tenantDomain
        clientParams.field_passthrough3 = tenantDomain;

        //can pre-load the new page with the previously entered information so that the user does not have to re-enter the information
        clientParams.retainValues = true;

        if (log.isDebugEnabled()) {
            log.debug("Parameters generated for tenant: " + clientParams.tenantId);
        }
        return {
            error: false,
            statusCode: 200,
            params: clientParams
        }
    } catch (e) {
        log.error("Error while generating params: ");
        log.error(e);
        return errorObj;
    }
};


var getAccountDetails = function () {
    try {
        var username = jagg.getUser().username;
        var accountId = getAccountId();
        var tenantDomain = multiTenantUtils.getTenantDomain(username);
        var summary = billingService.retrieveAccountInfo(tenantDomain, accountId);
        if (JSON.parse(summary.trim()).success) {
            return {
                error: false,
                message: summary,
                statusCode: 200
            };
        } else {
            log.error("Get zuora account info failed. Error : " + JSON.stringify(response.reasons));
            msg = "Getting account information failed .. Please retry ";
            return {
                error: true,
                message: msg,
                statusCode: 500
            };
        }
    } catch (e) {
        msg = "Error while getting the account details.. Please retry ";
        log.error("ERROR while getting the account details for : " + username + " - " + e.message);
        log.error(e);
        return {
            error: true,
            message: msg,
            statusCode: 500
        };
    }
};


var updateContactInfo = function (organizationName, accountData) {
    try {
        var metaData = {};
        var accountId = getAccountId();
        var username = jagg.getUser().username;
        var tenantDomain = multiTenantUtils.getTenantDomain(username);
        var data = populateAccountInfo(organizationName, accountData, metaData, true);
        var response = JSON.parse(billingService.updateCustomer(tenantDomain, accountId, JSON.stringify(data)));
        if (response.success) {
            return {
                error: false,
                message: "Your contact information is successfully added",
                statusCode: 200
            };
        } else {
            log.error("Zuora customer account update failed. Error : " + JSON.stringify(response.reasons));
            msg = "Account Update Failed.. Please retry ";
            return {
                error: true,
                message: msg,
                statusCode: 500
            };
        }
    } catch (e) {
        msg = "Account Update Failed.. Please retry ";
        log.error("ERROR while updating contact info for : " + username + " - " + e.message);
        return {
            error: true,
            message: msg,
            statusCode: 500
        };
    }

};

var removePaymentMethod = function (methodId) {
    try {
        var accountId = getAccountId();
        var user = jagg.getUser().username;
        var tenantDomain = multiTenantUtils.getTenantDomain(user);
        var result = JSON.parse(billingService.removePaymentMethod(tenantDomain,accountId ,methodId));
        if (result.success) {
            return {
                error: false,
                message: result,
                statusCode: 200
            };
        } else {
            log.error("Zuora remove payment method failed. Error : " + JSON.stringify(result.reasons));
            msg = "Remove payment method failed.. Please retry ";
            return {
                error: true,
                message: msg,
                statusCode: 500
            };
        }
    } catch (e) {
        log.error("ERROR while getting the payment methods  for : " + user + " - " + e.message);
        log(e);
        msg = "Error while getting the payment methods";
        return {
            error: true,
            message: msg,
            statusCode: 500
        };
    }
};

var getAllPaymentMethods = function () {
    try {
        var user = jagg.getUser().username;
        var tenantDomain = multiTenantUtils.getTenantDomain(user);
        var accountId = getAccountId();
        var object = {object:"card"};
        var summary = JSON.parse(billingService.getAllPaymentMethods(tenantDomain, accountId, JSON.stringify(object)));
        if (summary.success) {
            return {
                error: false,
                message: summary,
                statusCode: 200
            };
        } else {
            log.error("Zuora get payment methods failed. Error : " + JSON.stringify(summary.reasons));
            msg = "Error getting payment methods.. Please retry ";
            return {
                error: true,
                message: msg,
                statusCode: 500
            };
        }
    } catch (e) {
        log.error("ERROR while getting the payment methods  for : " + user + " - " + e.message);
        log(e);
        msg = "Error while getting the payment methods";
        return {
            error: true,
            message: msg,
            statusCode: 500
        };
    }
};

var updateDefaultPaymentMethod = function (methodId) {
    try {
        var accountId = getAccountId();
        var user = jagg.getUser().username;
        var tenantDomain = multiTenantUtils.getTenantDomain(user);
        var data = {
            "default_source": ''+methodId+''
        };
        var response = JSON.parse(billingService.setDefaultPaymentMethod(tenantDomain, accountId, JSON.stringify
        (data)));
        if (response.success) {
            return {
                error: false,
                message: response.success,
                statusCode: 200
            };
        } else {
            log.error("Update default payment method failed. Error : " + JSON.stringify(response.reasons));
            msg = "Update default payment method failed.. Please retry ";
            return {
                error: true,
                message: msg,
                statusCode: 500
            };
        }
    } catch (e) {
        log.error("ERROR while while updating the default payment method: " + user + " - " + e.message);
        log.error(e);
        msg = "Error while updating payment methods";
        return {
            error: true,
            message: msg,
            statusCode: 500
        };
    }
};

var dateTimeFormatter = function(dateTimeFormat) {
    return new Packages.java.text.SimpleDateFormat(dateTimeFormat);
};

var getBillingInvoiceData = function (invoiceId) {
    try {
        var username = jagg.getUser().username;
        var accountId = getAccountId();
        var tenantDomain = multiTenantUtils.getTenantDomain(username);
        var data = {
            "customer" : accountId
        };
        var summary = billingService.getInvoices(tenantDomain, JSON.stringify(data));
        var invoiceObj = JSON.parse(summary);
        if (invoiceObj.data) {
            var invoices = invoiceObj.data;
            for (var index = 0; index < invoices.length; index++) {
                if (invoiceId == invoices[index].id) {
                    var InvoidObj = invoices[index];
                    var invoiceItems = InvoidObj.lines.data;

                    var invoiceData = {};

                    invoiceData[ACCOUNT_NAME] = InvoidObj.customer;
                    invoiceData[INVOICE_DATE] = dateFormat.format(InvoidObj.date * THOUSAND) ;
                    invoiceData[INVOICE_NUMBER] = InvoidObj.id;
                    invoiceData[AMOUNT] = InvoidObj.amount_due / CENTS;
                    invoiceData[INVOICE_ITEMS] = [];

                    for (var i = 0; i < invoiceItems.length; i++) {
                        var item = {};
                        var invoiceItem = invoiceItems[i];
                        item[CHARGE_NAME] = invoiceItem.plan.name;
                        item[AMOUNT] = invoiceItem.plan.amount / CENTS;
                        item[SERVIVICE_PERIOD] = dateFormat.format(invoiceItem.period.start * THOUSAND) + " to " +
                        dateFormat.format(invoiceItem.period.end * THOUSAND);
                        item[CHARGE_DATE] = dateFormat.format(InvoidObj.date * THOUSAND);
                        //if next invoice item is not in the next billing cycle
                        if (invoiceItem.discountable && InvoidObj.discount != null) {
                            if (InvoidObj.discount.coupon.amount_off != null) {
                                item["discount"] = -invoiceObj.discount.coupon.amount_off / CENTS;
                            } else {
                                item["discount"] = -(invoiceItem.amount - invoiceObj.discount.coupon.percent_off) / CENTS;
                            }
                        }
                        else {
                            item[DISCOUNT] = 0.0 / CENTS;
                        }
                        invoiceData[INVOICE_ITEMS].push(item);
                    }
                    return {
                        error: false,
                        message: invoiceData,
                        statusCode: 200
                    };
                }
            }
        } else {
            log.error("Error getting billing invoice data. Error : " + JSON.stringify(response.reasons));
            msg = "Error getting billing invoice data.. Please retry ";
            return {
                error: true,
                message: msg,
                statusCode: 500
            };
        }
    } catch (e) {
        msg = "Error while updating payment methods";
        log.error("ERROR while getting invoice data for : " + username + " - " + e.message);
        return {
            error: true,
            message: msg,
            statusCode: 500
        };
    }
};

//API monetization enabled status
var isMonetizationEnabled = function (tenantDomain) {

    var status = session.get("monetizationEnabled");
    if (status != null && status) {
        return {
            error: false,
            statusCode: 200,
            monetizationEnabled: status
        };
    }

    try {
        if (typeof tenantDomain != "undefined" && tenantDomain != null && tenantDomain != "") {
            var monetizationStatus = apiMonService.isMonetizationEnabled(tenantDomain);
            session.put("monetizationEnabled", monetizationStatus);
            return {
                error: false,
                statusCode: 200,
                monetizationEnabled: monetizationStatus
            };
        } else {
            var message = "Unable to check the monetization status when the tenant domain is null";
            errorObj.message = message;
            return errorObj;
        }
    } catch (e) {
        log.error("Error while checking the monetization status for tenant: " + tenantDomain);
        log.error(e);
        return errorObj;
    }

};

//Create billing account with the subscription
var createAccount = function (username, accountData, metaData, workflowRefData) {

    var ratePlanId, errorMsg;
    var tenantDomain = multiTenantUtils.getTenantDomain(username);

    if (!validatePassThroughHash(metaData.field_passthrough1)) {
        errorMsg = "Invalid token. ";
        log.error(errorMsg + ". Hash value mismatch. ");
        return {
            error: true,
            statusCode: 500,
            message: errorMsg + "Please subscribe again.."
        };
    }

    if (workflowRefData == null || "".equals(workflowRefData)) {
        errorMsg = "Workflow refId is invalid. It should not be null or empty";
        log.error(errorMsg);
        return {
            error: true,
            statusCode: 500,
            message: errorMsg
        };
    }

    //base64 decode and decrypt the workflow data
    var apiData = decryptWorkflowData(workflowRefData);
    try {
        ratePlanId = apiMonService.getRatePlanId(tenantDomain, apiData.ratePlanName);
        if (ratePlanId == null || "".equals(ratePlanId)) {
            errorMsg = "Rate plan invalid. it should be neither null nor empty";
            log.error(errorMsg);
            return {
                error: true,
                statusCode: 500,
                message: errorMsg
            };
        }
    } catch (e) {
        log.error("Error while getting the subscribed rate plan id.");
        log.error(e);
        return {
            error: true,
            statusCode: 500,
            message: e.message
        };
    }

    try {
        var effectiveDate = new Packages.java.util.Date();
        var data = populateAccountInfo(accountData, metaData, false);
        var response = billingService.createCustomer(tenantDomain, stringify(data));
        var createChildAccountResObj = JSON.parse(response);
        var updateSubscriberResult, addSubscriptionResult;
        if (createChildAccountResObj.id != null) {
            data = populateSubscriptionInfo(createChildAccountResObj.id, ratePlanId);
            var responseSubscriptionCreation = billingService.createSubscription(tenantDomain, stringify(data));
            var responseSubscriptionCreationObj = JSON.parse(responseSubscriptionCreation);

            if (responseSubscriptionCreationObj.success) {
                updateSubscriberResult = apiMonService.updateAPISubscriberInfo(username, tenantDomain, false,
                        createChildAccountResObj.id);
                var sqlDateFormat = dateTimeFormatter(MYSQL_DATETIME_FORMAT);
                var formattedEffectiveDate = sqlDateFormat.format(effectiveDate);
                var messageBody, subject;

                if (updateSubscriberResult) {
                    apiData.subscriptionNumber = responseSubscriptionCreationObj.data.subscriptionNumber;
                    apiData.ratePlanId = ratePlanId;
                    addSubscriptionResult = apiMonService.addSubscriptionInformation(tenantDomain, createChildAccountResObj.id,
                            stringify(apiData), formattedEffectiveDate);

                    if (!addSubscriptionResult) {
                        log.error("Error while updating subscription information. subscription information update failed. "
                        + "account name: " + data.name + " account number: " + createChildAccountResObj.id + "for tenant:"
                        + tenantDomain);
                        //ToDo This email and manual recovering process is a temporary fix for the MVP
                        messageBody = "Error while updating subscription information in the database. Please update " +
                        "the subscriptions table. Tenant: " + tenantDomain + ", Username: " +
                        username + ", Account number: " + createChildAccountResObj.id + ", Effective date: "
                        + formattedEffectiveDate + ", API data: " + stringify(apiData);
                        subject = "[Monetization][API Cloud][ALERT] Subscription db update failure";
                        billingService.sendEmailToCloud(subject, messageBody);
                        log.error("Error while updating subscriber information. Account update failed. Account: " + data.name
                        + " Tenant: " + tenantDomain);
                        addSubscriptionResult = true;
                    }
                } else {
                    //ToDo This email and manual recovering process is a temporary fix for the MVP
                    messageBody = "Error while updating subscriber information in the database. Please update " +
                    "the subscriber table & subscriptions table. Tenant: " + tenantDomain + ", Username: " +
                    username + ", Account number: " + createChildAccountResObj.accountNumber + ", Effective date: "
                    + formattedEffectiveDate + ", API data: " + stringify(apiData);
                    subject = "[Monetization][API Cloud][ALERT] Subscriber account db update failure";
                    billingService.sendEmailToCloud(subject, messageBody);
                    log.error("Error while updating subscriber information. Account update failed. Account: " + data.name
                    + " Tenant: " + tenantDomain);
                    updateSubscriberResult = true;
                    addSubscriptionResult = true;
                }
            } else {
                errorMsg = "Billing account creation failed.";
                //ToDo This email and manual recovering process is a temporary fix for the MVP
                messageBody = errorMsg + " Tenant: " + tenantDomain + " For monetizing. Response: "
                + stringify(createChildAccountResObj.reasons) + "  User may have retried later. No action required" +
                "unless this is a recurring issue. Please see the response details";

                subject = "[Monetization][API Cloud][WARN] Zuora account creation failure";
                billingService.sendEmailToCloud(subject, messageBody);

                log.error(messageBody);
                return {
                    error: true,
                    statusCode: 500,
                    message: errorMsg + " Please Retry..."
                };
            }

        var modWorkflow = jagg.module("workflow");
        var workflowStatus;
        var workflowDesc;
        var workflowReference = apiData.workflowRefId;
        if (updateSubscriberResult && addSubscriptionResult) {
            workflowStatus = "APPROVED";
            workflowDesc = "subscription successful";
            return modWorkflow.resumeWorkflow(workflowReference, workflowStatus, workflowDesc);
        } else {
            workflowStatus = "REJECTED";
            workflowDesc = "subscription unsuccessful";
            modWorkflow.resumeWorkflow(workflowReference, workflowStatus, workflowDesc);
            //Send error notification. Roll back won't happen since the subscriptions has been already paid
            return {
                error: true,
                statusCode: 500,
                message: errorMsg + "Subscription failed. API will not be activated." +
                "Since the payment has already been processed, please contact support."
            };
        }
        } else {
            errorMsg = "Billing account creation failed.";
            //ToDo This email and manual recovering process is a temporary fix for the MVP'
            messageBody = errorMsg + " Tenant: " + tenantDomain + " For monetizing. Response: Creating Account For" +
            "Stripe failed";

            subject = "[Monetization][API Cloud][WARN] Stripe account creation failure";
            billingService.sendEmailToCloud(subject, messageBody);

            log.error(messageBody);
            return {
                error: true,
                statusCode: 500,
                message: errorMsg + " Please Retry..."
            };




        }


    } catch (e) {
        log.error("Child account creation failure. ");
        log.error(e);
        return {
            error: true,
            statusCode: 500,
            message: e.message
        };
    }
};

var getRatePlanInfo = function (tenantDomain, workflowRefData) {

    var apiData = decryptAndGetApiData(workflowRefData);

    var ratePlanName = apiData.ratePlanName;
    var ratePlansObj = session.get(TENANT_RATE_PLANS);

    if (ratePlansObj == null) {
        return getAndAddRatePlanToSession(tenantDomain, ratePlanName);
    } else {
        var ratePlanObj = getRatePlan(ratePlanName, ratePlansObj);
        if (ratePlanObj != null) {
            return {
                error: false,
                statusCode: 200,
                ratePlan: ratePlanObj
            };
        } else {
            //Retry to check new rate plan availability
            return getAndAddRatePlanToSession(tenantDomain, ratePlanName);
        }
    }
};

var getAllProductPlansForTenant = function (tenantDomain) {
    try {
        var result = apiMonService.getTiersOfTenant(tenantDomain);
        var tierList = JSON.parse(result)["list"];
        var result = apiMonService.getRatePlansInfo(tenantDomain);
        if (log.isDebugEnabled()) {
            log.debug("getAllProductPlansForTenant : " + stringify(result));
        }
        var ratePlanList = JSON.parse(result);
        for (var index in ratePlanList) {
            for (var tiersIndex in tierList) {
                if (tierList[tiersIndex].policyName == ratePlanList[index].RatePlanName) {
                    ratePlanList[index].defaultLimit = tierList[tiersIndex].defaultLimit;
                    break;
                }
            }
            ratePlanList[index].MonthlyRental = parseFloat(ratePlanList[index].MonthlyRental).toFixed(2);
            ratePlanList[index].OverUsageUnitsPrice = parseFloat(ratePlanList[index].OverUsageUnitsPrice).toFixed(2);
        }
        return {
            error: false,
            result: ratePlanList,
            statusCode: 200
        };
    } catch (e) {
        var errorMessage = "Error while getting rate plans for tenant:" + tenantDomain;
        log.error(errorMessage);
        log.error(e);
        errorObj.message = errorMessage;
        return errorObj;
    }
};

var populateSubscriptionInfo = function (customer, ratePlanId) {
    var data = {};
    data.customer = customer;
    data.plan = ratePlanId;
    return data;
};

var addPaymentMethod = function(tokenId) {
    try {
        var accountId = getAccountId();
        var user = jagg.getUser().username;
        var tenantDomain = multiTenantUtils.getTenantDomain(user);
        var data = {};
        data.source = tokenId;
        var response = JSON.parse(billingService.addPaymentMethod(tenantDomain, accountId, JSON.stringify(data)));
        if(response.success){
            return {
                error: false,
                result: response.data.default_payment_method,
                statusCode: 200
            };

        } else {
            return {
                error: true,
                result: "Error while adding the payment method",
                statusCode: 500
            };
        }
    } catch (e) {
        log.error("customer account update failed. Error : " + e);
        throw new Error("customer account update failed. Error : " + e);
    }
};

%>
