<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");
include("/modules/database/sql.jag");

(function () {
    var log = new Log("jagg/jaggery_acs.jag");
    var samlResponse = request.getParameter("SAMLResponse");
    var sessionId = session.getId();
    var samlRequest = request.getParameter("SAMLRequest");
    var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var SSO_NAME = cloudConfig.SSORelyingParty.name;

    // create a sso relying party js object
    include('config_reader.jag');
    include("/jagg/jagg.jag");
    var security = require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);
    var isLogoutResponse = false;
    var isLogoutRequest = false;
    // if saml response is not a log out response
    if (samlResponse != null) {
        isLogoutResponse = ssoRelyingParty.isLogoutResponse(samlResponse);
        if (!Boolean(isLogoutResponse)) {
            // relay state value should be a valid value, this value is mapped with request uri.
            var relayState = request.getParameter("RelayState");
            var requestedURI = ssoRelyingParty.getRelayStateProperty(relayState);
            if (requestedURI == null) {
                log.error("Relaystate value is invalid.");
                session.remove('ERROR_MSG');
                session.put('ERROR_MSG', 'An authorization error occurred in the backend');
                response.sendRedirect("../site/pages/error-pages/error.jag");
                return;
            }

            // validating the signature
            var isSignatureValid = ssoRelyingParty.validateSignature(samlResponse);
            if (!Boolean(isSignatureValid)) {
                log.error("SAML response signature is verification failed.");
                session.remove('ERROR_MSG');
                session.put('ERROR_MSG', 'An authorization error occurred in the backend');
                response.sendRedirect("../site/pages/error-pages/error.jag");
                return;
            }

            samlResponse = samlResponse.replace('<?xml version="1.0" encoding="UTF-8"?>', "");
            session.put("SAML_TOKEN", samlResponse);
            ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse);
            jagg.setUser(ssoRelyingParty.getLoggedInUser(sessionId));
            session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));

            //Getting the user details and adding them to session
            var userName = ssoRelyingParty.getLoggedInUser(sessionId);
            var modManager = jagg.module("manager");
            var domainLessUserName = modManager.getTenantAwareUsername(userName);
            var userInfo = getUserInfo(domainLessUserName);
            var firstName = userInfo.firstName;
            var lastName = userInfo.lastName;
            var tenantDomain = modManager.getTenantDomain();
            var email = modManager.getEmailOfUser(userName);
            var tenantDisplayName = modManager.getTenantDisplayName(tenantDomain);
            session.put("LOGGED_IN_USER_TENANT_DOMAIN", tenantDomain);
            session.put("LOGGED_IN_USER_EMAIL", email);

            log.info("Logged in User : " + session.get("LOGGED_IN_USER"));
            log.info("Logged in User's email : " + session.get("LOGGED_IN_USER_EMAIL"));
            log.info("Logged in User's Tenant Domain : " + tenantDomain);
            log.info("Logged in User's Tenant Domain Display Name : " + tenantDisplayName);

            var type = cloudConfig.subscriptions.type;
            var storeUrl = type[1].urls.storeUrl + "?tenant=" + tenantDomain;
            var isOnlySubscribedUser = jagg.module("util").hasOnlySubscriberRole(session.get("LOGGED_IN_USER"));
            if (isOnlySubscribedUser) {
                response.sendRedirect(storeUrl);
            } else {
                var firstNameCheckList = firstName == "$1" || firstName == "undefined" || firstName == undefined || firstName == "";
                var lastNameCheckList = lastName == "$1" || lastName == "undefined" || lastName == undefined || lastName == "";

                if (firstNameCheckList || lastNameCheckList) {
                    response.sendRedirect("../" + PROFILE_PAGE);
                } else {
                    response.sendRedirect(requestedURI);
                }
            }
            createTenantInfoObject();
        } else {
            // if the saml response is log out request from IDP, we log out from web app.
            ssoRelyingParty.invalidateSessionBySessionId(sessionId);
            session.invalidate();
            response.sendRedirect("../");
            return;
        }
    }

    // if saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        isLogoutRequest = ssoRelyingParty.isLogoutRequest(samlRequest);
        if (Boolean(isLogoutRequest)) {
            ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
            session.invalidate();
        }
    }


}());

function createTenantInfoObject() {
    var modManager = jagg.module("manager");
    var tenantInfo = {};
    tenantInfo.tenantDomain = modManager.getTenantDomain();
    tenantInfo.tenantId = modManager.getTenantId();
    session.put("TENANT_INFO", tenantInfo);
}

// Get the user profile information
function getUserInfo(domainLessUserName) {
    var userInfo = jagg.module("tenant").getUserInfo(domainLessUserName);
    return userInfo;
}

%>
    </body>
</html>
