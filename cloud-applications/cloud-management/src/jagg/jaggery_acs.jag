<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");
include("/modules/database/sql.jag");

(function () {
    var log = new Log("jagg/jaggery_acs.jag");
    var samlResponse = request.getParameter("SAMLResponse");
    var sessionId = session.getId();
    var samlRequest = request.getParameter("SAMLRequest");
    var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var SSO_NAME = cloudConfig.SSORelyingParty.name;

    // create a sso relying party js object
    include('config_reader.jag');
    include("/jagg/jagg.jag");
    var security = require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);
    var isLogoutResponse = false;
    var isLogoutRequest = false;
    // if saml response is not a log out response
    if (samlResponse != null) {
        isLogoutResponse = ssoRelyingParty.isLogoutResponse(samlResponse);
        if (!Boolean(isLogoutResponse)) {

            var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
            var fullUserName = ssoRelyingParty.getSAMLResponseNameId(samlResponse);
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var domainName = null;
            if (fullUserName != null) {
                domainName = MultitenantUtils.getTenantDomain(fullUserName);
            } else {
                log.error("SAML Response Schema verification failed");
                response.sendRedirect("../site/pages/error-pages/401.html");
                return;
            }

            // validate assertion validity period
            var isValidityPeriodEnabled = Boolean(cloudConfig.SSORelyingParty.verifyAssertionValidityPeriod);
            var timeStampSkewInSeconds = cloudConfig.SSORelyingParty.timestampSkewInSeconds;

            if (isValidityPeriodEnabled) {
                if (!timeStampSkewInSeconds || timeStampSkewInSeconds == null) {
                    timeStampSkewInSeconds = TIME_STAMP_SKEW_IN_SECONDS;
                }
                ssoRelyingParty.setProperty("timestampSkewInSeconds", timeStampSkewInSeconds);
                var isValidityPeriodValid = ssoRelyingParty.validateAssertionValidityPeriod(samlResponse);
                if (!isValidityPeriodValid) {
                    log.error("SAML response validity period verification failed.");
                    response.sendRedirect("../site/pages/error-pages/401.html");
                    return;
                }
            }

            // validating the audience restrictions
            var audienceRestrictionsEnabled = Boolean(cloudConfig.SSORelyingParty.audienceRestrictionsEnabled);
            if (audienceRestrictionsEnabled) {
                var isAudienceRestrictionsValid = ssoRelyingParty.validateAudienceRestrictions(samlResponse);
                if (!isAudienceRestrictionsValid) {
                    log.error("SAML Response Audience Restrictions verification failed");
                    response.sendRedirect("../site/pages/error-pages/401.html");
                    return;
                }
            }

            // relay state value should be a valid value, this value is mapped with request uri.
            var relayState = request.getParameter("RelayState");
            var requestedURI = ssoRelyingParty.getRelayStateProperty(relayState);
            if (requestedURI == null) {
                log.error("Relaystate value is invalid.Relaystate value : " + relayState);
                session.remove('ERROR_MSG');
                session.put('ERROR_MSG', 'An authorization error occurred in the backend');
                response.sendRedirect("../site/pages/error-pages/401.html");
                return;
            }

            // validating the signature
            var responseSigningEnabled = Boolean(cloudConfig.SSORelyingParty.responseSigningEnabled);
            if (responseSigningEnabled) {
                var isSignatureValid = ssoRelyingParty.validateSignature(samlResponse);
                if (!isSignatureValid) {
                    log.error("SAML Response Signature verification failed.");
                    session.remove('ERROR_MSG');
                    session.put('ERROR_MSG', 'An authorization error occurred in the backend');
                    response.sendRedirect("../site/pages/error-pages/401.html");
                    return;
                }
            }

            // validating the saml assertion signature
            var assertionSigningEnabled = Boolean(cloudConfig.SSORelyingParty.assertionSigningEnabled);

            if (assertionSigningEnabled) {
                // validating the saml assertion signature
                var isAssertionSignatureValid = ssoRelyingParty.validateAssertionSignature(samlResponse);
                if (!isAssertionSignatureValid) {
                    log.error("SAML Assertion Signature verification failed.");
                    response.sendRedirect("../site/pages/error-pages/401.html");
                    return;
                }
            }

            // generate new session id before following through - fix for session fixation
            jagg.setUser(null);
            sessionId = session.getId();

            samlResponse = samlResponse.replace('<?xml version="1.0" encoding="UTF-8"?>', "");
            session.put("SAML_TOKEN", samlResponse);
            ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse);
            jagg.setUser(ssoRelyingParty.getLoggedInUser(sessionId));
            session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));

            //Getting the user details and adding them to session
            var userName = ssoRelyingParty.getLoggedInUser(sessionId);
            var modManager = jagg.module("manager");
            var domainLessUserName = modManager.getTenantAwareUsername(userName);
            var userInfo = jagg.module("tenant").getUserInfo(domainLessUserName);
            var firstName = userInfo.firstName;
            var lastName = userInfo.lastName;
            var tenantDomain = modManager.getTenantDomain();
            var email = modManager.getEmailOfUser(userName);
            var tenantDisplayName = modManager.getTenantDisplayName(tenantDomain);
            session.put("LOGGED_IN_USER_TENANT_DOMAIN", tenantDomain);
            session.put("LOGGED_IN_USER_EMAIL", email);
            session.put("LOGGED_IN_USER_FULL_NAME", firstName + " " + lastName);

            log.info("Logged in User [ User : " + session.get("LOGGED_IN_USER") +
                    ", Full Name : " + session.get("LOGGED_IN_USER_FULL_NAME") +
                    ", Email : " + session.get("LOGGED_IN_USER_EMAIL") +
                    ", Tenant : " + session.get("LOGGED_IN_USER_TENANT_DOMAIN") +
                    ", DisplayName : " + session.get("LOGGED_IN_USER_TENANT_DISPLAY_NAME") + " ]");

            var type = cloudConfig.subscriptions.type;
            var storeUrl = cloudConfig.ServerUrls.apiManager + "store?tenant=" + tenantDomain;
            var modUserManagement = jagg.module("user/management");
            var isOnlySubscribedUser = modUserManagement.hasOnlySubscriberRole(session.get("LOGGED_IN_USER"));
            if (isOnlySubscribedUser) {
                //Get registry mapping
                var currentMapping = jagg.module("customurl").getCurrentUserMapping(API_CLOUD_TYPE);
                if (currentMapping != null && currentMapping.store.customUrl != storeUrl) {
                    storeUrl = HTTPS + currentMapping.store.customUrl;
                }
                response.sendRedirect(storeUrl);
            } else {
                var firstNameCheckList = firstName == "$1" || firstName == "undefined" || firstName == undefined || firstName == "";
                var lastNameCheckList = lastName == "$2" || lastName == "undefined" || lastName == undefined || lastName == "";

                if (firstNameCheckList || lastNameCheckList) {
                    session.put("LOGGED_IN_USER_FULL_NAME", email);
                    response.sendRedirect("../" + PROFILE_PAGE);
                } else {
                    response.sendRedirect(requestedURI);
                }
            }
            createTenantInfoObject();
        } else {
            // if the saml response is log out request from IDP, we log out from web app.
            ssoRelyingParty.invalidateSessionBySessionId(sessionId);
            session.invalidate();
            response.sendRedirect("../");
            return;
        }
    }

    // if saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        isLogoutRequest = ssoRelyingParty.isLogoutRequest(samlRequest);
        if (Boolean(isLogoutRequest)) {
            ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
            session.invalidate();
        }
    }


}());

function createTenantInfoObject() {
    var modManager = jagg.module("manager");
    var tenantInfo = {};
    tenantInfo.tenantDomain = modManager.getTenantDomain();
    tenantInfo.tenantId = modManager.getTenantId();
    session.put("TENANT_INFO", tenantInfo);
}


%>
    </body>
</html>
