<% jagg.template("user/list", function(inputs, outputs, jagg) { %>

<%
var user = session.get("LOGGED_IN_USER");
if (user != null) {

    var hasInviteUserPermission = outputs.hasInviteUserPermission;
    var isInvitationSent = Boolean(request.getParameter("invitaton"));
    var tenantDomain =  request.getParameter("tenant");
    if(tenantDomain == null || tenantDomain == ''){
        var userName =  session.get("LOGGED_IN_USER");
        if(userName != null){
            tenantDomain =  jagg.module("manager").getTenantDomain(userName);
        }
    }
    var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var type = cloudConfig.subscriptions.type;
    var carbon = require('carbon');
    var server = carbon.server;
    //getting the max items per page
    var  itemsPerPage = server.osgiService('org.wso2.carbon.base.api.ServerConfigurationService').getFirstProperty("ItemsPerPage");
%>

 <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/jquery.bootpag.min.js'))%>"></script>
    <script type="text/javascript">

    var usersWithRoles = [];
    var pendingUsersWithRoles = [];
    var checkedUsers = [];
    var checkedInvitations = [];
    var selectedCount = 0;
    var selectedInvitationCount = 0;
    var permittedToInvite = <%=hasInviteUserPermission%>;
    var isInvitationSent = <%=isInvitationSent%>;
    var maxItemsInPage = Math.floor(<%=itemsPerPage%>/2);
    var pageNumberForMembers = 1;
    var pageNumberForInvitations = 1;
    var totalPagesForMembers = 1;
    var totalPagesForInvitations = 1;
    var maxUsersInPage = <%=itemsPerPage%>;
    var pageNumber = 1;
    var totalPages = 1;
    var appOwners = [];
 	
/* This method validates a single email address given as an input parameter */
function ValidateEmail(inputText){

    var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
    if(mailformat.test(inputText)){
        return true;
    }
    else{
        return false;
    }

}
/*this method fill up the table that depicts the roles and the relevant users */
    function disable(btnId){
        var classes=$('#'+btnId).attr('class');
        if(classes.indexOf('disable')===-1){
            $('#'+btnId).addClass("disable");
        }


    }
    function enable(btnId){
        var classes=$('#'+btnId).attr('class');
        if(classes.indexOf('disable')!==-1){
            $('#'+btnId).removeClass("disable");
        }
    }
    function enableDisableEditDeleteButtons(enablePara){
        if(enablePara){
            //enable delete and edit
            enable('jsroleAssignPopup');
            enable('removeUsers');

        }else{
            //disable edit and delete buttons
            disable('jsroleAssignPopup');
            disable('removeUsers');

        }

    }
    function enableDisableEditDeleteButtonsForInvitations(enablePara) {
        if (enablePara) {
            //enable delete and edit
            enable('jsinvitationroleAssignPopup');
            enable('revokeInvitation');

        } else {
            //disable edit and delete buttons
            disable('jsinvitationroleAssignPopup');
            disable('revokeInvitation');

        }
    }
function selectCheckBox(id){
	var isChecked = $('#ck_'+id).is(':checked');
	if(isChecked){
		$('#ck_'+id).removeAttr('checked');
	} else {
		 
		$("#ck_"+id).attr('checked',true);
	}
	enableButton($('#ck_'+id).is(':checked'));
}

function selectCheckBoxForInvitations(id) {
    var isChecked = $('#ick_' + id).is(':checked');
    if (isChecked) {
        $('#ick_' + id).removeAttr('checked');
    } else {

        $("#ick_" + id).attr('checked', true);
    }
    enableButtonForInvitations($('#ick_' + id).is(':checked'));
}

function enableButton(ischecked){
	if(ischecked){
	    selectedCount++;
	    enableDisableEditDeleteButtons(true);
	}else{
	    selectedCount--;
	    if(selectedCount===0){
		enableDisableEditDeleteButtons(false);
	    }
	}
}

function enableButtonForInvitations(ischecked) {
    if (ischecked) {
        selectedInvitationCount++;
        enableDisableEditDeleteButtonsForInvitations(true);
    } else {
        selectedInvitationCount--;
        if (selectedInvitationCount === 0) {
            enableDisableEditDeleteButtonsForInvitations(false);
        }
    }
}

function getBlockedSubscriptions() {
    var blockedSubs;
    jagg.syncPost("../blocks/tenant/users/add/ajax/add.jag", {
        action:"getBlockedSubscriptions"
    },
    function (result) {
      blockedSubs=result;
    });
   return blockedSubs; 
}
function updatePopupUserRoles() {
    var type = <%=type%>;
	var $jsroleAssignPopupForm = $('#jsroleAssignPopupForm');
	var $jsroleAssign ='';
	var blockSubscriptions = getBlockedSubscriptions();
	//getting the roles of each subscriptions
	for(var i=0;i < type.length;i++){
		if(blockSubscriptions.indexOf(type[i].id) <0 || blockSubscriptions==null){
		var tempRoleArray= type[i].roleTypes;
	    for(var count=0; count< tempRoleArray.length; count++){
			$jsroleAssign = $jsroleAssign + '<div class="input_row">'+
	  	 	'<label class="text-box-overrider" data-role='+ tempRoleArray[count].roleName+'><span class="checkbox-unchecked"></span>'+ 
	  	 	tempRoleArray[count].displayRoles+'</label></div>';		
		}}	
	}
	$jsAssignButton =$('<div class="btn_row"><button class="btn main small" type="button" id="saveUserRoles">Save</button><a href="#" class="popover_close small">Close</a> </div>');
	$jsroleAssignPopupForm.append($jsroleAssign); 
	$jsroleAssignPopupForm.append($jsAssignButton);  

}

function updatePopupUserRolesForInvitations() {
    var type = <%=type%>;
    var $jsinvitationroleAssignPopupForm = $('<form class="form-container" id="jsinvitationPopupForm">');
    var $jsinvitationroleAssign = '';
    var blockSubscriptions = getBlockedSubscriptions();
    //getting the roles of each subscriptions
    for (var i = 0; i < type.length; i++) {
        if (blockSubscriptions.indexOf(type[i].id) < 0 || blockSubscriptions == null) {
            var tempRoleArray = type[i].roleTypes;
            for (var count = 0; count < tempRoleArray.length; count++) {
                $jsinvitationroleAssign = $jsinvitationroleAssign + '<div class="input_row">' + '<label ' +
                    'class="text-box-overrider-invitations" data-role=' + tempRoleArray[count].displayRoles + '><span ' +
                    'class="checkbox-unchecked"></span>' + tempRoleArray[count].displayRoles + '</label></div>';

            }
        }
    }

    $jsroleAssignButton = $('<div class="btn_row"><button class="btn main small" type="button" id="updateInvitations">Update</button><a href="#" class="popover_close small">Close</a> </div></form>');

    $jsinvitationroleAssignPopupForm.append($jsinvitationroleAssign);
    $jsinvitationroleAssignPopupForm.append($jsroleAssignButton);
    var $jsinvitationPopupFormDiv = $('#jsinvitationPopupFormDiv');
    $jsinvitationPopupFormDiv.append($jsinvitationroleAssignPopupForm);
}

function updateTable() {
        $('.cleanable').remove();
        var tenantDomain = '<%=tenantDomain%>';
        jagg.syncPost("../blocks/tenant/users/get/ajax/get.jag", {
            action: "getUsersofTenant",
            tenantDomain: tenantDomain
    	}, function (result) {
        var recordCount = 0;
        if (result !== undefined) {
            usersWithRoles =result;
            recordCount = usersWithRoles.length;
        }       
         if (recordCount > 0) {
            var countString='';
            if(recordCount===1){
                $('#membersCount').replaceWith('<h2 id="membersCount" class="big push_bottom_40">1 Member in Organization</h2>');
            } else{
                $('#membersCount').replaceWith('<h2 id="membersCount" class="big push_bottom_40">'+recordCount+' Members in Organization</h2>');
            }
            createTable(usersWithRoles); 
        } else {
               $('#userListContainer').html('<li class="noData-message">no data</li>');
            //messageElement.html("No users/roles found!").fadeIn();

        }
    }, function (jqXHR, textStatus, errorThrown) {

        //messageElement.html("Error occured while loading User/Roles information!").fadeIn();

    });

    //Get pending invitation details
    jagg.syncPost("../blocks/tenant/users/get/ajax/get.jag", {
        action: "getPendingUsers",
        tenantDomain: tenantDomain
    }, function(result) {
        var recordCount = 0;
        if (result !== undefined) {
            pendingUsersWithRoles = result;
            recordCount = pendingUsersWithRoles.length;
        }
        if (recordCount > 0) {
            $('#invitationCount').text(recordCount);
            $('#pendingInvitationsMessage').show();

            if (recordCount === 1) {
                $('#pendingMembersCount').replaceWith('<h2 id="membersCount" class="big push_bottom_40">1 Pending ' +
                    'Invitation</h2>');
            } else {
                $('#pendingMembersCount').replaceWith('<h2 id="membersCount" class="big ' +
                    'push_bottom_40">' + recordCount + ' Pending Invitations</h2>');
            }
        }
    }, function(jqXHR, textStatus, errorThrown) {

    });
}
/* This method will create the members list table */
 function createTable(usersWithRolesArray){
	 appOwners = [];
	 $('.cleanable').remove();
	 var $userListContainer = $('#userListContainer');
	 var chkDisableStr = "";
     if(!permittedToInvite){
     	chkDisableStr = "style = 'display:none'";
     }
     /*getting the total number of pages using max users in a page
     checking if the number of members are equal to the max members in a page,else add a new page to the total*/
    totalPagesForMembers = ((usersWithRolesArray.length % maxItemsInPage) == 0) ? (usersWithRolesArray.length / maxItemsInPage) : (usersWithRolesArray.length / maxItemsInPage) + 1;
    totalPagesForMembers = Math.floor(totalPagesForMembers);
    if (totalPagesForMembers > 1) {
        $('.pagefooter').bootpag({
            total: totalPagesForMembers,
            page: pageNumberForMembers
        }).show();
	}else{
		$('.pagefooter').hide();
	}
	//looping uptil the max number of users in a page is added
	for (var i = ((pageNumberForMembers - 1) * maxItemsInPage); i < usersWithRolesArray.length && i < (pageNumberForMembers * maxItemsInPage); i++) {
		 var userRoles = usersWithRolesArray[i];
         var  checkBoxString="";
         if(userRoles.roles.indexOf('admin')<0){
             checkBoxString='<input id="ck_'+i+'" type="checkbox" name="action_check" class="action_check" data-roles="'+userRoles.roles+'" data-user="'+userRoles.userName+'"' + chkDisableStr + ' />';
         }else{
             checkBoxString='';
         }

         var $userListContainerRow = $('<li class="list_row_item cleanable" data-email="'+userRoles.email+'" data-name="'+userRoles.userDisplayName+'">'+
                     '<ul class="list_row" id="'+userRoles.userName+'">'+
                         '<li class="list_col first_list_col item_select">'+
                             '<div class="list_col_content">'+
                                 checkBoxString+
                             '</div>'+
                         '</li>'+
                         '<li onclick="selectCheckBox('+i+')" class="list_col team_member">'+
                             '<div class="list_col_content">'+
                                 '<div class="image_list">'+
                                     '<dl>'+
                                         '<dt>'+userRoles.displayName+'</dt>'+
                                         '<dd class="img"><span class="icon-user"></span></dd>'+
                                         '<dd>'+userRoles.email+'</dd>'+
                                    '</dl>'+
                                 '</div>'+
                            '</div>'+
                         '</li>'+
                         '<li onclick="selectCheckBox('+i+')" class="list_col  team_role">'+
                             '<div class="list_col_content">'+userRoles.displayRoles.toString()+'</div>'+
                        '</li>'+
                         '<li onclick="selectCheckBox('+i+')" class="list_col team_last_login">'+
                             '<div class="list_col_content">'+
                                 // Todo - post 1.0 '2013.05.24 6:19 p.m.'+
                             '</div>'+
                         '</li>'+
                         '<li onclick="selectCheckBox('+i+')" class="list_col team_controller">'+
                             '<div class="list_col_heading">&nbsp;</div>'+
                              '<div class="list_col_content">&nbsp;</div>'+
                         '</li>'+
                     '</ul>'+
                '</li>');

                if(userRoles.roles.indexOf("appowner")!=-1){
                     $('.action_check',$userListContainerRow).attr('data-deletable','false');
                    appOwners.push(userRoles.userName);
                 }
          $userListContainer.append($userListContainerRow);
          enableDisableEditDeleteButtons(false);
          selectedCount=0;
     }
     $('#userListContainer .action_check').click(function(){
             manageRoleCheckList();
         }
     );
     $('.action_check').click(function(){
	        enableButton(this.checked);
     });
}

/*This method will create the pending invitations table */
function createPendingUserTable(pendingUsersWithRolesArray) {
    $('.cleanableInvitation').remove();
    //track the member count in organization
    var memberCount = 0;
    if (usersWithRoles != undefined) {
        memberCount = usersWithRoles.length;
    }
    //var maxInvitationsInPage = maxItemsInPage - memberCount;
    var $pendingUserListContainer = $('#pendingUserListContainer');
    /*getting the total number of pages using max users in a page and checking if the number of members are equal to the max members in a page,else add a new page to the total*/
    totalPagesForInvitations = ((pendingUsersWithRolesArray.length % maxItemsInPage) == 0) ? (pendingUsersWithRolesArray.length / maxItemsInPage) : (pendingUsersWithRolesArray.length / maxItemsInPage) + 1;
    totalPagesForInvitations = Math.floor(totalPagesForInvitations);
    if (totalPagesForInvitations > 1) {
        $('.pageFooterInvitations').bootpag({
            total: totalPagesForInvitations,
            page: pageNumberForInvitations
        }).show();
    } else {
        $('.pageFooterInvitations').hide();
    }

    //looping until the max number of users in a page is added
    for (var i = ((pageNumberForInvitations - 1) * maxItemsInPage); i < pendingUsersWithRolesArray.length && i < (pageNumberForInvitations * maxItemsInPage); i++) {
        var pendingUserRoles = pendingUsersWithRolesArray[i];
        var checkBoxString = '<input id="ick_' + i + '" type="checkbox" name="action_check_invitation" ' +
            'class="action_check_invitation" ' +
            'data-roles="' + pendingUserRoles.roles + '" data-user="' + pendingUserRoles.email + '" />';
        //Show pending invitations
        var $pendingUserListContainerRow = $('<li class="list_row_item cleanableInvitation" data-email="' + pendingUserRoles.email + '" ' +
            'data-name="' + pendingUserRoles.email + '">' +
            '<ul class="list_row" id="' + pendingUserRoles.email + '">' +
            '<li class="list_col first_list_col item_select">' +
            '<div class="list_col_content">' +
            checkBoxString +
            '</div>' +
            '</li>' +
            '<li onclick="selectCheckBoxForInvitations(' + i + ')" class="list_col team_member">' +
            '<div class="list_col_content">' +
            '<div class="image_list">' +
            '<dl>' +
            '<dt>' + pendingUserRoles.email + '</dt>' +
            '<dd class="img"><span class="icon-user"></span></dd>' +
            '<dd>' + pendingUserRoles.email + '</dd>' +
            '</dl>' +
            '</div>' +
            '</div>' +
            '</li>' +
            '<li onclick="selectCheckBoxForInvitations(' + i + ')" class="list_col  team_role">' +
            '<div class="list_col_content">' + pendingUserRoles.roles.toString() + '</div>' +
            '</li>' +
            '<li onclick="selectCheckBoxForInvitations(' + i + ')" class="list_col team_last_login">' +
            '<div class="list_col_content">' +
            // Todo - post 1.0 '2013.05.24 6:19 p.m.'+
            '</div>' +
            '</li>' +
            '<li onclick="selectCheckBoxForInvitations(' + i + ')" class="list_col team_controller">' +
            '<div class="list_col_heading">&nbsp;</div>' +
            '<div class="list_col_content">&nbsp;</div>' +
            '</li>' +
            '</ul>' +
            '</li>');

        $pendingUserListContainer.append($pendingUserListContainerRow);
        enableDisableEditDeleteButtonsForInvitations(false);
    }
    selectedInvitationCount = 0;
    $('#pendingInvitations').show();
    $('#pendingInvitationsMessage').hide();
    if (totalPagesForInvitations > 1) {
        $('.pageFooterInvitations').bootpag({
            total: totalPagesForInvitations
        }).on("page", function(event, num) {
            pageNumberForInvitations = num;
            createPendingUserTable(pendingUsersWithRoles);
        });
    } else {
        $('.pageFooterInvitations').hide();
    }
    $('#pendingUserListContainer .action_check_invitation').click(function() {
        manageRoleCheckListForInvitations();
    });
    $('.action_check_invitation').click(function() {
        enableButtonForInvitations(this.checked);
    });
}

var allRoles = [];
var allRolesForInvitations = [];

var getRoleByName = function(roleName){
    var roleObj;

    for(var i=0;i < allRoles.length;i++){
        if(allRoles[i].role_name == roleName){
            roleObj = allRoles[i];
        }
    }
    return roleObj;

};

var getRoleByNameForInvitations = function(roleName) {
    var roleObj;
    for (var i = 0; i < allRolesForInvitations.length; i++) {
        if (allRolesForInvitations[i].role_name == roleName) {
            roleObj = allRolesForInvitations[i];
        }
    }
    return roleObj;

};

var manageRoleCheckList = function(){
    allRoles = [];

    $('#jsroleAssignPopupForm label').each(function(){
        var trole=$(this).attr('data-role');
        if(trole!=undefined){
            allRoles.push({dom_obj:this, role_name:trole,users:[] });
        }

    });
    //allRoles.push({dom_obj:{}, role_name:'appowner',users:[] });

    //Push users to specific roles
    var numberOfUsersChecked = 0;
    $('#userListContainer .action_check').each(function(){
        if($(this).is(':checked')){
            numberOfUsersChecked++;
            var userName = $(this).attr('data-user').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
            var tmrole=$(this).attr('data-roles');
            if(tmrole!=undefined&&tmrole.length>0){
                var allRolesForUser = tmrole.split('\n');
                for(var i=0;i< allRolesForUser.length;i++){
                    var role = allRolesForUser[i].replace(/^\s\s*/, '').replace(/\s\s*$/, '');
                    getRoleByName(role).users.push(userName);
                }
            }
        }

    });
    //Now use the allRows array to show the role checkboxes..
    if(numberOfUsersChecked > 0 ){
        for(var i=0;i < allRoles.length;i++){
            if(allRoles[i].users.length  == numberOfUsersChecked){ //So every user has this role
                $('span',allRoles[i].dom_obj).replaceWith('<span class="checkbox-checked"></span>');
            } else if (allRoles[i].users.length  == 0){
                $('span',allRoles[i].dom_obj).replaceWith('<span class="checkbox-unchecked"></span>');
            } else if (allRoles[i].users.length  != 0 && allRoles[i].users.length < numberOfUsersChecked ){
                $('span',allRoles[i].dom_obj).replaceWith('<span class="checkbox-half"></span>');
            }
        }
     }else{
        for(var i=0;i < allRoles.length;i++){
                $('span',allRoles[i].dom_obj).replaceWith('<span class="checkbox-unchecked"></span>');
        }
     }
};

var manageRoleCheckListForInvitations = function() {
    allRolesForInvitations = [];

    $('#jsinvitationPopupForm label').each(function() {
        var trole = $(this).attr('data-role');
        if (trole != undefined) {
            allRolesForInvitations.push({
                dom_obj: this,
                role_name: trole,
                users: []
            });
        }
    });
    //Push users to specific roles
    var numberOfInvitationsChecked = 0;
    $('#pendingUserListContainer .action_check_invitation').each(function() {
        if ($(this).is(':checked')) {
            numberOfInvitationsChecked++;
            var userName = $(this).attr('data-user').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
            var tmrole = $(this).attr('data-roles');
            if (tmrole != undefined && tmrole.length > 0) {
                var allRolesForUser = tmrole.split(',');
                for (var i = 0; i < allRolesForUser.length; i++) {
                    var role = allRolesForUser[i].replace(/^\s\s*/, '').replace(/\s\s*$/, '');
                    var Role = getRoleByNameForInvitations(role);
                    Role.users.push(userName);
                }
            }
        }

    });
    //Now use the allRows array to show the role checkboxes..
    if (numberOfInvitationsChecked > 0) {
        for (var i = 0; i < allRolesForInvitations.length; i++) {
            if (allRolesForInvitations[i].users.length == numberOfInvitationsChecked) { //So every user has this role
                $('span', allRolesForInvitations[i].dom_obj).replaceWith('<span class="checkbox-checked"></span>');
            } else if (allRolesForInvitations[i].users.length == 0) {
                $('span', allRolesForInvitations[i].dom_obj).replaceWith('<span class="checkbox-unchecked"></span>');
            } else if (allRolesForInvitations[i].users.length != 0 && allRolesForInvitations[i].users.length < numberOfInvitationsChecked) {
                $('span', allRolesForInvitations[i].dom_obj).replaceWith('<span class="checkbox-half"></span>');
            }
        }
    } else {
        for (var i = 0; i < allRolesForInvitations.length; i++) {
            $('span', allRolesForInvitations[i].dom_obj).replaceWith('<span class="checkbox-unchecked"></span>');
        }
    }
};

    var  finalUsers=[];//globally declared
    var finalInvitations = [];
$(document).ready(function(){

    // hide pending invitations related details
    $('#pendingInvitationsMessage').hide();
    $('#pendingInvitations').hide();

    initializeUserActivity("Members Page");
    if(isInvitationSent) {
        jagg.message({type:'success',content:'You have successfully sent the member invitations.',type:'success',cbk:function(){
                        window.location.href = "../pages/user.jag";
                    }});
    }
    updateTable();
    updatePopupUserRoles();
    updatePopupUserRolesForInvitations();
	if(totalPagesForMembers >1){
		$('.pagefooter').bootpag({
			total: totalPagesForMembers
		    }).on("page", function(event, num){
			    pageNumberForMembers=num;
			    createTable(usersWithRoles);	
		});
	}else{
		$('.pagefooter').hide();
	}
	
    if(!permittedToInvite){
       $('#editDelDiv').hide();
       $('#btnAddMembers').hide();
       $('#select_all_check').parent().hide();
    }
    $('#jsroleAssignPopup').each(function() {
	$(this).qtip({
		content: {
			text: $(this).next()
		},
		style: {
				classes: 'popover_box short_box',
				widget: false,
				def: false,
				tip: false
			},
		hide: {
			fixed: true,
			event: null,
			effect: function(offset) {
				$(this).slideUp(200);
			}
		},
		show:
		{
			event: 'click',
			effect: function(offset) {
                if(selectedCount!==0){

				$(this).slideDown(200);
                }
			}
		},
		events: {
					show: function(event, api) {
						 api.elements.target.addClass('active');
                        var $el = $(api.elements.target[0]);
                        $el.qtip('option', 'position.my', ($el.data('popover-my-position') == undefined) ? 'top right' : $el.data('popover-my-position'));
                        $el.qtip('option', 'position.at', ($el.data('popover-target-position') == undefined) ? 'bottom right' : $el.data('popover-target-position'));
                        			    $('.popover_content',$(this)).removeClass("hide");

                        manageRoleCheckList();


					},
					hide: function(event, api) {
						 api.elements.target.removeClass('active');
					}
				}
	});
}).bind('click', function(event){ event.preventDefault(); return false; });
    $('#jsinvitationroleAssignPopup').each(function() {
        $(this).qtip({
            content: {
                text: $(this).next()
            },
            style: {
                classes: 'popover_box short_box',
                widget: false,
                def: false,
                tip: false
            },
            hide: {
                fixed: true,
                event: null,
                effect: function(offset) {
                    $(this).slideUp(200);
                }
            },
            show: {
                event: 'click',
                effect: function(offset) {
                    if (selectedInvitationCount !== 0) {
                        $(this).slideDown(200);
                    }
                }
            },
            events: {
                show: function(event, api) {
                    api.elements.target.addClass('active');
                    var $el = $(api.elements.target[1]);
                    $el.qtip('option', 'position.my', ($el.data('popover-my-position') == undefined) ? 'top right' : $el.data('popover-my-position'));
                    $el.qtip('option', 'position.at', ($el.data('popover-target-position') == undefined) ? 'bottom right' : $el.data('popover-target-position'));
                    $('.popover_content', $(this)).removeClass("hide");

                    manageRoleCheckListForInvitations();


                },
                hide: function(event, api) {
                    api.elements.target.removeClass('active');
                }
            }
        });
    }).bind('click', function(event) {
        event.preventDefault();
        return false;
    });

$('.text-box-overrider').click(function(){
    var $span = $('span',this);
    var role = $(this).attr('data-role');
    checkedUsers = [];
    if(allRoles.length > 0 ){
        $('#userListContainer .action_check').each(function(){
                if($(this).is(':checked')){
                    checkedUsers.push($(this).attr('data-user'));
                }
            }
        );
        if($span.hasClass('checkbox-checked')){
            $('span',this).replaceWith('<span class="checkbox-unchecked"></span>');
            getRoleByName(role).users = [];
        }else if($span.hasClass('checkbox-unchecked')  ){
            if(getRoleByName(role).halfUsers != null && getRoleByName(role).halfUsers != undefined){
                $('span',this).replaceWith('<span class="checkbox-half"></span>');
                getRoleByName(role).users = getRoleByName(role).halfUsers;
            }else{
                $('span',this).replaceWith('<span class="checkbox-checked"></span>');
                getRoleByName(role).users = checkedUsers;
            }
        }else if($span.hasClass('checkbox-half')){
            $('span',this).replaceWith('<span class="checkbox-checked"></span>');
               getRoleByName(role).halfUsers =checkedUsers;
        }

    } else{
        if($span.hasClass('checkbox-checked')){
            $('span',this).replaceWith('<span class="checkbox-unchecked"></span>');
        }else if($span.hasClass('checkbox-unchecked')){
            $('span',this).replaceWith('<span class="checkbox-half"></span>');
        }else if($span.hasClass('checkbox-half')){
            $('span',this).replaceWith('<span class="checkbox-checked"></span>');
        }
    }
});

$('.text-box-overrider-invitations').click(function() {
    var $span = $('span', this);
    var role = $(this).attr('data-role');
    checkedInvitations = [];
    if (allRolesForInvitations.length > 0) {
        $('#pendingUserListContainer .action_check_invitation').each(function() {
            if ($(this).is(':checked')) {
                checkedInvitations.push($(this).attr('data-user'));
            }
        });
        if ($span.hasClass('checkbox-checked')) {
            $('span', this).replaceWith('<span class="checkbox-unchecked"></span>');
            getRoleByNameForInvitations(role).users = [];
        } else if ($span.hasClass('checkbox-unchecked')) {
            if (getRoleByNameForInvitations(role).halfUsers != null && getRoleByNameForInvitations(role).halfUsers != undefined) {
                $('span', this).replaceWith('<span class="checkbox-half"></span>');
                getRoleByNameForInvitations(role).halfusers = getRoleByName(role).halfUsers;
            } else {
                $('span', this).replaceWith('<span class="checkbox-checked"></span>');
                getRoleByNameForInvitations(role).users = checkedInvitations;
            }
        } else if ($span.hasClass('checkbox-half')) {
            $('span', this).replaceWith('<span class="checkbox-checked"></span>');
            getRoleByNameForInvitations(role).users = checkedInvitations;
        }

    } else {
        if ($span.hasClass('checkbox-checked')) {
            $('span', this).replaceWith('<span class="checkbox-unchecked"></span>');
        } else if ($span.hasClass('checkbox-unchecked')) {
            $('span', this).replaceWith('<span class="checkbox-half"></span>');
        } else if ($span.hasClass('checkbox-half')) {
            $('span', this).replaceWith('<span class="checkbox-checked"></span>');
        }
    }
});

$('#select_all_check').click(function(){

    $('#userListContainer .action_check').each(function(){
            if($('#select_all_check').is(':checked')){
                $(this).attr('checked','checked');

                selectedCount++;
                enableDisableEditDeleteButtons(true);
              
            }else{
                $(this).removeAttr('checked');
                selectedCount=0;
                enableDisableEditDeleteButtons(false);
            }
        }
    );

    manageRoleCheckList();
}).removeAttr('checked');
enableDisableEditDeleteButtons(false);//disabling edit and delete button on load

$('#select_all_invitations_check').click(function() {
    $('#pendingUserListContainer .action_check_invitation').each(function() {
        if ($('#select_all_invitations_check').is(':checked')) {
            $(this).attr('checked', 'checked');
            selectedInvitationCount++;
            enableDisableEditDeleteButtonsForInvitations(true);
        } else {
            $(this).removeAttr('checked');
            selectedInvitationCount = 0;
            enableDisableEditDeleteButtonsForInvitations(false);
        }
    });
    manageRoleCheckListForInvitations();
}).removeAttr('checked');
enableDisableEditDeleteButtonsForInvitations(false); //disabling edit and delete button on load

$('#saveUserRoles').click(function(){
    // iterate through allRoles and save the users with there roles
    finalUsers=[];
    covertAllRoles();
    detectAllUserRoleChanges();
    updateUsers();
    $(this).parents('.qtip').qtip("hide");
});

$('#updateInvitations').click(function() {
    // iterate through allRoles and save the users with there roles
    finalInvitations = [];
    covertAllRolesForInvitation();
    detectAllUserRoleChangesForInvitations();
    updateInvitations();
    $(this).parents('.qtip').qtip("hide");
});

$('#removeUsers').click(function(){
    checkedUsers = [] ;
	jagg.removeMessage('teampageId');
    $('#userListContainer .action_check').each(function(){
                if($(this).is(':checked')){
                    checkedUsers.push($(this).attr('data-user'));
                }
            }
    );

    var isOwner = false;

    for(var i in appOwners){
        if(checkedUsers.indexOf(appOwners[i]) != -1){
            isOwner = true;
            break;
        }
    }


    if(!isOwner){
        jagg.popMessage({type:'confirm',title:'Delete Users',content:'Are you sure you want to delete members?',
                                    okCallback:function(){ doDeleteUser(checkedUsers);},cancelCallback:function(){}});
    }else{
       jagg.message({
                    content: "Users with 'Application Owner' role cannot be deleted. Please remove them from the selected users list.",
                    type: 'warning', id:'teampageId'
                    });
    }




});

$('#revokeInvitation').click(function() {
    checkedInvitations = [];
    jagg.removeMessage('teampageId');
    $('#pendingUserListContainer .action_check_invitation').each(function() {
        if ($(this).is(':checked')) {
            checkedInvitations.push($(this).attr('data-user'));
        }
    });
    jagg.popMessage({
        type: 'confirm',
        title: 'Revoke Invitations',
        content: 'Are you sure you want to revoke invitations?',
        okCallback: function() {
            doRevokeInvitation(checkedInvitations);
        },
        cancelCallback: function() {}
    });
});

    function covertAllRoles(){
        //convert all roles array in to processable array in update user method
        for(var cUser in checkedUsers){
            var user={};
            user.name=checkedUsers[cUser];
            user.roles=[];
            finalUsers.push(user);
        }
        for (var index in allRoles){

            var tempRole=allRoles[index];
            var tmpRoleName=tempRole.role_name;
            var tmpUsers=tempRole.users; //array
            var halfUsers=tempRole.halfUsers;
            var userFromFinalUsers=[];
            for(var userIndex in tmpUsers){
                userFromFinalUsers=getUserfromFinalUsers(tmpUsers[userIndex]);
                if(userFromFinalUsers===null){
                    var user={};
                    var roles=[];
                    user.name=tmpUsers[userIndex];
                    roles.push(tmpRoleName);
                    user.roles=roles;
                    finalUsers.push(user);
                }else{
                    userFromFinalUsers.roles.push(tmpRoleName);
                }
            }

            for(var hUserIndex in halfUsers){
                userFromFinalUsers=getUserfromFinalUsers(halfUsers[hUserIndex]);
                if(userFromFinalUsers===null){
                    var user={};
                    var roles=[];
                    user.name=halfUsers[hUserIndex];
                    roles.push(tmpRoleName);
                    user.roles=roles;
                    finalUsers.push(user);
                }else{
                    userFromFinalUsers.roles.push(tmpRoleName);
                }
            }

        }

    }

    function covertAllRolesForInvitation() {
        //convert all roles array in to processable array in update user method
        for (var cInvitation in checkedInvitations) {
            var invitation = {};
            invitation.email = checkedInvitations[cInvitation];
            invitation.roles = [];
            finalInvitations.push(invitation);
        }
        for (var index in allRolesForInvitations) {

            var tempRole = allRolesForInvitations[index];
            var tmpRoleName = tempRole.role_name;
            var tmpUsers = tempRole.users; //array
            var halfUsers = tempRole.halfUsers;
            var userFromFinalUsers = [];
            for (var userIndex in tmpUsers) {
                userFromFinalUsers = getInvitationfromFinalInvitations(tmpUsers[userIndex]);
                if (userFromFinalUsers === null) {
                    var user = {};
                    var roles = [];
                    user.email = tmpUsers[userIndex];
                    roles.push(tmpRoleName);
                    user.roles = roles;
                    finalInvitations.push(user);
                } else {
                    userFromFinalUsers.roles.push(tmpRoleName);
                }
            }

            for (var hUserIndex in halfUsers) {
                userFromFinalUsers = getInvitationfromFinalInvitations(halfUsers[hUserIndex]);
                if (userFromFinalUsers === null) {
                    var user = {};
                    var roles = [];
                    user.email = halfUsers[hUserIndex];
                    roles.push(tmpRoleName);
                    user.roles = roles;
                    finalInvitations.push(user);
                } else {
                    userFromFinalUsers.roles.push(tmpRoleName);
                }
            }

        }

    }

    function detectAllUserRoleChanges(){
        for(u in finalUsers){
            doDetectChangesNew(finalUsers[u].name);
        }
    }

    function detectAllUserRoleChangesForInvitations() {
        for (u in finalInvitations) {
            doDetectChangesNewInvitation(finalInvitations[u].email);
        }
    }

    function getUserfromFinalUsers(name){
        for(var index in finalUsers){
            if(finalUsers[index].name===name){
                return finalUsers[index];
                break;
            }
        }
        return null;
    }

    function getInvitationfromFinalInvitations(email) {
        for (var index in finalInvitations) {
            if (finalInvitations[index].email === email) {
                return finalInvitations[index];
                break;
            }
        }
        return null;
    }

    function getUserFromUsersWithRoles(name){
        for(var index in usersWithRoles){
            if(usersWithRoles[index].userName===name){
                return usersWithRoles[index];
                break;
            }
        }
        return null;

    }
    function getInvitationFromInvitationsWithRoles(email) {
        for (var index in pendingUsersWithRoles) {
            if (pendingUsersWithRoles[index].email === email) {
                return pendingUsersWithRoles[index];
                break;
            }
        }
        return null;
    }
    function doDeleteUser(checkedUsers){
        var l=checkedUsers.length;
        for(var i in checkedUsers){
           deleteUser(checkedUsers[i],i,l);
        }

    }

    function doRevokeInvitation(checkedInvitations) {
        var l = checkedInvitations.length;
        for (var i in checkedInvitations) {
            revokeInvitation(checkedInvitations[i], i, l);
        }

    }
    function doDetectChangesNew(userName){
        var tmpUser= getUserfromFinalUsers(userName);
        var endingRoles =tmpUser.roles||null;
        var t=getUserFromUsersWithRoles(userName);
        var startingRoles=t.roles.split('\n');
        var trolesToAdd=[];
        var trolesToDelete=[];

        if(endingRoles!=null){
            for(var i in startingRoles){
                if(endingRoles.indexOf(startingRoles[i])===-1){
                    //add to roles to delete
                    trolesToDelete.push(startingRoles[i]);

                }
            }
            for(var j in endingRoles){
                if(startingRoles.indexOf(endingRoles[j])===-1){
                    //ad to rolestoadd
                    trolesToAdd.push(endingRoles[j]);
                }
            }
        }else{
            trolesToDelete=startingRoles;
        }

        tmpUser.rolesToDelete=trolesToDelete;
        tmpUser.rolesToAdd=trolesToAdd;

    }
    function doDetectChangesNewInvitation(email) {
        var tmpUser = getInvitationfromFinalInvitations(email);
        var endingRoles = tmpUser.roles || null;
        var t = getInvitationFromInvitationsWithRoles(email);
        var startingRoles = t.roles;
        var trolesToAdd = [];
        var trolesToDelete = [];

        if (endingRoles != null) {
            for (var i in startingRoles) {
                if (endingRoles.indexOf(startingRoles[i]) === -1) {
                    //add to roles to delete
                    trolesToDelete.push(startingRoles[i]);

                }
            }
            for (var j in endingRoles) {
                if (startingRoles.indexOf(endingRoles[j]) === -1) {
                    //ad to rolestoadd
                    trolesToAdd.push(endingRoles[j]);
                }
            }
        } else {
            trolesToDelete = startingRoles;
        }

        tmpUser.rolesToDelete = trolesToDelete;
        tmpUser.rolesToAdd = trolesToAdd;

    }
    function updateUsers(){

        for(var u in finalUsers){
            var user=finalUsers[u];
            doupdateUser(user.name,user.rolesToDelete,user.rolesToAdd,u);
        }

    }
    function updateInvitations() {
        for (var u in finalInvitations) {
            var user = finalInvitations[u];
            doupdateInvitation(user.email, user.rolesToDelete, user.rolesToAdd, u);
        }

    }


    function doupdateUser(username,rolesToDel,rolestoAd,count){
        jagg.post("../blocks/tenant/users/add/ajax/add.jag", {
                    action:"updateUserRoles",
                    userName:username,
                    rolesToDelete:rolesToDel.toString(),
                    rolesToAdd:rolestoAd.toString()
                },

                function (result) {

                    if(result != undefined || result==true){

                        // TODO implement addApplicationToApp(applicationKey,
                        // applicationName, applicationDescription);
                        var x= (finalUsers.length-1)
                        if(count==x){
                            window.setTimeout(function () {
                                updateTable();

                            }, 300);

                        }
                        enableDisableEditDeleteButtons(false);
                        $('#select_all_check').prop('checked', false);
                        return result;
                    }else if(result==false){

                        return result;
                    }
                },
                function (jqXHR, textStatus, errorThrown) {
                    // showNotification('notifier','message','Your invitation has not been sent to '+newUserNames,'error');
                });

    }

    function doupdateInvitation(email, rolesToDel, rolestoAd, count) {
        jagg.post("../blocks/tenant/users/add/ajax/add.jag", {
                action: "updateUserRolesInInvitations",
                email: email,
                rolesToDelete: rolesToDel.toString(),
                rolesToAdd: rolestoAd.toString()
            },

            function(result) {

                if (result != undefined || result == true) {

                    // TODO implement addApplicationToApp(applicationKey,
                    // applicationName, applicationDescription);
                    var x = (finalInvitations.length - 1)
                    if (count == x) {
                        window.setTimeout(function() {
                            updateTable();

                        }, 300);

                    }
                    enableDisableEditDeleteButtonsForInvitations(false);
                    $('#select_all_invitations_check').prop('checked', false);
                    return result;
                } else if (result == false) {

                    return result;
                }
            },
            function(jqXHR, textStatus, errorThrown) {
                // showNotification('notifier','message','Your invitation has not been sent to '+newUserNames,'error');
            });
        console.log("Update Invitation for " + username);
    }
    $('#search_members').keyup(function(event){
        doSearch($(this).val());
    });
    function doSearch(searchtext){
        var searchUsers = [];
        for(var index in usersWithRoles){
            var userRoles=usersWithRoles[index];
            var userEmail=(userRoles.email).toLowerCase();
            var userName=(userRoles.displayName).toLowerCase();
            var pattern=new RegExp(searchtext.toLowerCase());
            if((pattern.test(userEmail))||(pattern.test(userName))){
            	searchUsers.push(userRoles);
	         }
        }
      createTable(searchUsers);
    }
    

    /*delete a given user*/
    function deleteUser(username,count,length){

        jagg.post("../blocks/tenant/users/add/ajax/add.jag", {
                    action:"deleteUserFromTenant",
                    userName:username
                },
                function (result) {
                    if(count==(length-1)){
                        window.setTimeout(function () {
                        	pageNumberForMembers=1;
                            updateTable();
                        }, 300);
                    }
                },
                function (jqXHR, textStatus, errorThrown) {
                    //jagg.message({content:'Error Occured during the removal process of '+userToDelete:'error' });
                });


    }

    /*revoke a given invitation*/
    function revokeInvitation(username, count, length) {

        /*jagg.post("../blocks/tenant/users/add/ajax/add.jag", {
                    action:"deleteUserFromTenant",
                    userName:username
                },
                function (result) {
                    if(count==(length-1)){
                        window.setTimeout(function () {
                        	pageNumberForMembers=1;
                            updateTable();
                        }, 300);
                    }
                },
                function (jqXHR, textStatus, errorThrown) {
                    //jagg.message({content:'Error Occured during the removal process of '+userToDelete:'error' });
                });
        */
        console.log("Revoke Invitation for " + username);

    }
    

});


</script>

<div class="container content-starter">
    <div class="row">
        <div class="col-lg-12">
            <h1>Members</h1>
            <div class="helper_text" id="helper_text">
			    <p>
			        Invite new members or modify existing ones
			    </p>
		    </div>
        </div>
    </div>
</div>
<% jagg.includeBlock("page/messages", null); %>
<div class="container content-section-wrapper">
<div class="row">
    <div class="col-lg-12 content-section">

    <article class="main">
        
        <header class="separator">
            <div class="content">
                <div class="left">
                    <a id="btnAddMembers" href="<%=jagg.getAbsoluteUrl("/site/pages/user-import.jag")%>" class='btn btn-primary'>Invite Members</a>
                </div>
                <ul class="screen_option right">
                    <li class="screen_option_item">
                    <form class="left fw_250 form-container search_form" onSubmit="return false;">
                            <div class="input_row">
                                <label for="search_members" class="hide" >Search Members</label>
                                <input id="search_members" type="text" class="fw_250" placeholder="Search Members" name="search_members" value="" style="margin:0"  /><span class="icon-search"></span>
                            </div>
                    </form>
                    </li>
                </ul>
             </div>
        </header>
        <section class="separator">
            <!--This message is shown when pending invitations are available -->
            <div class="message" id="pendingInvitationsMessage">
               <div id="push"></div>
               <div class="alert alert-info alert-pending" role="alert">
                  <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                  <span class="alert-content">
                  <i class="fa fa-check-circle-o"></i> <strong> <span id="invitationCount"></span>
                  invitations are pending..
                  .</strong> <a class="click_to_expand" href="#" onclick="createPendingUserTable
                     (pendingUsersWithRoles);">Click here to view</a>
                  </span>
               </div>
            </div>
        </section>

        <section class="separator">
            <div class="content">
                <h2 id="membersCount" class="big push_bottom_40"> Members in Team</h2>
                <ul class="list_table highlight" id="userListContainer">
                    <li class="list_row_item first_list_row_item">
                            <ul class="list_row first_list_row ">
                                <li class="list_col first_list_col item_select cursover_remover">
                                    <h2 class="list_col_heading"><input type="checkbox" name="select_all" id="select_all_check" /></h2>
                                </li>
                                <li class="list_col team_member cursover_remover">
                                    <h2 class="list_col_heading" style="padding-left:11px;">Member</h2>
                                </li>
                                <li class="list_col  team_role cursover_remover">
                                    <h2 class="list_col_heading" style="padding-left:11px;">Role</h2>
                                </li>
                                <li class="list_col team_last_login cursover_remover">
                                    <h2 class="list_col_heading">
                                        &nbsp;
                                    <!-- Todo - post 1.0 -->
                                    <!--Last Login-->
                                    </h2>


                                </li>
                                <li class="list_col team_controller cursover_remover">

                                    <div class="list_col_heading" id="editDelDiv"><!-- style="width:102px"-->
                                        <ul class="inline_list item_right">

                                            <!--li class="inline_item"><a id="assignRoles" href="<%=jagg.getAbsoluteUrl("/site/pages/user-invite.jag")%>" class="icon_link" title="Assign new roles"><span class="icon-plus" title="Assign New Roles"></span></a></li-->

                                            <li class="inline_item"><a href="#" class="icon_link" id="jsroleAssignPopup" title="Edit user roles" data-popover-my-position="top right" popover-target-position="bottom right" data-hasqtip="0" aria-describedby="qtip-0" ><span class="fa fa-pencil" title="Edit user roles"></span></a>
                                            <div class="popover_content hide">
                                                    <form class="form-container" id="jsroleAssignPopupForm" />
                                            </div>
                                            </li>
                                            <li class="inline_item"><a id="removeUsers" href="#" class="icon_link" title="Remove User"><span class="fa fa-trash-o" title="Remove User"></span></a></li>

                                        </ul>
                                     </div>
                                     <div class="list_col_content">

                                    </div>
                                </li>
                              </ul>
                       </li>
                </ul>
            </div>
        </section>

        <div class="clearfix"></div>
        <div class="pagefooter" style="width:30%; margin:0 auto"></div>

        <section class="separator">
            <div class="content" id="pendingInvitations">
               <br><br><br>
               <h2 id="pendingMembersCount" class="big push_bottom_20"> Pending User Invitations</h2>
               <ul class="list_table highlight" id="pendingUserListContainer">
                  <li class="list_row_item first_list_row_item">
                     <ul class="list_row first_list_row ">
                        <li class="list_col first_list_col item_select cursover_remover">
                           <h2 class="list_col_heading"><input type="checkbox" name="select_all" id="select_all_invitations_check" /></h2>
                        </li>
                        <li class="list_col team_member cursover_remover">
                           <h2 class="list_col_heading" style="padding-left:11px;">Email</h2>
                        </li>
                        <li class="list_col  team_role cursover_remover">
                           <h2 class="list_col_heading" style="padding-left:11px;">Role</h2>
                        </li>
                        <li class="list_col team_last_login cursover_remover">
                            <h2 class="list_col_heading">
                                &nbsp;
                            </h2>
                        </li>
                        <li class="list_col team_controller cursover_remover">
                           <div class="list_col_heading" id="editDelDivInvitation">
                              <ul class="inline_list item_right">
                                 <li class="inline_item">
                                    <a href="#" class="icon_link" id="jsinvitationroleAssignPopup" title="Update Invitation" data-popover-my-position="top right" popover-target-position="bottom
                                    right" data-hasqtip="1" aria-describedby="qtip-1" ><span class="fa fa-pencil" title="Update Invitation"></span></a>
                                    <div class="popover_content hide" id="jsinvitationPopupFormDiv">
                                       <form class="form-container" id="jsinvitationPopupForm" />
                                    </div>
                                 </li>
                                 <li class="inline_item"><a id="revokeInvitation" href="#" class="icon_link" title="Revoke Invitation"><span class="fa fa-trash-o" title="Revoke Invitation"></span></a></li>
                              </ul>
                           </div>
                           <div class="list_col_content">
                           </div>
                        </li>
                     </ul>
                  </li>
               </ul>
            </div>
        </section>

    <div class="clearfix"></div>
    <div class="pageFooterInvitations" style="width:30%; margin:0 auto"></div>
    </article>
    </div>
</div>
</div>


<input type="hidden" id="userName" value='<%= session.get("LOGGED_IN_USER") %>' />
<% }
}); %>
