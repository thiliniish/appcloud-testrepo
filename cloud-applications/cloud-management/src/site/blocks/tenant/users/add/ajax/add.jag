<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
var log = new Log("blocks.tenant.users.add.ajax.add.jag");
(function () {

    var action = request.getParameter("action");
    if (action != null && action != "importInvitedUser") {
        var loginStatus = jagg.isUserLoggedIn();
        if (loginStatus.error) {
            response.status = 401;
            print(loginStatus);
            return;
        }
    }

    var site = require("/site/conf/site.json");
    var mod = jagg.module("tenant");

    if (action == "addRolesToUserInTheTenantDomain") {

        var Username = request.getParameter("Username");
        var UserRole = request.getParameter("UserRole");

        try {
            var result = mod.addUserRoles(Username, UserRole);

            if (result != null) {
                print(result);
            } else {
                throw "Error while adding user as " + UserRole;
            }
        } catch (e) {
            throw "Error while adding user as " + UserRole;
        }

    } else if (action == "updateUserRoles") {
        var userName = request.getParameter("userName");
        var newRoles = request.getParameter("rolesToAdd");
        var removeRoles = request.getParameter("rolesToDelete");
        var responseObj = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            try {
                var result = mod.updateUserRoles(userName, newRoles, removeRoles);
                if (result != null) {
                    responseObj.error = false;
                    responseObj.message = result;
                    print(stringify(responseObj));
                }
            } catch (e) {
                throw "Error while updating user " + userName;
            }
        } else {
            responseObj.error = true;
            responseObj.message = "You don't have permission to update users";
            print(stringify(responseObj));
        }

    } else if (action == "deleteUserFromTenant") {
        var loggedInUser = jagg.getUser();
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
        var isTenantAdmin = jagg.module("user/management").hasUserRole(loggedInUser, cloudConfig.adminRole);
        var userName = request.getParameter("userName");
        var responseObj = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain) && isTenantAdmin) {
            try {
                var result = mod.deleteUserFromTenant(userName);
                if (result.error != null && result.error && result.statusCode != null){
                    response.status = result.statusCode;
                    print (result);
                }
                else if (result != null && result) {
                    response.status = 200;
                    print({
                        error: false,
                        message: "Successfully deleted the user " + userName + " from the tenant " + tenantDomain,
                        status: 200
                    });
                } else {
                    response.status = 500;
                    print({
                        error: false,
                        message: "An error occurred while deleting the user " + userName + " from the tenant " + tenantDomain,
                        status: 500
                    });
                }
            } catch (e) {
                throw "Error while removing user " + userName;
            }
        } else {
            response.status = 401;
            responseObj.status = 401;
            responseObj.error = true;
            responseObj.message = "You don't have the required permission to delete users";
            print(stringify(responseObj));
        }

    } else if (action == "sendUserInvite") {
        var users = request.getParameter("users");
        var roles = request.getParameter("roles");
        var responseObj = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            var userArray = users.split(",");
            for (var user in userArray) {
                userArray[user] = userArray[user].replace(/^\s+|\s+$/g, '');
            }
            try {
                var result = mod.sendUserInvite(userArray, roles);
                if (result != null) {
                    responseObj.error = false;
                    responseObj.message = result;
                    print(stringify(responseObj));
                }
            } catch (e) {
                throw "Error while Sending invite user " + userName;
            }
        } else {
            responseObj.error = true;
            responseObj.message = "You don't have permission to invite users";
            print(stringify(responseObj));
        }

    } else if (action == "inviteUsers") {
        var userRoleList = parse(request.getParameter("userRoleList"));
        var defaultRoles = parse(request.getParameter("defaultRoles"));
        var message = request.getParameter("message");
        var responseObj = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();

        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {

            for (var i = 0; i < userRoleList.length; i++) {
                userRoleList[i].id = userRoleList[i].id.replace(/^\s+|\s+$/g, '');
            }
            try {
                var result = mod.inviteUsers(userRoleList, defaultRoles, message);
                if (result != null) {
                    responseObj.error = false;
                    responseObj.message = result;
                    print(stringify(responseObj));
                }
                else {
                    log.error("Error while sending user invitations");
                    responseObj.error = true;
                    responseObj.message = "Error while sending user invitations";
                    print(stringify(responseObj));
                }
            } catch (e) {
                log.error("Error while sending user invitations");
                responseObj.error = true;
                responseObj.message = "Error while sending user invitations";
                print(stringify(responseObj));
            }
        } else {
            responseObj.error = true;
            responseObj.message = "You don't have permission to invite users";
            print(stringify(responseObj));
        }

    } else if (action == "resendInvite") {
        var email = request.getParameter("email");
        var responseObj = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            email = email.replace(/^\s+|\s+$/g, '');
            try {
                var result = mod.resendInvite(email);
                if (result != null) {
                    responseObj.error = false;
                    responseObj.message = result;
                    print(stringify(responseObj));
                }
                else {
                    log.error("Error while re-sending invitation to " + email);
                    responseObj.error = true;
                    responseObj.message = "Error while re-sending invitation to " + email;
                    print(stringify(responseObj));
                }
            } catch (e) {
                log.error("Error while re-sending invitation to " + email);
                responseObj.error = true;
                responseObj.message = "Error while re-sending invitation to " + email;
                print(stringify(responseObj));
            }
        } else {
            responseObj.error = true;
            responseObj.message = "You don't have permission to invite users";
            print(stringify(responseObj));
        }

    } else if (action == "sendEmailWithCustomMessage") {
        var toList = parse(request.getParameter("to"));
        var subject = request.getParameter("subject");
        var message = request.getParameter("message");
        var responseObj = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            for (var i = 0; i < toList.length; i++) {
                toList[i] = toList[i].replace(/^\s+|\s+$/g, '');
            }
            try {
                var result = mod.sendEmailWithCustomMessage(toList, subject, message);
                if (result != null) {
                    responseObj.error = false;
                    responseObj.message = result;
                    print(stringify(responseObj));
                }
                else {
                    log.error("Error while sending custom emails");
                    responseObj.error = true;
                    responseObj.message = "Error while sending custom emails";
                    print(stringify(responseObj));
                }
            } catch (e) {
                log.error("Error while sending email to " + email);
                responseObj.error = true;
                responseObj.message = "Error while sending email to " + email;
                print(stringify(responseObj));
            }
        } else {
            responseObj.error = true;
            responseObj.message = "You don't have permission to send custom emails";
            print(stringify(responseObj));
        }

    } else if (action == "importInvitedUser") {
        var confirmationKey = request.getParameter("confirmationKey");
        var password = request.getParameter("adminPassword");
        var firstName = request.getParameter("firstName");
        var lastName = request.getParameter("lastName");
        var result = mod.importInvitedUserAndGetDirectURL(confirmationKey, password, firstName, lastName);
        print(result);

    } else if (action == "addUserToTenant") {
        var username = jagg.getUser();
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
        var isTenantAdmin = jagg.module("user/management").hasUserRole(username, cloudConfig.adminRole);
        if (isTenantAdmin) {
            var userEmail = request.getParameter("userEmail");
            var password = request.getParameter("password");
            var firstName = request.getParameter("firstName");
            var lastName = request.getParameter("lastName");
            var roles = request.getParameter("roles");
            var inputValidationResult = mod.validateInputFields(userEmail, password, firstName, lastName, roles);
            if (inputValidationResult.error) {
                response.status = inputValidationResult.status;
                print(inputValidationResult);
            } else {
                var importUserResponse = mod.importUserToTenant(userEmail, password, firstName, lastName, roles);
                response.status = importUserResponse.status;
                print(importUserResponse);
            }
        } else {
            print({
                      error: true,
                      message: "The user " + username + " is not authorized to perform this task. You need to be a tenant admin to add users",
                      status: 401
                  });
        }
    } else if (action == "changePassword") {
        var newPassword = request.getParameter("newPassword");
        var oldPassword = request.getParameter("oldPassword");
        try {
            var result = mod.changePassword(oldPassword, newPassword);
            if (result != null) {
                print(result);
            }
        } catch (e) {
            throw "Error while changing user passwords for the user";
        }

    } else if (action == "getBlockedSubscriptions") {
        if ((session.get("TENANT_INFO")) != null) {
            var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
            try {
                var result = mod.getBlockedSubscriptions(tenantDomain);
                print(result);
            } catch (e) {
                log.error("Error while getting blocked subscriptions ");
                throw "Error while getting blocked subscriptions";
            }
        }
    } else if (action == "updateUserInvitation") {
        var email = request.getParameter("email");
        var newRoles = request.getParameter("rolesToAdd");
        var removeRoles = request.getParameter("rolesToDelete");
        var tenantDomain = jagg.module("manager").getTenantDomain();
        var responseObj = {};
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            responseObj = mod.updateUserInvitation(email, newRoles, removeRoles);
            if (responseObj != null) {
                print(responseObj);
            }
        } else {
            responseObj.error = true;
            responseObj.message = "You don't have permission to update invitations";
            responseObj.statusCode = 401;
            print(responseObj);
        }
    } else if (action == "revokeInvitation") {
        var responseObj = {};
        var email = request.getParameter("email");
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            responseObj = mod.revokeUserInvitation(email);
            if (responseObj != null) {
                print(responseObj);
            }
        } else {
            responseObj.error = true;
            responseObj.message = "You don't have permission to revoke invitations";
            responseObj.statusCode = 401;
            print(responseObj);
        }
    } else {
        log.error("No Action Specified");
        var responseObj = {};
        responseObj.error = true;
        responseObj.statusCode = 400;
        responseObj.message = "Unexpected error occurred";
        print(responseObj);
    }

}());
%>
