<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
var log = new Log();
(function () {

    var action = request.getParameter("action");
    if (action != null && action != "importInvitedUser") {
        var loginStatus = jagg.isUserLoggedIn();
        if (loginStatus.error) {
            response.status = 401;
            print(loginStatus);
            return;
        }
    }

    var mod, obj, result,
            site = require("/site/conf/site.json");
    mod = jagg.module("tenant");

    if (action == "addRolesToUserInTheTenantDomain") {

        var Username = request.getParameter("Username");
        var UserRole = request.getParameter("UserRole");
        // jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION.USER.INVITE);

        try {
            var result = mod.addUserRoles(Username, UserRole);

            if (result != null) {
                print(result);
            } else {
                throw "Error while adding user as " + UserRole;
            }
        } catch (e) {
            throw "Error while adding user as " + UserRole;
        }
    } else if (action == "updateUserRoles") {
        var userName = request.getParameter("userName");
        var newRoles = request.getParameter("rolesToAdd");
        var removeRoles = request.getParameter("rolesToDelete");
        var customResponse = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            try {
                var result = mod.updateUserRoles(userName, newRoles, removeRoles);
                if (result != null) {
                    customResponse.error = false;
                    customResponse.message = result;
                    print(stringify(customResponse));
                }
            } catch (e) {
                throw "Error while updating user " + userName;
            }
        } else {
            customResponse.error = true;
            customResponse.message = "You don't have permission to update users";
            print(stringify(customResponse));
        }
    } else if (action == "deleteUserFromTenant") {
        var userName = request.getParameter("userName");
        var customResponse = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            try {
                var result = mod.deleteUserFromTenant(userName);
                if (result != null) {
                    customResponse.error = false;
                    customResponse.message = result;
                    print(stringify(customResponse));
                }
            } catch (e) {
                throw "Error while removing user " + userName;
            }
        } else {
            customResponse.error = true;
            customResponse.message = "You don't have permission to delete users";
            print(stringify(customResponse));
        }
    } else if (action == "sendUserInvite") {
        var users = request.getParameter("users");
        var roles = request.getParameter("roles");
        var customResponse = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            var userArray = users.split(",");
            for (var user in userArray) {
                userArray[user] = userArray[user].replace(/^\s+|\s+$/g, '');
            }
            try {
                var result = mod.sendUserInvite(userArray, roles);
                if (result != null) {
                    customResponse.error = false;
                    customResponse.message = result;
                    print(stringify(customResponse));
                }
            } catch (e) {
                throw "Error while Sending invite user " + userName;
            }
        } else {
            customResponse.error = true;
            customResponse.message = "You don't have permission to invite users";
            print(stringify(customResponse));
        }

    } else if (action == "inviteUsers") {

        var userRoleList = parse(request.getParameter("userRoleList"));
        var defaultRoles = parse(request.getParameter("defaultRoles"));
        var message = request.getParameter("message");
        var customResponse = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();

        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {

            for (var i = 0; i < userRoleList.length; i++) {
                userRoleList[i].id = userRoleList[i].id.replace(/^\s+|\s+$/g, '');
            }
            try {
                var result = mod.inviteUsers(userRoleList, defaultRoles, message);
                if (result != null) {
                    customResponse.error = false;
                    customResponse.message = result;
                    print(stringify(customResponse));
                }
                else {
                    log.error("Error while sending user invitations");
                    customResponse.error = true;
                    customResponse.message = "Error while sending user invitations";
                    print(stringify(customResponse));
                }
            } catch (e) {
                log.error("Error while sending user invitations");
                customResponse.error = true;
                customResponse.message = "Error while sending user invitations";
                print(stringify(customResponse));
            }
        } else {
            customResponse.error = true;
            customResponse.message = "You don't have permission to invite users";
            print(stringify(customResponse));
        }

    } else if (action == "resendInvite") {
        var email = request.getParameter("email");
        var customResponse = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            email = email.replace(/^\s+|\s+$/g, '');
            try {
                var result = mod.resendInvite(email);
                if (result != null) {
                    customResponse.error = false;
                    customResponse.message = result;
                    print(stringify(customResponse));
                }
                else {
                    log.error("Error while re-sending invitation to " + email);
                    customResponse.error = true;
                    customResponse.message = "Error while re-sending invitation to " + email;
                    print(stringify(customResponse));
                }
            } catch (e) {
                log.error("Error while re-sending invitation to " + email);
                customResponse.error = true;
                customResponse.message = "Error while re-sending invitation to " + email;
                print(stringify(customResponse));
            }
        } else {
            customResponse.error = true;
            customResponse.message = "You don't have permission to invite users";
            print(stringify(customResponse));
        }
    } else if (action == "sendEmailWithCustomMessage") {
        var toList = parse(request.getParameter("to"));
        var subject = request.getParameter("subject");
        var message = request.getParameter("message");
        var customResponse = {};
        var tenantDomain = jagg.module("manager").getTenantDomain();
        if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
            for (var i = 0; i < toList.length; i++) {
                toList[i] = toList[i].replace(/^\s+|\s+$/g, '');
            }
            try {
                var result = mod.sendEmailWithCustomMessage(toList, subject, message);
                if (result != null) {
                    customResponse.error = false;
                    customResponse.message = result;
                    print(stringify(customResponse));
                }
                else {
                    log.error("Error while sending custom emails");
                    customResponse.error = true;
                    customResponse.message = "Error while sending custom emails";
                    print(stringify(customResponse));
                }
            } catch (e) {
                log.error("Error while sending email to " + email);
                customResponse.error = true;
                customResponse.message = "Error while sending email to " + email;
                print(stringify(customResponse));
            }
        } else {
            customResponse.error = true;
            customResponse.message = "You don't have permission to send custom emails";
            print(stringify(customResponse));
        }

    } else if (action == "importInvitedUser") {
        var confirmationKey = request.getParameter("confirmationKey");
        var password = request.getParameter("adminPassword");
        var firstName = request.getParameter("firstName");
        var lastName = request.getParameter("lastName");
        try {
            var result = mod.importInvitedUser(confirmationKey, password, firstName, lastName);
            if (result != null) {
                var url = jagg.module("util").getInviteeDirectUrl(result);
                print(url);
            }
        } catch (e) {
            log.error("Error while adding users " + e);
            throw "Error while adding users, " + e;
        }

    } else if (action == "changePassword") {
        var newPassword = request.getParameter("newPassword");
        var oldPassword = request.getParameter("oldPassword");
        try {
            var result = mod.changePassword(oldPassword, newPassword);
            if (result != null) {
                print(result);
            }
        } catch (e) {
            throw "Error while changing user passwords for the user";
        }

    } else if (action == "getBlockedSubscriptions") {

        if ((session.get("TENANT_INFO")) != null) {
            var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
            try {
                var result = mod.getBlockedSubscriptions(tenantDomain);
                print(result);
            } catch (e) {
                log.error("Error while getting blocked subscriptions ");
                throw "Error while getting blocked subscriptions";
            }
        }
    }

    else {
        throw new Error("No action specified");
    }

}());
%>
