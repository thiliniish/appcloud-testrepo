<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
(function () {

    var loginStatus = jagg.isUserLoggedIn();
    if (loginStatus.error) {
        response.status = 401;
        print(loginStatus);
        return;
    }

    var mod = jagg.module("customurl");
    var action = request.getParameter("action");
    var cloudType = request.getParameter("cloudType");
    var utilModule = jagg.module("util");
    var cloudConfigFile = utilModule.getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var tenantDomain = session.get("LOGGED_IN_USER_TENANT_DOMAIN");
    var username = session.get("LOGGED_IN_USER");

    if (action == "publishVal") {
        var node = request.getParameter("node");
        var customDomain = request.getParameter("customDomain");
        var region = request.getParameter("region");
        var sslFile = request.getFile("sslFile");
        var keyFile = request.getFile("keyFile");
        var chainFile = request.getFile("chainFile");
        var cloudProfile = request.getParameter("cloudProfile");
        var previousRegion = request.getParameter("previousRegion");

        try {
            sslFile.open("r");
            var sslFileContent = sslFile.readAll();
            sslFile.close();

            keyFile.open("r");
            var keyFileContent = keyFile.readAll();
            keyFile.close();

            chainFile.open("r");
            var chainFileContent = chainFile.readAll();
            chainFile.close();

            var status = mod.publish(region, cloudProfile, node, customDomain, sslFileContent,
                    keyFileContent, chainFileContent, previousRegion);
            print(status);
        } catch (e) {
            var errorMessage = "Error occurred while publishing custom domain value.";
            log.error(errorMessage);
            log.error(e);
            response.status = 500;
            response.content = errorMessage;
        }
    } else if (action == "validateUrl") {
        var nodeType = request.getParameter("nodeType");
        var customUrl = request.getParameter("customDomain");
        var pointingUrl = request.getParameter("pointingUrl");
        var urlValidation = {};

        try {
            if(nodeType == APPLICATION_NODE_TYPE) {
                pointingUrl = cloudConfigFile.customUrl.integrationCloud.pointingUrl;
            }
            if (mod.validateUrl(customUrl, pointingUrl)) {
                if (mod.isUrlAvailable(customUrl, nodeType)) {
                    urlValidation.error = "false";
                } else {
                    urlValidation.error = "true";
                    urlValidation.message = "Url mapping is not available.";
                }
            } else {
                urlValidation.error = "true";
                urlValidation.message = "CNAME verifying failed. Please follow this <a href='" + cloudConfigFile.documentation.customUrlDocumentationLink +
                        "' target='_blank'>documentation</a> to add new CANME in domain registrar";
            }
            print(urlValidation);
        } catch (e) {
            var errorMessage = "Error occurred while validating url.";
            log.error(errorMessage);
            log.error(e);
            response.status = 500;
            response.content = errorMessage;
        }
    } else if (action == "getCurrentMapping") {
        var value = mod.getCurrentUserMapping(cloudType);
        if (value == null) {
            var jsonObj = {};
            var storeMapping = {};
            var gatewayMapping = {};
            storeMapping.customUrl = cloudConfigFile.customUrl.defaultStoreUrl;
            gatewayMapping.customUrl = cloudConfigFile.customUrl.defaultGatewayUrl;
            jsonObj.store = storeMapping;
            jsonObj.gateway = gatewayMapping;
            value = jsonObj;
        }
        print(value);
    } else if (action == "getCustomDomainDetailsForTenant") {
        try {
            var result = mod.getCustomDomainDetailsForTenant();
            print(result);
        } catch (e) {
            var errorMessage = "Error occurred while getting custom domain details for tenant.";
            log.error(errorMessage);
            log.error(e);
            response.status = 500;
            response.content = errorMessage;
        }
    } else if (action == "sendGatewayMigrationEmail") {
        var region = request.getParameter("region");
        try {
            var result = mod.sendGatewayMigrationEmails(region);
            print(result);
        } catch (e) {
            var errorMessage = "Error occurred while sending emails to notify gateway migration for tenant domain - "
                    + tenantDomain + " user - " + username;
            log.error(errorMessage);
            log.error(e);
            response.status = 500;
            response.content = errorMessage;
        }
    }

}());
%>
