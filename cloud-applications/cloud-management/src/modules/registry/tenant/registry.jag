<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log('modules/registry/tenant/registry.jag');
var carbon = require('carbon');
var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var multitenancy = carbon.multitenancy;
var sessionId = session.getId();
var isAuthenticated = jagg.module("util").isSessionAuthenticated();
var registry = "";
var serverUrl = cloudConfig.ServerUrls.cloudmgtServices.toString();

//Method to configure tenant specific parameters to pass to the registry.
var configureRegistryParameters = function (tenantDomain, username) {
    var options = null;
    var message = "An error occurred while configuring the tenant specific parameters for the user " + username;
    var result = {
        error: true,
        message: message,
        options: options,
        statusCode: 500
    }
    try {
        var tenantManager = multitenancy.getTenantManager();
        var tenantId = tenantManager.getTenantId(tenantDomain);
        options = {system: true, domain: tenantDomain, tenantId: tenantId};
        message = "Successfully configured the tenant specific parameters for the user " + username;
        result = {
            error: false,
            message: message,
            options: options,
            statusCode: 200
        }
    } catch (e) {
        message = message + ", error:" + e.message;
        log.error(message);
        log.error(e);
        result = {
            error: true,
            message: message,
            options: options,
            statusCode: 500
        }
    }
    return result;
};

//Method to retrieve the resource in the tenant's space in the registry.
var getResourceFromTenantSpace = function (path, tenantDomain, username) {
    var message = "Error while retrieving tenant space registry resource file: " + path + " for the user " + username;
    var response = "error";
    var result = {
        error: true,
        message: message,
        response: response,
        statusCode: 500
    }
    if (isAuthenticated) {
        try {
            var resourcExistsResult = isResourceExistingInTenantSpace(path, tenantDomain, username);
            if (resourcExistsResult.resourceExistsInTenantSpace) {
                var optionsResult = configureRegistryParameters(tenantDomain, username);
                if (!optionsResult.error) {
                    registry = new carbon.registry.Registry(serverUrl, optionsResult.options);
                    response = registry.get(path);
                    result = {
                        error: false,
                        message: resourcExistsResult.message,
                        response: response,
                        statusCode: 200
                    }
                }
            } else {
                message = "The resource does not exist in the path : " + path + " for the tenant " + username
                log.error(message);
                response = "resourcePending";
                result = {
                    error: true,
                    message: message,
                    response: response,
                    statusCode: 404
                }
            }
        } catch (e) {
            message = message + ", error: " + e.message;
            log.error(message);
            log.error(e);
            result = {
                error: true,
                message: message,
                response: response,
                statusCode: 500
            }
        }
    } else {
        message = "User " + username + " is not authenticated ";
        log.warn(message);
        result = {
            error: true,
            message: message,
            response: response,
            statusCode: 401
        }

    }
    return result;
};

//method to add a file to the registry.
var updateRegistryFile = function (path, contentToAdd, mediaType, tenantDomain, username) {
    var message = "Error while adding the resource file: " + path + " to the tenant space registry for the tenant " + username;
    var result = {
        error: true,
        message: message,
        statusCode: 500
    }
    if (isAuthenticated) {
        try {
            var optionsResult = configureRegistryParameters(tenantDomain, username);
            if (!optionsResult.error) {
                registry = new carbon.registry.Registry(serverUrl, optionsResult.options);
                var resource = {
                    content: contentToAdd,
                    mediaType: mediaType
                };
                registry.put(path, resource);
                message = "Successfully updated the registry file " + mediaType + " for the user " + username;
                log.info(message);
                result = {
                    error: false,
                    message: message,
                    statusCode: 200
                }
            }
        } catch (e) {
            message = message + ", error:" + e.message;
            log.error(message);
            log.error(e);
            result = {
                error: true,
                message: message,
                statusCode: 500
            }
        }
    } else {
        message = "User " + username + " is not authenticated "
        log.warn(message);
        result = {
            error: true,
            message: message,
            statusCode: 401
        }

    }
    return result;
};

//Method to check if a given resource exists in the tenant space in the registry.
var isResourceExistingInTenantSpace = function (path, tenantDomain, username) {
    var message = "Error while accessing tenant space registry resource file: " + path + " for the tenant " + username;
    var resourceExistsInTenantSpace = false;
    var result = {
        error: true,
        message: message,
        resourceExistsInTenantSpace: resourceExistsInTenantSpace,
        statusCode: 500
    }

    if (isAuthenticated) {
        try {
            var optionsResult = configureRegistryParameters(tenantDomain, username);
            if (!optionsResult.error) {
                registry = new carbon.registry.Registry(serverUrl, optionsResult.options);
                message = "Resource exists in the tenant space for the user " + username;
                resourceExistsInTenantSpace = registry.exists(path);
                result = {
                    error: false,
                    message: message,
                    resourceExistsInTenantSpace: resourceExistsInTenantSpace,
                    statusCode: 200
                }
            }
        } catch (e) {
            message = message + +", error:" + e.message
            log.error(message);
            log.error(e);
            result = {
                error: true,
                message: message,
                resourceExistsInTenantSpace: resourceExistsInTenantSpace,
                statusCode: 500
            }

        }
    } else {
        message = "User " + username + " is not authenticated ";
        log.warn(message);
        result = {
            error: true,
            message: message,
            resourceExistsInTenantSpace: resourceExistsInTenantSpace,
            statusCode: 401
        }
    }
    return result;
};

%>