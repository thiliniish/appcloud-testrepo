<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");

var log = new Log("modules/billing/billing.jag");
var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var subscriptionsType = cloudConfig.subscriptions.type;
var cloudmgtURL = cloudConfig.ServerUrls.cloudmgt.toString();
var modDb = jagg.module("database");
var mdAlgorithm = "SHA-512";

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var billingCoreService = server.osgiService('org.wso2.carbon.cloud.billing.core.service.CloudBillingService');

var getPaymentPlanFromId = function (serviceId, paymentPlanId) {
    var subscriptions = billingCoreService.getPaymentPlansForServiceId(serviceId);
    for (var i = 0; i < subscriptions.length; i++) {
        var item = subscriptions[i];
        var id = item.getId();
        if (id == paymentPlanId) {
            return item.getName();
        }
    }
    return null;
};

var isPaidAccount = function () {
    if ((session.get("TENANT_INFO")) != null) {
        var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
        var queryString = SQL_QUERY_STRINGS.SELECT_ACCOUNT_NUMBER_FROM_BILLING_ACCOUNT;
        var parameters = [tenantDomain];
        var result = modDb.executeQuery(queryString, parameters);
        if (result[0] != null && result[0] != "undefined") {
            var accountNumber = result[0]["ACCOUNT_NUMBER"];
            if (accountNumber == null || accountNumber == "NULL") {
                return false;
            } else {
                return true;
            }
        } else {
            return false;
        }
    } else {
        return false;
    }
};

var notifyMailCampaignForUnfinishedUpgrades = function (cType, domainName) {

    var isEnabled = cloudConfig.MailCampaignAddUserApi.enable_MailCampaignAddUserApi;

    if (isEnabled == true) {
        var modEvents = jagg.module("events");
        var type = cType.substring(0, cType.indexOf("_")).toUpperCase();
        //<TODO>Get lead source token from Pardot</TODO>
        var email = String(session.get("LOGGED_IN_USER_EMAIL"));
        log.debug("Sending notification to " + MAIL_CAMPAIGN + " for unfinished upgrades for " + email);
        var URL;
        if ("API".equals(type)) {
            URL = cloudConfig.MailCampaignAddUserApi.apiCloudUpgradeStart;
        } else if ("APP".equals(type)) {
            URL = cloudConfig.MailCampaignAddUserApi.appCloudUpgradeStart;
        }
        var data = "email=" + email + "&domain_name=" + domainName + "&upgrade_status=0";
        var result = post(URL, data, {}, 'text');
        var msg = result['data'];
        var actionString = MAIL_CAMPAIGN + "-" + type + "-Upgrade:";
        var page = MAIL_CAMPAIGN;
        var item = type;
        var events = [];
        if (MAIL_CAMPAIGN_SUBMISSION_SUCCESS.equals(msg)) {
            actionString = actionString + "Success";
            session.put("IS_DATA_SENT_TO_MAIL_CAMPAIGN_UNFINISHED_UPGRADE", "false");
            log.info(MAIL_CAMPAIGN + " api call 'Cloud Upgrade Start' is successful for " + email);
        } else {
            actionString = actionString + "Failed";
            log.error(MAIL_CAMPAIGN + " api call 'Cloud Upgrade Start' failed for the user " + jagg.getUser() + " " +
            msg);
        }
        var event = {};
        event.item = item;
        event.timestamp = new Date().getTime();
        event.pageName = page;
        event.action = actionString;
        events[events.length] = event;
        modEvents.publishUserActivity(events, jagg.getUser(), email);
    }
};

var getCloudURL = function (serviceName) {
    for (i = 0; i < subscriptionsType.length; i++) {
        if ((subscriptionsType[i].id).equals(serviceName)) {
            subscriptionsURL = subscriptionsType[i].urls.cloudTypeUrl;
            return subscriptionsURL;
        }
    }
    return cloudmgtURL + "/site/pages/index.jag";
};

var getDisplayNameFromTenantDomain = function (tenantDomain) {
    var queryString = SQL_QUERY_STRINGS.SELECT_DISPLAY_NAME;
    var parameters = [tenantDomain];
    var result = jagg.module("database").executeQuery(queryString, parameters);

    if (result.length > 0) {
        return result[0]["displayName"];
    } else {
        return null;
    }
};

//TODO Get the account id from the service
var getAccountId = function () {
    if ((session.get("TENANT_INFO")) != null) {
        var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
        var queryString = SQL_QUERY_STRINGS.SELECT_ACCOUNT_NUMBER_FROM_BILLING_ACCOUNT;
        var parameters = [tenantDomain];
        var result = modDb.executeQuery(queryString, parameters);
        try {
            var accountNumber = result[0]["ACCOUNT_NUMBER"];
            if (accountNumber == null || accountNumber == "NULL") {
                return null;
            } else {
                return accountNumber;
            }
        } catch (e) {
            log.error("Error reading account number from db for tenantDomain " + tenantDomain);
            log.error(e);
            return null;
        }

    } else {
        return null;
    }
};
//Getting product rate plans
var getRatePlans = function (serviceId) {
    try {
        var subscriptions = billingCoreService.getPaymentPlansForServiceId(serviceId);
        var subscriptionJson = {
            entry: []
        };

        for (var i = 0; i < subscriptions.length; i++) {
            var item = subscriptions[i];
            subscriptionJson.entry.push({
                "id": subscriptions[i].getId(),

                "name": item.getName(),
                "maxDailyUsage": item.getProperty(BILLING_API_CLOUD_PLAN_MAX_DAILY_USAGE),
                "maxAccounts": item.getProperty(BILLING_API_CLOUD_PLAN_MAX_ACCOUNT),
                "monthlyRental": item.getProperty(BILLING_API_CLOUD_PLAN_MONTHLY_RENTAL),
                "overUsage": item.getProperty(BILLING_API_CLOUD_PLAN_OVER_USAGE),
                "premiumLevel": item.getProperty(BILLING_API_CLOUD_PLAN_PREMIUM_LEVEL),
                "visibility": item.getProperty(BILLING_API_CLOUD_PLAN_VISIBILITY)
            });
        }
        return subscriptionJson;
    } catch (e) {
        log.error("Error retrieving rate plans " + e);
        throw Error(e);
    }
};
var validateServiceId = function (serviceId) {
    try {
        return billingCoreService.validateServiceId(serviceId);
    } catch (e) {
        log.error("Service id invalid, service: " + serviceId);
        return false;
    }
};

var isValidCoupon = function (couponData, serviceId) {
    //Currently the serviceId is not necessary when retrieving the coupons.
    try {
        if (couponData != null) {
            var couponString = BILLING_COUPON_HEADER + couponData;
            var getCouponPlan = JSON.parse(billingCoreService.retrieveCouponInfo(couponString));
            if (getCouponPlan.valid) {
                return true;
            }
        }
        return false;
    } catch (e) {
        log.warn("Error while validating the coupon: " + e);
        return false;
    }
};

var getAccountStatus = function (subscription, type) {
    var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
    var queryString = SQL_QUERY_STRINGS.SELECT_STATUS_FROM_BILLING_STATUS;
    var parameters = [tenantDomain, subscription, type];

    return modDb.executeQuery(queryString, parameters);
};

var getCurrentRatePlan = function () {
    var accountId = getAccountId();
    if ((session.get("TENANT_INFO")) != null && accountId != null) {
        return JSON.parse(billingCoreService.getCurrentRatePlan(accountId));
    } else {
        return null;
    }
};

// Checking whether the Billing functionality is enable/disable
var isBillingEnabled = function (serviceId) {
    return billingCoreService.isBillingEnabled(serviceId);
};

var getPublicKeyParams = function (serviceId, productRatePlanId) {
    try {
        var clientParams = {};
        clientParams.field_passthrough1 = billingCoreService.callVendorMethod("getPublishableKey", null);
        clientParams.field_passthrough2 = serviceId;
        clientParams.field_passthrough3 = productRatePlanId;
        return clientParams;
        //TO DO Getting the Key from the server.

    } catch (e) {
        log.error("Error while getting the billing publishable key as JSON");
        throw e;
    }
};

// Get the discount value for the coupon
var calculateDiscountForCoupon = function (couponData) {
    var serviceId = session.get("SERVICE_ID");
    var productRatePlanId = session.get("PRODUCT_PLAN_ID");
    var ratePlanInfo = billingCoreService.getRatePlanInfo(serviceId, productRatePlanId);
    var premium = ratePlanInfo.getProperty("MonthlyRental").substring(1);
    var discount = 0.00;
    var couponString = BILLING_COUPON_HEADER + couponData;

    try {
        //coupon validity should be checked before calculating the discount.
        var getCouponPlan = JSON.parse(billingCoreService.retrieveCouponInfo(couponString));
        if (getCouponPlan.amount_off != null) {
            discount = (parseInt(getCouponPlan.amount_off) / CENTS);
        } else if (getCouponPlan.percent_off != null) {
            discount = premium * (parseInt(getCouponPlan.percent_off) / 100)
        } else {
            log.error("Error while calculating the discount for the coupon");
        }
        return discount;
    } catch (e) {
        log.error("ERROR in calculating discount for coupon : " + couponData + " : " + e.message);
        log.error(e);
        throw e;
    }
};


var createAccount = function (accountData, metaData, organizationName) {

    var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;

    if (validateRatePlanId(metaData.serviceId, metaData.productRatePlanId)) {

        var effectiveDate = new Packages.java.util.Date();
        var data = populateAccountInfo(organizationName, accountData, metaData, false);
        if (log.isDebugEnabled()) {
            log.debug("Creating account with data: " + data);
        }
        var response = JSON.parse(billingCoreService.createCustomer(JSON.stringify(data)));
        var responseSubscriptionCreation;
        if (response.id != null) {
            var planName = getPaymentPlanFromId(metaData.serviceId, metaData.productRatePlanId);
            data = populateSubscriptionInfo(response.id, metaData.productRatePlanId);
            var responseSubscriptionCreation = JSON.parse(billingCoreService.createSubscription(JSON.stringify(data)));

            if (responseSubscriptionCreation.data.subscriptionNumber != null) {
                //update BILLING_ACCOUNT table
                var queryString = SQL_QUERY_STRINGS.INSERT_ACCOUNT_NUMBER_TO_BILLING_ACCOUNT;
                var parameters = [response.id, tenantDomain];
                modDb.executeQuery(queryString, parameters);

                var sqlDateFormat = dateTimeFormatter(MYSQL_DATETIME_FORMAT);
                var formattedEffectiveDate = sqlDateFormat.format(effectiveDate);

                //update BILLING_STATUS table with new subscription
                queryString = SQL_QUERY_STRINGS.INSERT_INTO_BILLING_STATUS;
                parameters = [tenantDomain, metaData.serviceId, type.PAID, status.ACTIVE, formattedEffectiveDate, MYSQL_MAX_DATETIME_STRING];
                modDb.executeQuery(queryString, parameters);

                //update the previous plan
                queryString = SQL_QUERY_STRINGS.UPDATE_SUBSCRIPTION_TYPE_STATUS_IN_BILLING_STATUS;
                parameters = [status.DISABLED, formattedEffectiveDate, tenantDomain, metaData.serviceId, type.TRIAL];
                modDb.executeQuery(queryString, parameters);

                //add to BILLING_ACCOUNT_AMENDMENTS
                queryString = SQL_QUERY_STRINGS.INSERT_BILLING_ACCOUNT_AMENDMENTS;
                parameters = [response.id, metaData.productRatePlanId, formattedEffectiveDate, MYSQL_MAX_DATETIME_STRING, metaData.serviceId];
                modDb.executeQuery(queryString, parameters);

                //send an email to the user
                var tenantDisplayName = getDisplayNameFromTenantDomain((session.get("TENANT_INFO")).tenantDomain);

                var subscriptionName = productIdFromServiceId[metaData.serviceId];

                var profileFirstName = metaData.firstName;
                var profileLastName = metaData.lastName;

                if (tenantDisplayName != null) {
                    setTimeout(function () {
                        try {
                            var modProfile = jagg.module("user/profile");
                            var claims = modProfile.getProfile();
                            if (claims.firstname == null && claims.lastname == null) {
                                modProfile.updateProfile(profileFirstName, profileLastName);
                            }
                            jagg.module("util").sendBillingAccountCreationEmail(tenantDisplayName, subscriptionName, planName, effectiveDate);
                            jagg.module("util").sendBillingAccountCreationNotification(tenantDisplayName, subscriptionName, planName, effectiveDate);
                            //Add Cloud upgrade completion to MailCampaign
                            var isEnabled = cloudConfig.MailCampaignAddUserApi.enable_MailCampaignAddUserApi;

                            if (isEnabled) {
                                var modEvents = jagg.module("events");
                                var type = metaData.serviceId.toUpperCase();
                                type = type.substring(0, type.indexOf("_"));
                                var email = String(session.get("LOGGED_IN_USER_EMAIL"));
                                var URL;
                                if ("API".equals(type)) {
                                    URL = cloudConfig.MailCampaignAddUserApi.apiCloudUpgradeComplete;
                                } else if ("APP".equals(type)) {
                                    URL = cloudConfig.MailCampaignAddUserApi.appCloudUpgradeComplete;
                                }
                                var data = "email=" + email + "&domain_name=" + organizationName + "&upgrade_status=1";
                                var result = post(URL, data, {}, 'text');
                                var msg = result['data'];
                                var actionString = MAIL_CAMPAIGN + "-" + type + "-Upgrade:";
                                var page = MAIL_CAMPAIGN;
                                var item = type;
                                var events = [];
                                if (MAIL_CAMPAIGN_SUBMISSION_SUCCESS.equals(msg)) {
                                    actionString = actionString + "Success";
                                    log.info(MAIL_CAMPAIGN + " api call 'Cloud Upgrade Complete' is successful for " +
                                    email);
                                } else {
                                    actionString = actionString + "Failed";
                                    log.error(MAIL_CAMPAIGN + " api call 'Cloud Upgrade Complete' failed for the user "
                                    + jagg.getUser() + " " + msg);
                                }
                                var event = {};
                                event.item = item;
                                event.timestamp = new Date().getTime();
                                event.pageName = page;
                                event.action = actionString;
                                events[events.length] = event;
                                modEvents.publishUserActivity(events, jagg.getUser(), tenantDomain);
                            }
                            return true;
                        } catch (e) {
                            log.error("Error while sending notification for paid plan subscription: " + e);
                            return true;
                        } finally {
                            tenantDisplayName = null;
                            planName = null;
                            subscriptionName = null;
                            profileFirstName = null;
                            profileLastName = null;
                            effectiveDate = null;
                        }
                    }, 0);
                }
                return response.id;
            } else {
                log.error("Error occurred while subscribing to the " + planName + "for customer account " + response.id);
            }
        } else {
            log.error("Error occurred while creating the customer account");
        }
        return false;
    } else {
        log.error(" customer account creation failed. Error: token expired or rate plan validation failure");
    }
};

// Function for change the current subscription plan
var changeSubscriptionPlan = function (accountId, newProductRatePlanId, ratePlans, serviceId, couponData) {

    var previewMode = false;
    var parameters;
    var response;
    // Remove session variable
    session.remove("CURRENT_RATE_PLAN_ID");
    session.remove("EFFECTIVE_DATE");

    // Get rate plans
    var ratePlan = getCurrentRatePlan(serviceId);
    var currentRatePlanId = ratePlan.id;
    session.put("CURRENT_RATE_PLAN_ID", currentRatePlanId);

    var isUpgrade = isPlanUpgrade(ratePlans, currentRatePlanId, newProductRatePlanId);
    try {
        response = getChangeSubscriptionPlanResult(accountId, newProductRatePlanId, serviceId, couponData, isUpgrade);
    } catch (e) {
        log.error("Error while sending request for subscription plan change: " + e);
        response = false;
    }
    var effectiveDate = session.get("EFFECTIVE_DATE");
    if (response.success) {
        //add an entry to subscription
        //UPDATE_ BILLING_ACCOUNT_AMENDMENTS
        //INSERT_BILLING_ACCOUNT_AMENDMENTS
        //update the previous plan
        var sqlDateFormat = dateTimeFormatter(MYSQL_DATETIME_FORMAT);
        var formattedEffectiveDate = sqlDateFormat.format(effectiveDate);
        var queryString = SQL_QUERY_STRINGS.UPDATE_BILLING_ACCOUNT_AMENDMENTS;
        parameters = [formattedEffectiveDate, accountId, MYSQL_MAX_DATETIME_STRING, serviceId];
        modDb.executeQuery(queryString, parameters);

        //add to BILLING_ACCOUNT_AMENDMENTS
        queryString = SQL_QUERY_STRINGS.INSERT_BILLING_ACCOUNT_AMENDMENTS;
        parameters = [accountId, newProductRatePlanId, formattedEffectiveDate, MYSQL_MAX_DATETIME_STRING, serviceId];
        modDb.executeQuery(queryString, parameters);

        if (log.isDebugEnabled()) {
            log.debug("Rate plan changed for Account Id: " + accountId + " into plan: " + newProductRatePlanId);
        }

        var tenantDisplayName = getDisplayNameFromTenantDomain((session.get("TENANT_INFO")).tenantDomain);
        var newPlanName = getPaymentPlanFromId(serviceId, newProductRatePlanId);
        var previousPlan = getPaymentPlanFromId(serviceId, currentRatePlanId);
        if (tenantDisplayName != null) {
            setTimeout(function () {
                try {
                    jagg.module("util").sendBillingPlanChangedEmail(tenantDisplayName, serviceId, newPlanName, effectiveDate, isUpgrade);
                    jagg.module("util").sendBillingPlanChangedNotification(tenantDisplayName, serviceId, effectiveDate, newPlanName, previousPlan, isUpgrade);
                    return true;
                } catch (e) {
                    log.error("Error while sending notifications for subscription plan change: " + e);
                    return true;
                } finally {
                    tenantDisplayName = null;
                    serviceId = null;
                    newPlanName = null;
                    effectiveDate = null;
                    previousPlan = null;
                }
            }, 0);
        }
        return true;
    } else {
        throw new Error("Rate plan change failed for account: " + accountId + " into plan: " + newProductRatePlanId + " from plan: "
        + currentRatePlanId + "Error : " + JSON.stringify(response.message));
    }
};

var getChangeSubscriptionPlanResult = function (accountId, newProductRatePlanId, serviceId, couponData, isUpgrade) {

    var couponPlanId = null;

    var changePlanData = {};
    // Checking the validity of the coupon and getting the new coupons rate plan Id
    if (isValidCoupon(couponData, serviceId)) {
        couponPlanId = BILLING_COUPON_HEADER + couponData;
        changePlanData["coupon"] = couponPlanId;
    }

    var effectiveDate = setChangePlanEffectiveDate(isUpgrade);
    session.put("EFFECTIVE_DATE", effectiveDate);
    var subscriptionId = getCurrentSubscription(serviceId).id;

    // required data to change the subscription
    changePlanData["prorate"] = true;
    changePlanData["plan"] = newProductRatePlanId;

    var response = billingCoreService.updateSubscription(subscriptionId, JSON.stringify(changePlanData),
            isUpgrade);
    return JSON.parse(response);
};

//populate account information object
var populateAccountInfo = function (organizationName, accountData, metaData, isEdit) {
    var data = {};
    data.description = organizationName;
    if (!isEdit) {
        data.source = metaData.field_passthrough4;
    }
    data.email = metaData.workEmail;
    data.shipping = {};
    data.metadata = {};

    var shippingDetails = {};
    shippingDetails.address = accountData;
    shippingDetails.name = metaData.firstName + " " + metaData.lastName;
    data.shipping = shippingDetails;

    var metaDetails = {};
    metaDetails.firstName = metaData.firstName;
    metaDetails.lastName = metaData.lastName;
    data.metadata = metaDetails;

    return data;
};

var populateSubscriptionInfo = function (customer, ratePlanId) {
    var couponData = session.get("PRODUCT_COUPON_DATA");
    var serviceId = session.get("SERVICE_ID");
    session.remove("PRODUCT_COUPON_DATA");
    var data = {};
    if (couponData != "" && couponData != "null" && couponData != null && isValidCoupon(couponData, serviceId)) {
        var newCouponId = BILLING_COUPON_HEADER + couponData;
        data.coupon = newCouponId;
    }
    data.customer = customer;
    data.plan = ratePlanId;
    return data;
};

//Validate rate plan Id with the service type
var validateRatePlanId = function (serviceId, productRatePlanId) {
    try {
        var response = billingCoreService.validateRatePlanId(serviceId, productRatePlanId);
        return response;
    } catch (e) {
        log.error("Rate Plan id invalid, service: " + serviceId + ", ratePlanId: " + productRatePlanId);
        return false;
    }
};

var getRatePlanInfo = function (serviceId, productRatePlanId){
    try {
        var response = billingCoreService.getRatePlanInfo(serviceId, productRatePlanId);
        return response;
    } catch (e) {
        log.error("Error while retrieving rate plan information for, service: " + serviceId + ", and ratePlanId: " +
        productRatePlanId);
        return false;
    }
}

var dateTimeFormatter = function (dateTimeFormat) {
    return new Packages.java.text.SimpleDateFormat(dateTimeFormat);
};

var updateBillingStatus = function (status, effectiveDate, serviceType, serviceId, tenantDomain) {

    var sqlDateFormat = dateTimeFormatter(MYSQL_DATETIME_FORMAT);
    var formattedEffectiveDate = sqlDateFormat.format(effectiveDate);

    //updating the billing status
    var queryString  = SQL_QUERY_STRINGS.UPDATE_SUBSCRIPTION_TYPE_STATUS_IN_BILLING_STATUS;
    var parameters = [status, formattedEffectiveDate, tenantDomain, serviceId, serviceType];
    modDb.executeQuery(queryString, parameters);
};

var getCancelSubscriptionEffectiveDate = function () {
    var dateFormatter = dateTimeFormatter(DATE_FORMAT);
    try {
        var effectiveDate = setChangePlanEffectiveDate(false);
        return dateFormatter.format(effectiveDate);
    } catch (e) {
        if (!(typeof effectiveDate === "undefined") && !effectiveDate.success) {
            return dateFormatter.format(new Packages.java.util.Date());
        }
        log.error("Error getting cancel subscription effectiveDate " + e);
        throw Error(e);
    }
};

var setChangePlanEffectiveDate = function (isUpgrade) {
    try {
        if (!isUpgrade) {
            //TODO  GEt the correct downgrade dates.
            var currentSubscription = getCurrentSubscription();
            if (currentSubscription != null) {
                var currentPeriodEnd = currentSubscription.current_period_end;
                return new Date(currentPeriodEnd * 1000);
            }
            return currentSubscription;
        } else {
            return new Packages.java.util.Date();
        }
    } catch (e) {
        log.error("Setting change plan effective date failed. " + e);
        throw Error(e);
    }
};

var isPlanUpgrade = function (ratePlans, currentRatePlan, newRatePlan) {
    var currentPlanLevel = 0;
    var newPlanLevel = 0;
    if (ratePlans != null) {
        for (var i = 0; i < ratePlans.length; i++) {
            if (ratePlans[i].id == currentRatePlan) {
                currentPlanLevel = ratePlans[i].premiumLevel;
            } else if (ratePlans[i].id == newRatePlan) {
                newPlanLevel = ratePlans[i].premiumLevel;
            }
        }
    }
    return currentPlanLevel <= newPlanLevel;
};
var getAccountDetails = function () {
    var accountId = getAccountId();
    return JSON.parse(billingCoreService.getCustomerDetails(accountId));
};

//add tenant to billing account tables at the tenant registration
var addTenantToBilling = function (tenantId, tenantDomain) {
    var sqlDateFormat = dateTimeFormatter(MYSQL_DATETIME_FORMAT);

    var queryString = SQL_QUERY_STRINGS.INSERT_INTO_BILLING_ACCOUNT;
    var parameters = [null, tenantDomain];

    var result = modDb.executeQuery(queryString, parameters);
    if (log.isDebugEnabled()) {
        log.debug("Tenant : " + tenantDomain + " (tenant id: " + tenantId
        + ") added to BILLING_ACCOUNT table");
    }

    var subscriptions = cloudConfig.subscriptions.type;
    for (var i = 0; i < subscriptions.length; i++) {
        var subscription = subscriptions[i].id;
        var billingAccountStatus;
        var startDate;
        var billingType;
        var endDate;
        if (subscriptions[i].id != DEFAULT_SUBSCRIPTION) {
            if (subscriptions[i].serviceType === service.COMMERCIAL) {
                billingType = type.TRIAL;
                billingAccountStatus = status.INACTIVE;
                startDate = sqlDateFormat.parse(MYSQL_MIN_DATETIME_STRING);
                endDate = sqlDateFormat.parse(MYSQL_MIN_DATETIME_STRING);
            } else if (subscriptions[i].serviceType === service.FREE) {
                startDate = new Packages.java.util.Date();
                billingAccountStatus = status.ACTIVE;
                billingType = type.FREE;
                endDate = sqlDateFormat.parse(MYSQL_MAX_DATETIME_STRING);
            } else {
                log.error("No service type found for: " + subscription
                + "in cloud_mgt config. It should be either free or commercial");
                parameters = [tenantDomain];
                queryString = SQL_QUERY_STRINGS.DELETE_FROM_BILLING_ACCOUNT;
                log.info("Tenant : " + tenantDomain + " (tenant id: " + tenantId
                + ") deleted from BILLING_ACCOUNT table. [As a rollback operation] ");
                result = modDb.executeQuery(queryString, parameters);
                throw new Error(
                        "Tenant billing account registration failure: Configuration failure ");
            }
            queryString = SQL_QUERY_STRINGS.INSERT_INTO_BILLING_STATUS;
            parameters = [tenantDomain, subscription, billingType, billingAccountStatus, sqlDateFormat.format(startDate),
                sqlDateFormat.format(endDate)];
            result = modDb.executeQuery(queryString, parameters);
        }
    }
    if (log.isDebugEnabled()) {
        log.debug("Tenant : " + tenantDomain + " (tenant id: " + tenantId
        + ") added to BILLING_STATUS table with params: " + parameters);
    }
};

// Assuming that only one subscription is created for the Tenant.
var getCurrentRatePlan = function (serviceId) {
    if ((session.get("TENANT_INFO")) != null) {
        var susbcriptionData = getCustomerDetails();
        if (susbcriptionData.success) {
            return susbcriptionData.data.subscriptions.data[0].plan;
        }
    }
    return null;
};
//TODO if more than one subscription is created for the customer
var getCurrentSubscription = function (serviceId) {
    if ((session.get("TENANT_INFO")) != null) {
        var susbcriptionData = getCustomerDetails();
        return susbcriptionData.data.subscriptions.data[0];
    } else {
        return null;
    }
};
var getCustomerDetails = function () {
    var accountId = getAccountId();
    return JSON.parse(billingCoreService.getCustomerDetails(accountId));
};

var getAccountInfo = function () {
    try {
        var accountId = getAccountId();
        return billingCoreService.retrieveAccountInfo(accountId);
    } catch (e) {
        log.error("Error while getting the billing configurations as JSON");
        throw e;
    }
};

var updateContactInfo = function (organizationName, accountData, metaData) {
    try {
        var accountId = getAccountId();
        var data = populateAccountInfo(organizationName, accountData, metaData,
                true);
        var response = JSON.parse(billingCoreService.updateCustomer(accountId,
                JSON.stringify(data)));
        if (response.success) {
            return "Your contact information is successfully added";
        } else {
            throw new Error("customer account update failed.");
        }
    } catch (e) {
        log.error("customer account update failed. Error : " + e);
        throw new Error("customer account update failed. Error : " + e);
    }
};

var getCurrencyUsed = function () {
    return CURRENCY;
};

// get the trial period
var getTrialPeriod = function (serviceId) {
    return billingCoreService.getTrialPeriod(serviceId);
};

var getBillingInvoiceData = function (tenantDomain, invoiceId) {
    try {
        var summary = billingCoreService.getInvoiceDetails(invoiceId);

        var invoiceObj = JSON.parse(summary);
        if (invoiceObj.id != null) {
            var invoiceItems = invoiceObj.lines.data;
            var invoiceData = {};
            var dateFormat = dateTimeFormatter(DATE_FORMAT);
            var totalDiscount = 0;

            invoiceData["accountName"] = invoiceObj.customer;
            invoiceData["invoiceDate"] = dateFormat.format(invoiceObj.date * THOUSAND);
            invoiceData["invoiceNumber"] = invoiceObj.id;
            invoiceData["amount"] = (invoiceObj.amount_due / CENTS).toFixed(2);
            invoiceData["invoiceItems"] = [];
            if (invoiceObj.starting_balance != 0) {
                var itemData = {};
                itemData["subscriptionName"] = "";
                itemData["chargeName"] = "Balance brought-forward";
                itemData["discount"] = 0.0;
                itemData["amount"] = -(invoiceObj.starting_balance / CENTS);
                itemData["servicePeriod"] = "";
                itemData["chargeDate"] = "";
                invoiceData["invoiceItems"].push(itemData);
            }

            for (var i = 0; i < invoiceItems.length; i++) {
                var item = {};
                var invoiceItem = invoiceItems[i];
                item["chargeName"] = invoiceItem.description;
                if (invoiceItem.description == null) {
                    if( invoiceItem.plan.statement_descriptor != null) {
                        item["chargeName"] = invoiceItem.plan.statement_descriptor;
                    } else {
                        item["chargeName"] = invoiceItem.plan.name + " Subscription";
                    }
                }
                item["subscriptionName"] = invoiceItem.plan.name;
                item["amount"] = (invoiceItem.amount / CENTS).toFixed(2);
                item["servicePeriod"] = dateFormat.format(invoiceItem.period.start * THOUSAND) + " to "
                        + dateFormat.format(invoiceItem.period.end * THOUSAND);
                item["chargeDate"] = dateFormat.format(invoiceObj.date * THOUSAND);
                item["discount"] = 0.0;
                if (invoiceItem.discountable && invoiceObj.discount != null) {
                    if (invoiceObj.discount.coupon.amount_off != null) {
                        item["discount"] = -invoiceObj.discount.coupon.amount_off / CENTS;
                        totalDiscount = totalDiscount + (invoiceObj.discount.coupon.amount_off / CENTS);
                    } else {
                        item["discount"] = -(invoiceItem.amount * (invoiceObj.discount.coupon.percent_off / 100)) /
                                CENTS;
                        totalDiscount = totalDiscount + ((invoiceItem.amount * (invoiceObj.discount.coupon
                                        .percent_off / 100)) / CENTS);
                    }
                }
                invoiceData["invoiceItems"].push(item);
            }
            if (totalDiscount != 0) {
                var itemData = {};
                itemData["subscriptionName"] = "";
                itemData["chargeName"] = "Discounted Amount";
                itemData["discount"] = 0.0;
                itemData["amount"] = (-totalDiscount).toFixed(2);
                itemData["servicePeriod"] = "";
                itemData["chargeDate"] = "";
                invoiceData["invoiceItems"].push(itemData);
            }


            return invoiceData;
        }
    } catch (e) {
        log.error("ERROR in getting Billing invoice data for tenant : " + tenantDomain + " : " + e.message);
        log.error(e);
        throw e;
    }
};

var addPaymentMethod = function (tokenId) {
    try {
        var accountId = getAccountId();
        var data = {};
        data.source = tokenId;
        var response = JSON.parse(billingCoreService.addPaymentMethod(accountId,
                JSON.stringify(data)));
        if (response.success) {
            return "Your payment information is successfully added";
        } else {
            throw new Error("customer account update failed.");
        }
    } catch (e) {
        log.error("customer account update failed. Error : " + e);
        throw new Error("customer account update failed. Error : " + e);
    }
};

var getAllPaymentMethods = function (tenantDomain) {
    var accountId = getAccountId();
    var accInfo = JSON.parse(billingCoreService.getCustomerDetails(accountId));
    if (accInfo.success) {
        var responseObj = {};
        responseObj.success = accInfo.success;
        responseObj.defualtCardId = accInfo.data.default_source;
        responseObj.card = accInfo.data.sources.data;
        return responseObj;
    } else {
        log.error("Failed to get all payment methods. Error : " + accInfo.message);
        throw new Error("Failed to get all payment methods. Error : " + accInfo.message);
    }

};

var updateDefaultPaymentMethod = function (methodId) {
    if (methodId) {
        var accountId = getAccountId();
        var data = {};
        data.default_source = methodId;

        var accInfo = JSON.parse(billingCoreService.setDefaultPaymentMethod(accountId, JSON.stringify(data)));
        if (accInfo.success) {
            return accInfo;
        } else {
            log.error("Failed update the payment method. method Id : " + methodId);
            throw new Error("Failed update the payment method. method Id : " + methodId);
        }
    } else {
        log.error("Failed update the payment method. method Id : " + methodId);
        throw new Error("Failed update the payment method. method Id : " + methodId);
    }
};

var removePaymentMethod = function (methodId) {
    try {
        var accountId = getAccountId();
        return JSON.parse(billingCoreService.removePaymentMethod(accountId, methodId));

    } catch (e) {
        log.error("Failed remove the payment method. method Id : " + methodId);
        throw new Error("Failed remove the payment method. method Id : " + methodId);
    }
};

var cancelSubscription = function (serviceName, serviceId) {
    var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
    var effectiveDate = setChangePlanEffectiveDate(false);

    try {
        var subscriptionId = getCurrentSubscription().id;
        log.info("Cancelling subscription for tenant: " + tenantDomain + " subscription id: " + subscriptionId);
        var data = {};
        data.at_period_end = 'true'; // This will set the cancellation in the end of the bill cycle

        var response = JSON.parse(billingCoreService.cancelSubscription(subscriptionId, JSON.stringify(data)));
        if (response.success === true) {
            if (serviceId != null) {
                updateBillingStatus(status.PENDING_DISABLE, effectiveDate, type.PAID, serviceId, tenantDomain);
            }
            var tenantDisplayName = getDisplayNameFromTenantDomain(tenantDomain);
            if (tenantDisplayName != null) {
                setTimeout(function () {
                    try {
                        jagg.module("util").sendSubscriptionCancellationEmail(tenantDisplayName, serviceName, effectiveDate);
                        jagg.module("util").sendBillingSubscriptionCancelledNotification(tenantDisplayName, serviceId, effectiveDate);
                        return true;
                    } catch (e) {
                        log.error("Error while sending notification on subscription cancellation: " + e);
                        return true;
                    } finally {
                        tenantDisplayName = null;
                        serviceName = null;
                        serviceId = null;
                        effectiveDate = null;
                    }
                }, 0);
            }
            return true;
        } else {
            return false;
        }
    } catch (e) {
        log.error("Error cancelling subscription for tenant " + tenantDomain + e);
        throw Error(e);
    }
};

// Extend the trial period
var extendTrial = function (serviceId, customerRequest) {
    var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
    var extensionStartDate = new Packages.java.util.Date();
    var extendedEndDate = addDays(extensionStartDate, parseInt(
            billingCoreService.getTrialPeriod(SUBSCRIPTION_API_CLOUD)));
    var sqlDateFormat = dateTimeFormatter(MYSQL_DATETIME_FORMAT);

    var queryString = SQL_QUERY_STRINGS.SELECT_ALL_FROM_BILLING_STATUS;
    var parameters = [tenantDomain, serviceId, type.TRIAL];
    var result = modDb.executeQuery(queryString, parameters);
    if (result.length > 0) {
        if (result[0]["STATUS"] === status.ACTIVE || status.EXTENDED) {

            var trialStartDate = result[0]["START_DATE"];
            var trialEndDate = result[0]["END_DATE"];

            queryString = SQL_QUERY_STRINGS.INSERT_BILLING_STATUS_HISTORY;
            var tenantId = modManager.getTenantId(tenantDomain);
            parameters = [serviceId, null, tenantDomain, type.TRIAL, status.EXPIRED, trialStartDate, trialEndDate,
                tenantId];
            modDb.executeQuery(queryString, parameters);

            queryString = SQL_QUERY_STRINGS.UPDATE_BILLING_STATUS;
            parameters = [status.EXTENDED, sqlDateFormat.format(extensionStartDate),
                sqlDateFormat.format(extendedEndDate), tenantDomain, serviceId, type.TRIAL];
            modDb.executeQuery(queryString, parameters);

            var tenantDisplayName = getDisplayNameFromTenantDomain((session.get("TENANT_INFO")).tenantDomain);
            if (tenantDisplayName != null) {
                setTimeout(function () {
                    try {
                        jagg.module("util").sendBillingTrialExtendedMailToUser(tenantDisplayName, serviceId,
                                extendedEndDate);
                        jagg.module("util").sendBillingTrialExtendedNotification(tenantDisplayName, serviceId,
                                extendedEndDate, customerRequest);
                        var isEnabled = cloudConfig.MailCampaignAddUserApi.enable_MailCampaignAddUserApi;
                        if (isEnabled == true) {
                            var modEvents = jagg.module("events");
                            var type = serviceId.toUpperCase();
                            type = type.substring(0, type.indexOf("_"));
                            var email = String(session.get("LOGGED_IN_USER_EMAIL"));
                            var data = "email=" + email + "&expiry_date=" + sqlDateFormat.format(extendedEndDate);
                            var URL;
                            if ("API".equals(type)) {
                                URL = cloudConfig.MailCampaignAddUserApi.apiCloudTrialExtension;
                            } else if ("APP".equals(type)) {
                                URL = cloudConfig.MailCampaignAddUserApi.appCloudTrialExtension;
                            }
                            var result = post(URL, data, {}, 'text');
                            var msg = result['data'];
                            var actionString = MAIL_CAMPAIGN + "-" + type + "-trialextension:";
                            var page = MAIL_CAMPAIGN;
                            var item = type;
                            var events = [];
                            if (MAIL_CAMPAIGN_SUBMISSION_SUCCESS.equals(msg)) {
                                actionString = actionString + "Success";
                                log.info(MAIL_CAMPAIGN + " api call Trial Extension is success for " + email);
                            } else {
                                actionString = actionString + "Failed";
                                log.error(MAIL_CAMPAIGN + " api call failed for the user " + jagg.getUser() + " " + msg);
                            }
                            var event = {};
                            event.item = item;
                            event.timestamp = new Date().getTime();
                            event.pageName = page;
                            event.action = actionString;
                            events[events.length] = event;
                            modEvents.publishUserActivity(events, jagg.getUser(), tenantDomain);
                        }
                        return true;
                    } catch (e) {
                        log.error("Error while sending notification for renewal of trial subscription : " + e);
                        return true;
                    } finally {
                        serviceId = null;
                        extendedEndDate = null;
                        tenantDisplayName = null;
                        customerRequest = null;
                    }
                }, 0);
            }
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

var addDays = function (date, days) {
    var cal = Packages.java.util.Calendar.getInstance();
    cal.setTime(date);
    cal.add(Packages.java.util.Calendar.DATE, days);
    return cal.getTime();
};

// Get the usage display period for api cloud
var getAPICloudUsageDisplayPeriod = function (serviceId) {
    return billingCoreService.usageDisplayPeriod(serviceId);
};

//Get Usage for a given time line
var getTenantUsage = function (fromDate, toDate) {
    var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;
    try {
        if (log.isDebugEnabled()) {
            log.debug("Getting tenant Usage for year from " + fromDate + " To " + toDate);
        }
        var usage = billingCoreService.getTenantUsageDataForGivenDateRange(tenantDomain, "API_CLOUD", fromDate, toDate);
        var accountUsage = {
            entry: []
        };
        for (var i = 0; i < usage.length; i++) {
            var item = usage[i];
            accountUsage.entry.push({
                "date": usage[i].getDate(),
                "maxUsage": item.getMaxDailyUsage(),
                "calls": item.getUsage(),
                "ratePlan": item.getRatePlan(),
                "isPaid": item.isPaidAccount(),
                "overage": item.getOverage()
            });
        }
        return accountUsage;
    } catch (e) {
        log.error("Error retrieving usage for : " + tenantDomain + " " + e);
        throw Error(e);
    }
};

// Add to mail campaign
function addCloudSubmissionToMailCampaign(email, domain, type) {
    var extensionStartDate = new Packages.java.util.Date();
    var extendedEndDate = addDays(extensionStartDate, parseInt(billingCoreService.getTrialPeriod(SUBSCRIPTION_API_CLOUD)));
    var sqlDateFormat = dateTimeFormatter(PARDOT_DATE_FORMAT);
    var expDate = sqlDateFormat.format(extendedEndDate);
    var type = type.substring(0, type.indexOf("_"));
    var modProfile = jagg.module("user/profile");
    var claims = modProfile.getProfile();
    // todo: get Lead source token
    var data;
    var URL;
    if (claims.firstname != "undefined" && claims.lastname != "undefined") {
        var firstName = claims.firstname;
        var lastName = claims.lastname;
        data = "email=" + email + "&first_name=" + firstName + "&last_name=" + lastName + "&expiry_date" + expDate +
        "&first_login=1";
    } else {
        data = "email=" + email + "&expiry_date" + expDate + "&first_login=1";
    }
    if ("API".equals(type)) {
        URL = cloudConfig.MailCampaignAddUserApi.apiCloudSubmission;
    } else if ("APP".equals(type)) {
        URL = cloudConfig.MailCampaignAddUserApi.appCloudSubmission;
    }
    var result = post(URL, data, {}, 'text');
    return result;
}

var verifyEvent = function (id) {
    try {
        var eventDataJson = JSON.parse(billingCoreService.callVendorMethod("getEventDetails", id));
        var description = "";
        if (eventDataJson.success) {
            var invoiceData = getBillingInvoiceData(SUPER_TENANT_ID, eventDataJson.data.data.object.invoice);
            var orgNameObj = JSON.parse(billingCoreService.getBilledOrganizationName(eventDataJson.data.data.object
                    .customer));
            if (orgNameObj.success) {
                description = orgNameObj.data;
            }
            var invoiceAddressObj = {};
            invoiceAddressObj.source = eventDataJson.data.data.object.source;
            invoiceAddressObj.description = description;
            invoiceAddressObj.email = eventDataJson.data.data.object.receipt_email;
            jagg.module("util").sendInvoiceEmail(invoiceData, eventDataJson.data.data.object
                    .receipt_email, invoiceAddressObj);

        } else {
            log.error(eventDataJson.message);
        }

    } catch (e) {
        log.error("Error retrieving the event " + e);
        throw Error(e);
    }
};

%>
