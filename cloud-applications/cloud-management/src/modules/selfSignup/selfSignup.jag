<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log("modules/selfSignup/selfSignup.jag");

var registryModule = jagg.module("registry");
var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var signupConfigRegistryPath = cloudConfig.selfSignUpProperties.signupConfigRegistryPath;
var signupConfigFilePath = signupConfigRegistryPath + cloudConfig.selfSignUpProperties.configFiles.signupConfigFile;
var workflowFileRegPath = signupConfigRegistryPath + cloudConfig.selfSignUpProperties.configFiles.workflowConfigFile;
var selfSignUpDefaultClass = cloudConfig.selfSignUpProperties.selfSignUpDefaultClass;
var selfSignUpApprovalClass = cloudConfig.selfSignUpProperties.selfSignUpApprovalClass;

//Method to check if the self sign up feature is enabled in the registry.
var checkSignupConfiguredInRegistry = function (username) {
    var carbon = require('carbon');
    var tenantDomain = jagg.module("manager").getTenantDomain();
    var message = "Error while checking if self sign up has been configured for the user" + username;
    var response = "error";
    var result = {
        error: true,
        message: message,
        signUpConfigured: response,
        statusCode: 500
    }
    try {
        var registryResources = registryModule.getResourceFromTenantSpace(signupConfigFilePath, tenantDomain, username);
        if (!registryResources.error) {
            response.contentType = "text/xml";
            var configContent = ((registryResources.response).content).toString();
            var selfSignUp = new XML(configContent);
            var signUpConfigResult = selfSignUp.EnableSignup.toString();
            message = "Successfully retrieved the registry resources for the user " + username;
            result = {
                error: false,
                message: message,
                signUpConfigured: signUpConfigResult,
                statusCode: 200
            }

        } else if("resourcePending".equals(registryResources.response)) {
            result = {
                error: false,
                message: registryResources.message,
                signUpConfigured: registryResources.response,
                statusCode: 404
            }
        }
    } catch (e) {
        message = message + ", error: " + e.message;
        log.error(message);
        log.error(e);
        result = {
            error: true,
            message: message,
            signUpConfigured: response,
            statusCode: 500
        }
    }
    return result;
};

//Method to write the tenant specific information to the registry files.
var populateRegistryFiles = function (fromAddress, contactEmail, userPassword, username,
                                      tenantDomain, approvalStatus) {
    var message = "Error while populating the registry files for the user " + username;
    var registryUpdateResult = "error";
    var result = {
        error: true,
        message: message,
        registryUpdateResult: registryUpdateResult,
        statusCode: 500
    }
    try {
        var selfSignUpClass;

        //configuring details to populate the sign up config registry file.
        var signupConfigmediaType = cloudConfig.selfSignUpProperties.configFileMediaTypes.signupConfig;
        var signupConfigBodyResult = constructSignupConfigFile(username, userPassword);
        if(!signupConfigBodyResult.error) {
            var singUpFileAddedToRegistry = registryModule.updateRegistryFile(signupConfigFilePath, signupConfigBodyResult.fileContent, signupConfigmediaType, tenantDomain, username);
        } else {
            message = signupConfigBodyResult.message;
        }
        //configuring details to populate the workflow extensions registry file.
        if (approvalStatus == "notApproved") {
            selfSignUpClass = selfSignUpDefaultClass;
        } else {
            selfSignUpClass = selfSignUpApprovalClass;
        }

        var workflowFileBodyResult = constructWorkflowExtensionFile(fromAddress, contactEmail, userPassword, username, selfSignUpClass);
        var workflowConfigMediaType = cloudConfig.selfSignUpProperties.configFileMediaTypes.workflowConfig;
        if(!workflowFileBodyResult.error) {
            var workflowFileAddedToRegistry = registryModule.updateRegistryFile(workflowFileRegPath, workflowFileBodyResult.fileContent, workflowConfigMediaType, tenantDomain, username);
        } else {
            message = workflowFileBodyResult.message;
        }
        //Checking if both the files were added to the registry for the completion of the configuration process.
        if (!singUpFileAddedToRegistry.error && !workflowFileAddedToRegistry.error) {
            message = "Successfully updated the registry files for the user " + username;
            registryUpdateResult = "signUpConfigured";
            result = {
                error: false,
                message: message,
                registryUpdateResult: registryUpdateResult,
                statusCode: 200
            }
        }
    } catch (e) {
        message = message + ", error:" + e.message;
        log.error(message);
        log.error(e);
        result = {
            error: true,
            message: message,
            registryUpdateResult: registryUpdateResult,
            statusCode: 500
        }
    }
    return result;
};

//Method that constructs the tenant specific workflow extension file for the self signup feature
var constructWorkflowExtensionFile = function (fromAddress, contactEmail, userPassword, username,
                                               selfSignUpClass) {
    var message = "Error while constructing the workflow extension file for the tenant " + username;
    var workflowExtensionFileContent = "";
    var result = {
        error: true,
        message: message,
        fileContent: workflowExtensionFileContent,
        statusCode: 500
    }
    try {
        var tenantDomain = jagg.module("manager").getTenantDomain();
        var registryResult = registryModule.getResourceFromTenantSpace(workflowFileRegPath, tenantDomain, username);
        if (!"error".equals(registryResult.response) && !"resourcePending".equals(registryResult.response)) {
            registryResult.response.contentType = "text/xml";
            var configContent = (registryResult.response.content).toString();
            workflowExtensionFileContent = new XML(configContent);
            var bpsBackendURL = cloudConfig.selfSignUpProperties.ServerUrls.bpsServiceURL;
            var serviceEndpoint = bpsBackendURL + "t/" + tenantDomain + "/UserSignupProcess/";
            var callbackURL = cloudConfig.selfSignUpProperties.ServerUrls.gatewayCallback;
            var key, value, element;
            var signupProperties = {};
            signupProperties.serviceEndpoint = serviceEndpoint;
            signupProperties.username = username;
            signupProperties.password = userPassword;
            signupProperties.fromAddress = fromAddress;
            signupProperties.contactEmail = contactEmail;
            signupProperties.callbackURL = callbackURL;

            //Removing any previous configurations done for the self signup feature.
            if (workflowExtensionFileContent.UserSignUp.Property.toString() != "") {
                workflowExtensionFileContent.UserSignUp = "";
            }

            //Replacing the executor class for the signup workflow.
            workflowExtensionFileContent.UserSignUp.@executor = selfSignUpClass;

            //Replacing the tenant specific properties needed for the configuration.
            for (key in signupProperties) {
                value = signupProperties[key];
                element = '<Property name="$KEY">$VALUE</Property>'.replace("$KEY", key).replace("$VALUE", value);
                element = new XML(element);
                workflowExtensionFileContent.UserSignUp.appendChild(element);
            }
            message = "Successfully completed populating the workflow-extension file for the user " + username;
            var result = {
                error: false,
                message: message,
                fileContent: workflowExtensionFileContent.toString(),
                statusCode: 200
            }
        }
    } catch (e) {
        message = message + ", error: "+ e.message;
        log.error(message);
        log.error(e);
        result = {
            error: true,
            message: message,
            fileContent: workflowExtensionFileContent,
            statusCode: 200
        }

    }
    return result;
};

//Method that constructs the tenant specific signup config file for the self signup feature.
var constructSignupConfigFile = function (username, userPassword) {
    var signupConfigFileContent = "";
    var message = "Error while constructing the signup config file for the user " + username;
    var result = {
        error: true,
        message: message,
        fileContent: signupConfigFileContent,
        statusCode: 500
    }
    try {
        var tenantDomain = jagg.module("manager").getTenantDomain();
        var registryResult = registryModule.getResourceFromTenantSpace(signupConfigFilePath, tenantDomain, username);
        if (!"error".equals(registryResult.response) && !"resourcePending".equals(registryResult.response)) {
            registryResult.response.contentType = "text/xml";
            var configContent = ((registryResult.response).content).toString();
            signupConfigFileContent = new XML(configContent);
            signupConfigFileContent.EnableSignup = true;
            signupConfigFileContent.AdminUserName = username;
            signupConfigFileContent.AdminPassword = userPassword;
            message = "Successfully constructed the signup config file for the user " + username;
            result = {
                error: false,
                message: message,
                fileContent: signupConfigFileContent.toString(),
                statusCode: 200
            }
        }
    } catch (e) {
        message = message + ", error: "+ e.message;
        log.error(message);
        log.error(e);
        result = {
            error: true,
            message: message,
            fileContent: signupConfigFileContent,
            statusCode: 500
        }
    }
    return result;
};

/**
 *This method will send a call to Rightwave once a user configure the self signup feature for API Cloud.
 *Through this process an email will be sent to the user to notify that the feature has been activated after 15 mins.
 **/
var addSelfSignupSubmissionToRightwave = function (email) {
    var jsonData;
    var username = jagg.getUser();
    var URL = cloudConfig.RightWaveAddUserApi.selfSignupSubmission;
    var isRightwaveAPIEnabled = cloudConfig.RightWaveAddUserApi.enable_RightWaveAddUserApi;
    if (isRightwaveAPIEnabled.toString() == "true") {
        if (email != "" && email != null) {
            jsonData = {
                "email": email
            };
            var data = "json=" + JSON.stringify(jsonData);
            var result = post(URL, data, {'Content-Type': 'application/json'}, RIGHTWAVE_RESPONSE_TYPE);
            var response = JSON.parse(result['data']);
            if (response != null) {
                var responseMessage = response.message;
                if (responseMessage != null && responseMessage == RIGHTWAVE_SUBMISSION_SUCCESS) {
                    log.info("API Cloud self signup feature activation for the user " + username + "was submitted successfully" +
                             + "to Rightwave ");
                } else {
                    log.error("An error occurred while submitting the self-signup feature activation for the user " + username +
                              + "to Rightwave. \n Error received from Rightwave :" + responseMessage);
                }
            } else {
                log.error("The response received from Rightwave was NULL when adding the self signup feature activation details " +
                          + "for the user " + username);
            }
        } else {
            log.error("Error while adding the self signup feature activation details to Rightwave since the user email was unavailable for " +
                      + "the user " + username);
        }
    } else {
        log.error("The Rightwave API has not been enabled at the moment. Unable to send the self signup feature activation details to " +
                  + "Rightwave for the user " + username);
    }
};

%>