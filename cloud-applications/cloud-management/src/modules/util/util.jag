<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");

var log = new Log('/modules/util/util.jag');
var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var userName =  session.get("LOGGED_IN_USER");

function getUserNameFromEmail(email){
	return email.replace(/@/g, ".");
}

var isUserInAdminRole = function () {

    var isAdmin = session.get("IS_USER_ADMIN");
    if (isAdmin != null){
        return isAdmin === 'true';
    } else {
        var tenantInfo = session.get("TENANT_INFO");
        var context=multitenancy.getPrivilegedCarbonContext();

            if (tenantInfo != null && userName != null) {
                try {
                  context.startTenantFlow();
                  var tenantManager = multitenancy.getTenantManager();
                  var userNameWithoutTenant = userName.substring(0, userName.lastIndexOf('@'));
                  var tenantDomain=tenantInfo.tenantDomain;
                  var tenantId = tenantManager.getTenantId(tenantDomain);
                  context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
                  context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
                  var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
                  isAdmin = realmService.getTenantUserRealm(tenantId).getUserStoreManager().isUserInRole(userNameWithoutTenant, ROLE_ADMIN);
                  session.put("IS_USER_ADMIN", String(isAdmin));
                  return isAdmin;
                } catch (e) {
                  log.error("Error while authenticating user for admin role. User: "+ userName +". Error:" +e);
                  return false;
                } finally {
                  context.endTenantFlow();
                }
            } else {
                return false;
            }
    }
};

//method to check if the user is only a subscriber for a tenant

var hasOnlySubscriberRole=function (userName)
{
    var isSubscriber=false;
    var roleCount=0;
    var roles;
    var result=false;
    var userRoles=[];
    var context=multitenancy.getPrivilegedCarbonContext();
    var cloudConfig =getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    //the default roles assigned for all users
    var types = cloudConfig.commonRoles;
    var tenantDomain=session.get("TENANT_DOMAIN");
    context.startTenantFlow();
    var userNameWithoutTenant = userName.substring(0, userName.lastIndexOf('@'));
    var tenantManager = multitenancy.getTenantManager();
    var tenantId = tenantManager.getTenantId(tenantDomain);
    context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
    var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
    roles = realmService.getTenantUserRealm(tenantId).getUserStoreManager().doGetRoleListOfUser(userNameWithoutTenant, "*");
    context.endTenantFlow();

    //to change the java array to a javascript array
    for(var x=0;x<roles.length;x++){
        userRoles[x]=roles[x];
    }

    //eliminating the default roles from the roleList
    for(var i=0;i<types.length;i++) {
        for(var j=0;j<userRoles.length;j++) {

            if (String(types[i]) == String(userRoles[j])) {
                userRoles.splice(j, 1);
                // roles[j]="";
            }
        }
    }

    //checking if the user has any other role than the subscriber role
    for(var c=0;c<userRoles.length;c++) {
        if (userRoles[c] == "subscriber") {
            isSubscriber = true;
        }
        else {
            roleCount++;
        }
    }

    if (roleCount == 0 && isSubscriber == true) {
        result=true;
    } else {
        result=false;
    }
    return result;
};

var sendBillingTrialExtendedNotification = function (tenantDomain, serviceId, endDate, customerRequest) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var body = getObjFromFile("/site/conf/emails/cloud_notification_on_trial_extension_email_body.txt");

    var mailEndDate = getEmailEffectiveDate(endDate);
    var service = productIdFromServiceId[serviceId];
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));


    body = body.replace("$tenant", tenantDomain).replace("$service", service)
            .replace("$end_date", mailEndDate).replace("$user", userEmail).replace("$customer_request", customerRequest);
    var subject = "WSO2 Cloud Notification [Billing] - Trial Account Extension";

    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingAccountCreationNotification = function (tenantDomain, service, plan, effectiveDate) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var body = getObjFromFile("/site/conf/emails/cloud_notification_on_paid_plan_subscription.txt");

    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));


    body = body.replace("$tenant", tenantDomain).replace("$service", service).replace("$plan", plan)
            .replace("$effective-date", mailEndDate).replace("$user", userEmail);
    var subject = "WSO2 Cloud Notification [Billing] - Paid Plan Subscription";

    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingPlanChangedNotification = function (tenantDomain, serviceId, effectiveDate, toPlan, fromPlan) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var body = getObjFromFile("/site/conf/emails/cloud_notification_on_change_plan.txt");

    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    var service = productIdFromServiceId[serviceId];
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));


    body = body.replace("$tenant", tenantDomain).replace("$service", service).replace("$to_plan", toPlan)
            .replace("$from_plan", fromPlan).replace("$effective-date", mailEndDate).replace("$user", userEmail);
    var subject = "WSO2 Cloud Notification [Billing] - Subscription Plan Changed";

    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingSubscriptionCancelledNotification = function (tenantDomain, serviceId, effectiveDate) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var body = getObjFromFile("/site/conf/emails/cloud_notification_on_cancel_subscription.txt");

    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    var service = productIdFromServiceId[serviceId];
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));

    body = body.replace("$tenant", tenantDomain).replace("$service", service)
            .replace("$effective-date", mailEndDate).replace("$user", userEmail);
    var subject = "WSO2 Cloud Notification [Billing] - Subscription Cancelled";

    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingAccountCreationEmail = function (displayName, service, planName, effectiveDate) {
    var body = getObjFromFile("/site/conf/emails/tenant_account_creation_email.body.txt");
    var subject = "WSO2 Cloud Services - WSO2 " + service + " Paid Plan Subscription";

    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    body = body.replace("$tenant", displayName).replace("$service", service).replace("$plan", planName)
            .replace("$effective-date", mailEndDate);
    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));
    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        var loggedInUserEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
        log.debug("Account creation email successfully sent to: " + loggedInUserEmail);
    }
    return true;
};

var sendBillingPlanChangedEmail = function (displayName, serviceId, planName, effectiveDate) {
    var body = jagg.module("util").getObjFromFile("/site/conf/emails/change_subscription_email_body.txt");

    var service = productIdFromServiceId[serviceId];
    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    body = body.replace("$tenant", displayName).replace("$plan", planName).replace("$service", service)
            .replace("$effective-date", mailEndDate);
    var subject = "WSO2 Cloud Services - WSO2 " + service + " Subscription Plan Successfully Changed";

    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));
    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        log.debug("Rate plan successfully changed for: " + displayName);
    }
    return true;
};

var sendSubscriptionCancellationEmail = function (displayName, service, endDate) {
    var body = jagg.module("util").getObjFromFile("/site/conf/emails/subscription_cancellation_user_mail_body.txt");

    var mailEndDate = getEmailEffectiveDate(endDate);
    body = body.replace("$tenant", displayName).replace("$service", service).replace("$end-date", mailEndDate);
    var subject = "WSO2 Cloud Services - WSO2 " + service + " Subscription Cancelled";

    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));
    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        log.debug(service+ "subscription successfully cancelled for: " + displayName);
    }
    return true;
};

var sendBillingTrialExtendedMailToUser = function (displayName, serviceId, endDate) {
    var body = getObjFromFile("/site/conf/emails/trial_extended_user_email_body.txt");
    var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;

    var mailEndDate = getEmailEffectiveDate(endDate);
    body = body.replace("$tenant", displayName).replace("$service", productIdFromServiceId[serviceId]).replace("$end_date", mailEndDate);
    var subject = "WSO2 Cloud Services - WSO2 " + productIdFromServiceId[serviceId] + " Trial Extended";

    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));

    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        log.debug("Trial extension notification sent to Tenant: " + tenantDomain);
    }
    return true;
};

var sendEmail = function (body, subject, receiverAddress) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

    var from = cloudConfig.registrationEmail.from;
    var senderEmail = cloudConfig.registrationEmail.username;
    var senderPort = parseInt(cloudConfig.registrationEmail.port);
    var senderPassword= cloudConfig.registrationEmail.password;
    var senderHost= cloudConfig.registrationEmail.host;
    var tls = cloudConfig.registrationEmail.tls.toString();

    var email = require('email');
    var sender;
    if (tls == "true") {
        sender = new email.Sender(senderHost, senderPort.toString(), senderEmail,senderPassword,"tls");
    } else {
        sender = new email.Sender(senderHost, senderPort.toString(), senderEmail,senderPassword);

    }
    sender.from = from;
    //By Default it will send to notifications
    if (receiverAddress == null){
        receiverAddress = cloudConfig.supportContact.to;
    }
    sender.to = receiverAddress;
    sender.subject = subject;
    sender.html = body;
    sender.send();
    return true;
};

var getEmailEffectiveDate = function (date) {
    var formatter =  dateTimeFormatter("EEE, dd MMM yyyy");
    //setting it to PST
    formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone("GMT-0800"));

    return formatter.format(date);
};

var addDays = function (date, days){
	var cal = Packages.java.util.Calendar.getInstance();
	cal.setTime(date);
	cal.add(Packages.java.util.Calendar.DATE, days);
	return cal.getTime();
};

var dateTimeFormatter = function (dateTimeFormat) {
	return new Packages.java.text.SimpleDateFormat(dateTimeFormat);
};

var getInviteeDirectUrl = function(userRoles) {
	var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
	var type = cloudConfig.subscriptions.type;
	var numOfSubscriptions = 0;
	var numOfCommonSubRoles = 0;
	userRoles = userRoles.split(',');
	var url = "../pages/index.jag";
	for(var i = 0; i < type.length; i++){
	    for(var x = 0; x < type[i].roleTypes.length ; x++){
			//checking if the invitee role is in the selected subscription
			if(userRoles.indexOf(type[i].roleTypes[x].roleName) > -1){
			    numOfCommonSubRoles++;
			    if( url != type[i].urls.cloudTypeUrl){
			        url = type[i].urls.cloudTypeUrl;
			        numOfSubscriptions++;
			    }
			    if(numOfSubscriptions > 1){
			        url = "../pages/index.jag";
			        return url;
			    }
			}
		}
	}
	//if the invited role is only subscriber, user will direct to the API store
	if(numOfCommonSubRoles == 1 && userRoles[0] == "subscriber" ){
	    var tenantDomain = session.get("TENANT_DOMAIN");
	    url = type[1].urls.storeUrl + "?tenant=" + tenantDomain;
	}

	return url;
};


function getDomainLessUserName(userName){
	if(userName.lastIndexOf('@') > 0) {
		return userName.substring(0, userName.lastIndexOf('@'));
	} else{
		return userName;
	}
};

function addUserToOT (email, pass, firstName, lastName) {
	try {
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

		var AUTH_EMAIL = cloudConfig.OTUserApi.auth_email;
		var AUTH_PASSWORD = cloudConfig.OTUserApi.auth_pass;
		var URL = cloudConfig.OTUserApi.add_url ;

		var enabled = cloudConfig.OTUserApi.enable;
		var data={
		    "firstname" : firstName,
		    "lastname" : lastName,
			"email" : email,
			"pass" : pass,
			"auth_email" : AUTH_EMAIL,
			"auth_pass" : AUTH_PASSWORD
		};
		if(enabled.toString() == "true") {
			var result = post(URL,data,undefined, 'text');
		}
		log.info("response "+stringify(result));

	} catch (e){
		log.error(e)
	}

};

function changeOTUserPass (email,pass) {
	log.info("Changing OT password for user: " + email);
    try {
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

		var AUTH_EMAIL = cloudConfig.OTUserApi.auth_email;
		var AUTH_PASSWORD = cloudConfig.OTUserApi.auth_pass;
		var URL = cloudConfig.OTUserApi.edit_pwd_url ;

		var enabled = cloudConfig.OTUserApi.enable;
		var data={
			"email" : email,
			"pass" : pass,
			"auth_email" : AUTH_EMAIL,
			"auth_pass" : AUTH_PASSWORD
		};
		if(enabled.toString() == "true") {
			var result = post(URL,data,undefined, 'text');
		}
		log.info("response "+stringify(result));

	} catch (e){
		log.error(e)
	}

};

function addUserToRightWave (email) {
	try {
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

		var URL = cloudConfig.RightWaveAddUserApi.cloudSignup;
		var is_enable = cloudConfig.RightWaveAddUserApi.enable_RightWaveAddUserApi;
        var data={
            "Email" : email,
            "TemplateFormName" : "reg",
            "TemplateFormID" : "WSO2-cloud-signup",
            "FormID" : "cust\\euser\\webform\\cloud-signup_template2.fdf"
        };
		if(is_enable.toString() == "true") {
            var result = post(URL,data,{'Content-Type': 'application/x-www-form-urlencoded'}, 'text');
		}
        log.info("Response from RightWave: \n" +result);
	} catch (e){
		log.error(e)
	}
};



function escapeSpecialChars (str) {
	return str.replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function (char) {
			switch (char) {
                case "\0":
                return "\\0";
                case "\x08":
                return "\\b";
                case "\x09":
                return "\\t";
                case "\x1a":
                return "\\z";
                case "\n":
                return "\\n";
                case "\r":
                return "\\r";
                default:
                return "\\" + char;
            }
    });
};

function escapeSpecialCharsXML (str) {
	return  str.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&apos;');
};

var generateUUId = function() {
    log.info("generating the UUID ");
	var d = new Date().getTime();
	var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
	    var r = (d + Math.random()*16)%16 | 0;
	    d = Math.floor(d/16);
	    return (c=='x' ? r : (r&0x7|0x8)).toString(16);
    });
    return uuid;
};

var getJsonFromFile = function(pathTofile) {
    var cloudConfig = application.get(pathTofile);
       if(cloudConfig==null)  {
        	if(log.isDebugEnabled()){
           		log.debug("Reading Json file : " + pathTofile);
           	}
           try{
               var file = new File(pathTofile);
               file.open("r");
               var data = file.readAll();
               cloudConfig = parse(data);
               file.close();
               application.put(pathTofile,cloudConfig);
           }catch (e) {
               log.error("Error while reading file " + pathTofile + "\n" + e);
               throw "Error while reading file " + pathTofile + "\n" + e;
           }
       }

   	return  cloudConfig;
};

var getObjFromFile = function(pathTofile) {
    var dataObj;
    if(log.isDebugEnabled()){
        log.debug("Reading file : " + pathTofile);
    }
    try{
        var file = new File(pathTofile);
        file.open("r");
        dataObj = file.readAll();
        file.close();
    }catch (e) {
        log.error("Error while reading file " + pathTofile + "\n" + e);
        throw "Error while reading file " + pathTofile + "\n" + e;
    }

   	return  dataObj;
};

var getLoadBalanceDataPublisher = function(loadBalancePublisherObjReference){

	var loadBalancingDataPublisher = application.get(loadBalancePublisherObjReference);

	if(loadBalancingDataPublisher == null)  {
            	if(log.isDebugEnabled()){
               		log.debug("Creating LoadBalancePublisher : " + loadBalancePublisherObjReference);
               	}

                var cloudMgtJsonObject = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
                var bamConfiguration = cloudMgtJsonObject.bamConfiguration;
                var host = bamConfiguration.hostUrls;
                var receiverUrls = "{" + host + "}";
                var userName = bamConfiguration.username;
                var password = bamConfiguration.password;

                var LoadBalancingDataPublisher = org.wso2.carbon.databridge.agent.thrift.lb.LoadBalancingDataPublisher;
                var ArrayList = java.util.ArrayList;
                var DataPublisherUtil = org.wso2.carbon.databridge.agent.thrift.util.DataPublisherUtil;
                var ReceiverGroup = org.wso2.carbon.databridge.agent.thrift.lb.ReceiverGroup;
                var DataPublisherHolder = org.wso2.carbon.databridge.agent.thrift.lb.DataPublisherHolder;
                try{
                allReceiverGroups = new ArrayList();
                receiverGroupUrls = DataPublisherUtil.getReceiverGroups(receiverUrls);

                for (var z = 0; z < receiverGroupUrls.size(); z++) {
                    dataPublisherHolders = new ArrayList();//ArrayList<DataPublisherHolder>
                    var urls = receiverGroupUrls.get(z).split(",");

                    for(var receiverUrl in urls){
                       dataPublisherHolderNode = new DataPublisherHolder(null, urls[receiverUrl], userName, password);
                       dataPublisherHolders.add(dataPublisherHolderNode);
                    }
                    group = new ReceiverGroup(dataPublisherHolders,true);
                    allReceiverGroups.add(group);
                }

                //Defining Stream
				var streamId = jagg.module("util").getUserActivityStreamId();

				//Defining LoadBalancePublisher
				loadBalancingDataPublisher = new LoadBalancingDataPublisher(allReceiverGroups);
				loadBalancingDataPublisher.addStreamDefinition(streamId,USER_ACTIVITY_STREAM,USER_ACTIVITY_STREAM_VERSION);
                application.put(loadBalancePublisherObjReference,loadBalancingDataPublisher);

                }catch(e){
                    log.error("Error while initializing LoadBalancingDataPublisher \n"+e);
                    throw "Error while initializing LoadBalancingDataPublisher \n"+e;
                }
    }

    return loadBalancingDataPublisher;
};

var getUserActivityStreamId = function(){
	 var streamId = "{" +
                     "  'name':'" + USER_ACTIVITY_STREAM + "'," +
                     "  'version':'" + USER_ACTIVITY_STREAM_VERSION + "'," +
                     "  'nickName': 'User_Activity'," +
                     "  'description': 'User activity in cloud web application'," +
                     "  'metaData':[" +
                     "          {'name':'clientType','type':'STRING'}" +
                     "  ]," +
                     "  'payloadData':[" +
                     "          {'name':'item','type':'STRING'}," +
                     "          {'name':'action','type':'STRING'}," +
                     "          {'name':'timestamp','type':'STRING'}," +
                     "          {'name':'pageName','type':'STRING'},"+
                     "          {'name':'username','type':'STRING'}," +
                     "          {'name':'tenantDomain','type':'STRING'}" +
                     "  ]" +
                     "}";

     return streamId;
};

var getDomainFromUsername = function(userName){
	if(userName.lastIndexOf('@') > 0) {
		return userName.substring((userName.lastIndexOf('@') + 1), userName.length);
	} else{
		return null;
	}
};

var getUserRoleDisplayName = function(userRoleKey){
    var cloudMgtJsonObject = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var subscriptionTypes = cloudMgtJsonObject.subscriptions.type;
    var userRoleDisplayName = "";

    //Merging clouds user roles
    var cloudUserRoles = [];

    for(var z = 0; z < subscriptionTypes.length; z++){
        cloudUserRoles = cloudUserRoles.concat(subscriptionTypes[z].roleTypes);
    }

    for(var i = 0; i < cloudUserRoles.length; i++){
        if(cloudUserRoles[i].roleName == userRoleKey){
            userRoleDisplayName = cloudUserRoles[i].displayRoles;
            break;
        }
    }

    return userRoleDisplayName;
};

%>

