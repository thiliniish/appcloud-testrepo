<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");

var log = new Log('modules.util.util.jag');
var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var username =  session.get("LOGGED_IN_USER");
var cloudmgtDAO = new Packages.org.wso2.carbon.cloud.common.CloudMgtDAO();

var getTenantDisplayName = function (tenantDomain) {
    var results = cloudmgtDAO.getDisplayNamefromTenant(tenantDomain);
    return String(results);
};

var isUserInAdminRole = function () {

    var isAdmin = session.get("IS_USER_ADMIN");
    if (isAdmin != null){
        return isAdmin === 'true';
    } else {
        var tenantInfo = session.get("TENANT_INFO");
        var context=multitenancy.getPrivilegedCarbonContext();

            if (tenantInfo != null && username != null) {
                try {
                  context.startTenantFlow();
                  var tenantManager = multitenancy.getTenantManager();
                  var tenantAwareUserName = modManager.getTenantAwareUsername(username);
                  var tenantDomain=tenantInfo.tenantDomain;
                  var tenantId = tenantManager.getTenantId(tenantDomain);
                  context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
                  context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
                  var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
                  isAdmin = realmService.getTenantUserRealm(tenantId).getUserStoreManager().isUserInRole(tenantAwareUserName, ROLE_ADMIN);
                  session.put("IS_USER_ADMIN", String(isAdmin));
                  return isAdmin;
                } catch (e) {
                  log.error("Error while authenticating user for admin role. User: " + username + ". Error:" + e);
                  return false;
                } finally {
                  context.endTenantFlow();
                }
            } else {
                return false;
            }
    }
};

//method to check if the session has been authenticated
var isSessionAuthenticated = function () {
    var isAuthenticated = false;
    try {
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
        var SSO_NAME = cloudConfig.SSORelyingParty.name;
        var security = require("sso");
        var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);
        var sessionId = session.getId();
        isAuthenticated = ssoRelyingParty.isSessionAuthenticated(sessionId);
    } catch (e) {
        log.error("Error while retrieving the session :" + e.message);
        log.error(e);
        throw Error(e);
    }
    return isAuthenticated;
};

var sendBillingTrialExtendedNotification = function (tenantDomain, serviceId, endDate, customerRequest) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var body = getObjFromFile("/site/conf/emails/cloud_notification_on_trial_extension_email_body.txt");

    var mailEndDate = getEmailEffectiveDate(endDate);
    var service = productIdFromServiceId[serviceId];
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));


    body = body.replace("$tenant", tenantDomain).replace("$service", service)
            .replace("$end_date", mailEndDate).replace("$user", userEmail).replace("$customer_request", customerRequest);
    var subject = "WSO2 Cloud Notification [Billing] - Trial Account Extension";

    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingAccountCreationNotification = function (tenantDomain, service, plan, effectiveDate) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var body = getObjFromFile("/site/conf/emails/cloud_notification_on_paid_plan_subscription.txt");

    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));


    body = body.replace("$tenant", tenantDomain).replace("$service", service).replace("$plan", plan)
            .replace("$effective-date", mailEndDate).replace("$user", userEmail);
    var subject = "WSO2 Cloud Notification [Billing] - Paid Plan Subscription";

    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingPlanChangedNotification = function (tenantDomain, serviceId, effectiveDate, toPlan, fromPlan, isUpgrade) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    if (isUpgrade) {
        var body = getObjFromFile("/site/conf/emails/cloud_notification_on_plan_upgrade.txt");
    } else {
        var body = getObjFromFile("/site/conf/emails/cloud_notification_on_plan_downgrade.txt");
    }
    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    var service = productIdFromServiceId[serviceId];
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
    body = body.replace("$tenant", tenantDomain).replace("$service", service).replace("$to_plan", toPlan)
            .replace("$from_plan", fromPlan).replace("$effective-date", mailEndDate).replace("$user", userEmail);
    var subject = "WSO2 Cloud Notification [Billing] - Subscription Plan Changed";
    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingSubscriptionCancelledNotification = function (tenantDomain, serviceId, effectiveDate) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var body = getObjFromFile("/site/conf/emails/cloud_notification_on_cancel_subscription.txt");

    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    var service = productIdFromServiceId[serviceId];
    var userEmail = String(session.get("LOGGED_IN_USER_EMAIL"));

    body = body.replace("$tenant", tenantDomain).replace("$service", service)
            .replace("$effective-date", mailEndDate).replace("$user", userEmail);
    var subject = "WSO2 Cloud Notification [Billing] - Subscription Cancelled";

    var notificationMailAdd =  cloudConfig.supportContact.to;
    sendEmail(body, subject, notificationMailAdd);
    return true;
};

var sendBillingAccountCreationEmail = function (displayName, service, planName, effectiveDate) {
    var body = getObjFromFile("/site/conf/emails/tenant_account_creation_email.body.txt");
    var subject = "WSO2 Cloud Services - WSO2 " + service + " Paid Plan Subscription";

    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    body = body.replace("$tenant", displayName).replace("$service", service).replace("$plan", planName)
            .replace("$effective-date", mailEndDate);
    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));
    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        var loggedInUserEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
        log.debug("Account creation email successfully sent to: " + loggedInUserEmail);
    }
    return true;
};

var sendBillingPlanChangedEmail = function (displayName, serviceId, planName, effectiveDate, isUpgrade) {

    if (isUpgrade) {
        var body = jagg.module("util").getObjFromFile("/site/conf/emails/upgrade_subscription_email_body.txt");
    } else {
        var body = jagg.module("util").getObjFromFile("/site/conf/emails/downgrade_subscription_email_body.txt");
    }
    var service = productIdFromServiceId[serviceId];
    var mailEndDate = getEmailEffectiveDate(effectiveDate);
    body = body.replace("$tenant", displayName).replace("$plan", planName).replace("$service", service)
            .replace("$effective-date", mailEndDate);
    var subject = "WSO2 Cloud Services - WSO2 " + service + " Subscription Plan Successfully Changed";

    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));
    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        log.debug("Rate plan successfully changed for: " + displayName);
    }
    return true;
};

var sendSubscriptionCancellationEmail = function (displayName, service, endDate) {
    var body = jagg.module("util").getObjFromFile("/site/conf/emails/subscription_cancellation_user_mail_body.txt");

    var mailEndDate = getEmailEffectiveDate(endDate);
    body = body.replace("$tenant", displayName).replace("$service", service).replace("$end-date", mailEndDate);
    var subject = "WSO2 Cloud Services - WSO2 " + service + " Subscription Cancelled";

    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));
    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        log.debug(service+ "subscription successfully cancelled for: " + displayName);
    }
    return true;
};

var sendInvoiceEmail = function(jsonContent, sender, invoiceObj) {
    var body = jagg.module("util").getObjFromFile("/site/conf/emails/billing_invoice.txt");
    var data = "";
    for (var x = 0; x < jsonContent.invoiceItems.length; x++) {
        data = data + "<tr><td>" + jsonContent.invoiceItems[x].subscriptionName + "</td> " +
                "<td>" + jsonContent.invoiceItems[x].chargeName + "</td>" +
                "<td>" + jsonContent.invoiceItems[x].servicePeriod + "</td>" +
                "<td>" + jsonContent.invoiceItems[x].amount + "</td>" +
                "</tr>";
    }

    body = body.replace("$data", data).replace("$Description", invoiceObj.description).replace("$address_line1",
            invoiceObj.source.address_line1).replace("$address_line2", invoiceObj.source.address_line2)
            .replace("$address_city", invoiceObj.source.address_city)
            .replace("$address_state", invoiceObj.source.address_state)
            .replace("$address_zip", invoiceObj.source.address_zip)
            .replace("$email", invoiceObj.email)
            .replace("$address_country", invoiceObj.source.address_country);

    body = body.replace("$invoiceId", jsonContent.invoiceNumber).replace("$date", jsonContent.invoiceDate)
            .replace("$customerAccount", jsonContent.accountName).replace("$total", jsonContent.amount);
    body = body.replace(/null/g, "");

    var subject = "Your payment was successfully processed";
    var userMail = sender;
    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var cloudMailAddress = cloudConfig.invoiceEmails;
    var emailList = null;
    if (cloudMailAddress != null) {
        emailList = cloudMailAddress.split(",");
    }
    sendEmailWithBCC(body, subject, userMail, emailList, null, null);
    return true;
};

var sendBillingTrialExtendedMailToUser = function (displayName, serviceId, endDate) {
    var body = getObjFromFile("/site/conf/emails/trial_extended_user_email_body.txt");
    var tenantDomain = (session.get("TENANT_INFO")).tenantDomain;

    var mailEndDate = getEmailEffectiveDate(endDate);
    body = body.replace("$tenant", displayName).replace("$service", productIdFromServiceId[serviceId]).replace("$end_date", mailEndDate);
    var subject = "WSO2 Cloud Services - WSO2 " + productIdFromServiceId[serviceId] + " Trial Extended";

    var userMail = String(session.get("LOGGED_IN_USER_EMAIL"));

    sendEmail(body, subject, userMail);
    if (log.isDebugEnabled()) {
        log.debug("Trial extension notification sent to Tenant: " + tenantDomain);
    }
    return true;
};

var sendEmail = function (body, subject, receiverAddress) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

    var from = cloudConfig.registrationEmail.from;
    var senderEmail = cloudConfig.registrationEmail.username;
    var senderPort = parseInt(cloudConfig.registrationEmail.port);
    var senderPassword= cloudConfig.registrationEmail.password;
    var senderHost= cloudConfig.registrationEmail.host;
    var tls = cloudConfig.registrationEmail.tls.toString();

    var email = require('email');
    var sender;
    if (tls == "true") {
        sender = new email.Sender(senderHost, senderPort.toString(), senderEmail,senderPassword,"tls");
    } else {
        sender = new email.Sender(senderHost, senderPort.toString(), senderEmail,senderPassword);

    }
    sender.from = from;
    //By Default it will send to notifications
    if (receiverAddress == null){
        receiverAddress = cloudConfig.supportContact.to;
    }
    sender.to = receiverAddress;
    sender.subject = subject;
    sender.html = body;
    sender.send();
    return true;
};

var sendEmailWithAttachment = function(body, subject, receiverAddress, attachment) {
    sendEmailWithBCC(body, subject, receiverAddress, attachment, null, null);
};

var sendEmailWithBCC = function (body, subject, receiverAddress, attachment, bccAddress, ccAddress) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var from = cloudConfig.registrationEmail.from;
    var senderEmail = cloudConfig.registrationEmail.username;
    var senderPort = cloudConfig.registrationEmail.port;
    var senderPassword = cloudConfig.registrationEmail.password;
    var senderHost = cloudConfig.registrationEmail.host;
    var tls = cloudConfig.registrationEmail.tls.toString();

    var EmailSender = Packages.org.wso2.carbon.cloud.common.email.EmailSender;
    var emailSender;
    if (tls == "true") {
        emailSender = new EmailSender(senderHost, senderPort, senderEmail, senderPassword, true);
    } else {
        emailSender = new EmailSender(senderHost, senderPort, senderEmail, senderPassword, false);
    }

    emailSender.setFrom(from);
    //By Default it will send to notifications
    if (receiverAddress == null) {
        receiverAddress = cloudConfig.supportContact.to;
    }
    if (bccAddress != null) {
        emailSender.setBCC(bccAddress);
    }
    if (ccAddress != null) {
        emailSender.setCC(ccAddress);
    }
    emailSender.setTo(receiverAddress);
    emailSender.setSubject(subject);
    emailSender.setHTML(body);
    if (attachment) {
        emailSender.addAttachment(attachment.path, attachment.cid, attachment.contentType, attachment.fileName);
    }
    emailSender.send();
    return true;
};

var getEmailEffectiveDate = function (date) {
    var formatter =  dateTimeFormatter("EEE, dd MMM yyyy");
    //setting it to PST
    formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone("GMT-0800"));

    return formatter.format(date);
};

var addDays = function (date, days){
	var cal = Packages.java.util.Calendar.getInstance();
	cal.setTime(date);
	cal.add(Packages.java.util.Calendar.DATE, days);
	return cal.getTime();
};

var dateTimeFormatter = function (dateTimeFormat) {
	return new Packages.java.text.SimpleDateFormat(dateTimeFormat);
};

var getInviteeDirectUrl = function(userRoles) {
	var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
	var type = cloudConfig.subscriptions.type;
	var numOfSubscriptions = 0;
	var numOfCommonSubRoles = 0;
	userRoles = userRoles.split(',');
	var url = "../pages/index.jag";
	for(var i = 0; i < type.length; i++){
	    for(var x = 0; x < type[i].roleTypes.length ; x++){
			//checking if the invitee role is in the selected subscription
			if(userRoles.indexOf(type[i].roleTypes[x].roleName) > -1){
			    numOfCommonSubRoles++;
			    if( url != type[i].urls.cloudTypeUrl){
			        url = type[i].urls.cloudTypeUrl;
			        numOfSubscriptions++;
			    }
			    if(numOfSubscriptions > 1){
			        url = "../pages/index.jag";
			        return url;
			    }
			}
		}
	}
	//if the invited role is only subscriber, user will direct to the API store
	if(numOfCommonSubRoles == 1 && userRoles[0] == "subscriber" ){
	    var tenantDomain = session.get("TENANT_DOMAIN");
	    url = cloudConfig.ServerUrls.apiManager + "store?tenant=" + tenantDomain;
	}

	return url;
};

//Method which validates the email.
function validateEmail (email) {
    if (email != null && email != "") {
        var emailValidationResult = EMAIL_VALIDATION_REGEX.test(email);
        if (email.indexOf("+") != -1 || !emailValidationResult) {
            return {
                error: true,
                message: "The email " + email + " is not valid. Please provide a valid email address and try again",
                status: 500
            };
        } else {
            return {
                error: false,
                message: "The email " + email + " is valid",
                status: 200
            };
        }
    } else {
        return {
            error: true,
            message: "Please provide a value for the userEmail and try again",
            status: 500
        };
    }
}

//Method which validates the name string.
function validateNameString (value) {
    if (value != null && value != "") {
        var nameValidationResult = NAME_FIELD_VALIDATION_REGEX.test(value);
        if (nameValidationResult) {
            return {
                error: false,
                message: "The provided name field value is valid",
                status: 200
            };
        } else {
            return {
                error: true,
                message: "The provided name field value is invalid, Please provide only alphanumeric characters and try again",
                status: 500
            };
        }
    } else {
        return {
            error: true,
            message: "Please provide a value for the name fields and try again",
            status: 500
        };
    }
}

//Method which validates if the provided user roles are valid cloud user roles.
function validateUserRoles (userRoles) {
    var userRolesArray = [];
    if (userRoles != null && userRoles != "") {
        if (userRoles.indexOf(',') > -1) {
            userRolesArray = userRoles.split(',');
        } else {
            userRolesArray.push(userRoles);
        }
        var roleCount = userRolesArray.length;
        var cloudValidRoleCount = 0;
        var allCloudRoles = jagg.module("tenant").getAllCloudRoles();

        if (userRolesArray.length > 0 && allCloudRoles.length > 0) {
            // Logic to if the provided roles are valid cloud roles
            for (var i = 0; i < allCloudRoles.length; i++) {
                for (var j = 0; j < userRolesArray.length; j++) {
                    if (allCloudRoles[i].roleName == userRolesArray[j]) {
                        cloudValidRoleCount++;
                    }
                }
            }
        }

        if (cloudValidRoleCount == roleCount) {
            return {
                error: false,
                message: "All provided roles are valid",
                status: 200
            };
        } else {
            return {
                error: true,
                message: "Provided roles are not valid, Please make sure the provided roles are valid roles of the cloud and try again",
                status: 500
            };
        }
    } else {
        return {
            error: true,
            message: "Please provide a value for the user roles field and try again",
            status: 500
        };
    }
}

//Validates if the provided password meets the requirements of the WSO2 Cloud.
function validatePassword (password) {
    if (password != null && password != "") {
        var passwordValidationResult = (PASSWORD_CHARACTER_TYPE_VALIDATION_REGEX.test(password) && PASSWORD_STRENGTH_VALIDATION_REGEX.test(password));
        if (passwordValidationResult) {
            return {
                error: false,
                message: "The provided password is valid",
                status: 200
            };
        } else {
            return {
                error: true,
                message: "The provided password does not meet the basic requirements, Please try again with a valid password",
                status: 500
            };
        }
    } else {
        return {
            error: true,
            message: "Please provide a value for the password field and try again",
            status: 500
        };
    }
}

function addUserToOT (email, pass, firstName, lastName) {
	try {
        log.info("Adding user [ " + email + " ] to OT");
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

		var AUTH_EMAIL = cloudConfig.OTUserApi.auth_email;
		var AUTH_PASSWORD = cloudConfig.OTUserApi.auth_pass;
		var URL = cloudConfig.OTUserApi.add_url ;

		var enabled = cloudConfig.OTUserApi.enable;
		var data={
		    "firstname" : firstName,
		    "lastname" : lastName,
			"email" : email,
			"pass" : pass,
			"auth_email" : AUTH_EMAIL,
			"auth_pass" : AUTH_PASSWORD
		};
		if(enabled) {
			var result = post(URL,data,undefined, 'text');
		}
        log.info("Response from OT - " + stringify(result));
	} catch (e){
		log.error(e)
	}
};

/**
 * Returns add user to OT clouduser role
 * @param  email
 */
var addUserToOTCloudUserRole = function (email) {

    var cloudConfig = getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var enabled = cloudConfig.OTAdminServiceApi.enable;
    if (!enabled) {
        log.info("Adding users to clouduser role disabled");
        return;
    }
    log.info("Adding user [ " + email + " ] to OT cloudUser role");
    var base64Util = new Packages.org.apache.commons.codec.binary.Base64();
    var username = cloudConfig.OTAdminServiceApi.auth_user;
    var password = cloudConfig.OTAdminServiceApi.auth_pass;
    var cloudUserRole = cloudConfig.OTCloudUserRole;
    var URL = cloudConfig.OTAdminServiceApi.serviceURL;
    var ws = require("ws");
    var updateRolesOfUser = new ws.WSRequest();
    var encodedCredentials = base64Util.encodeBase64String((new java.lang.String(username + ":" + password)).getBytes()).trim();
    var authHeaderValue = String("Basic " + encodedCredentials);
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "urn:updateUsersOfRole";
    options.timeout = 90000;
    options["HTTPHeaders"] = [
        {
            name: "Authorization", value: authHeaderValue
        }
    ];
    var payload = '<p:updateUsersOfRole xmlns:p="http://org.apache.axis2/xsd">' +
        '<roleName>' + cloudUserRole + '</roleName>' +
        '<userList>' +
        '<itemName xmlns="http://common.mgt.user.carbon.wso2.org/xsd">' + email + '</itemName>' +
        '<selected xmlns="http://common.mgt.user.carbon.wso2.org/xsd">true</selected>' +
        '</userList>' +
        '</p:updateUsersOfRole>';
    try {
        var endPoint = URL + "UserAdmin";
        updateRolesOfUser.open(options, endPoint, false);
        updateRolesOfUser.send(payload);
        log.info("User [ " + email + " ] is added to OT cloudUser role");
    } catch (e) {
        log.error("Error while adding user [ " + email + " ] to OT cloudUser role");
        log.error(e);
    }
};

function updateUserProfileInOT(email, firstName, lastName) {
    try {
        log.info("Updating profile of user [ " + email + " ] in OT");

        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
        var AUTH_EMAIL = cloudConfig.OTUserApi.auth_email;
        var AUTH_PASSWORD = cloudConfig.OTUserApi.auth_pass;
        var URL = cloudConfig.OTUserApi.update_url;
        var enabled = cloudConfig.OTUserApi.enable;
        var data = {
            "category": "Personal Information",
            "profile_first_name": firstName,
            "profile_last_name": lastName
        };
        var payload = {
            "uid": email,
            "data": stringify(data),
            "auth_email": AUTH_EMAIL,
            "auth_pass": AUTH_PASSWORD
        };

        if (enabled) {
            var response = post(URL, payload, {});
            var httpStatus = response.xhr.statusText;
            var responseData;

            if (response.data) {
                responseData = new XML(response.data);
            }

            if (httpStatus == "OK" && responseData && responseData == 1) {
                return;
            } else {
                var response = { "data ": response.data, "statusText": response.xhr.statusText};
                var errorMsg = "Error while updating the user profile of "
                                       + email + " in OT. Response from OT : " + stringify(response);
                log.error(errorMsg);
            }
        }
    } catch (e) {
        var errorMsg = "Error while updating the user profile of " + email + " in OT";
        log.error(errorMsg);
        log.error(e)
    }
};

//<TODO>Needs to be modified for Pardot</TODO>
function getLeadSourceToken (campaign) {
    var tokenId = null;
    try {
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
        var types = cloudConfig.subscriptions.type;
        var URL;
        if ("signUp".equals(campaign)) {
            URL = cloudConfig.RightWaveAddUserApi.signupLeadSource;
        } else if ("upgrade".equals(campaign)) {
            URL =   cloudConfig.RightWaveAddUserApi.upgradeLeadSource;
        } else {
            for (var i = 0; i < types.length; i++) {
                if (convertValue(types[i].id).equals(campaign)) {
                    URL = types[i].urls.leadSourceUrl;
                }
            }
        }
        var result = get(URL);
        var data = parse(result.data);
        tokenId = data.tokenid;
    } catch (e) {
        log.error("Error retrieving lead source token ");
        log.error(e);
        throw "Error retrieving lead source token " + e;
    }
    return tokenId;
};

function convertValue (value) {
    var val = value.toUpperCase();
    return val.substring(0, val.indexOf("_"));
};

function changeOTUserPass (email,pass) {
	log.info("Changing the OT password for user [ " + email +" ]");
    try {
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

		var AUTH_EMAIL = cloudConfig.OTUserApi.auth_email;
		var AUTH_PASSWORD = cloudConfig.OTUserApi.auth_pass;
		var URL = cloudConfig.OTUserApi.edit_pwd_url ;

		var enabled = cloudConfig.OTUserApi.enable;
		var data={
			"email" : email,
			"pass" : pass,
			"auth_email" : AUTH_EMAIL,
			"auth_pass" : AUTH_PASSWORD
		};
		if(enabled) {
			var result = post(URL,data,undefined, 'text');
		}
		log.info("response "+stringify(result));

	} catch (e){
		log.error(e)
	}

};

function escapeSpecialChars (str) {
	return str.replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function (char) {
			switch (char) {
                case "\0":
                return "\\0";
                case "\x08":
                return "\\b";
                case "\x09":
                return "\\t";
                case "\x1a":
                return "\\z";
                case "\n":
                return "\\n";
                case "\r":
                return "\\r";
                default:
                return "\\" + char;
            }
    });
};

function escapeSpecialCharsXML (str) {
	return  str.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&apos;');
};

var generateUUId = function() {
	var d = new Date().getTime();
	var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
	    var r = (d + Math.random()*16)%16 | 0;
	    d = Math.floor(d/16);
	    return (c=='x' ? r : (r&0x7|0x8)).toString(16);
    });
    return uuid;
};

var getJsonFromFile = function(pathTofile) {
    var cloudConfig = application.get(pathTofile);
       if(cloudConfig==null)  {
        	if(log.isDebugEnabled()){
           		log.debug("Reading Json file : " + pathTofile);
           	}
           try{
               var file = new File(pathTofile);
               file.open("r");
               var data = file.readAll();
               cloudConfig = parse(data);
               file.close();
               application.put(pathTofile,cloudConfig);
           }catch (e) {
               log.error("Error while reading file " + pathTofile + "\n" + e);
               throw "Error while reading file " + pathTofile + "\n" + e;
           }
       }

   	return  cloudConfig;
};

var getObjFromFile = function(pathTofile) {
    var dataObj;
    if(log.isDebugEnabled()){
        log.debug("Reading file : " + pathTofile);
    }
    try{
        var file = new File(pathTofile);
        file.open("r");
        dataObj = file.readAll();
        file.close();
    }catch (e) {
        log.error("Error while reading file " + pathTofile + "\n" + e);
        throw "Error while reading file " + pathTofile + "\n" + e;
    }

   	return  dataObj;
};

var getLoadBalanceDataPublisher = function(loadBalancePublisherObjReference){

	var loadBalancingDataPublisher = application.get(loadBalancePublisherObjReference);

	if(loadBalancingDataPublisher == null)  {
            	if(log.isDebugEnabled()){
               		log.debug("Creating LoadBalancePublisher : " + loadBalancePublisherObjReference);
               	}

                var cloudMgtJsonObject = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
                var bamConfiguration = cloudMgtJsonObject.bamConfiguration;
                var host = bamConfiguration.hostUrls;
                var receiverUrls = "{" + host + "}";
                var username = bamConfiguration.username;
                var password = bamConfiguration.password;

                var LoadBalancingDataPublisher = org.wso2.carbon.databridge.agent.thrift.lb.LoadBalancingDataPublisher;
                var ArrayList = java.util.ArrayList;
                var DataPublisherUtil = org.wso2.carbon.databridge.agent.thrift.util.DataPublisherUtil;
                var ReceiverGroup = org.wso2.carbon.databridge.agent.thrift.lb.ReceiverGroup;
                var DataPublisherHolder = org.wso2.carbon.databridge.agent.thrift.lb.DataPublisherHolder;
                try{
                allReceiverGroups = new ArrayList();
                receiverGroupUrls = DataPublisherUtil.getReceiverGroups(receiverUrls);

                for (var z = 0; z < receiverGroupUrls.size(); z++) {
                    dataPublisherHolders = new ArrayList();//ArrayList<DataPublisherHolder>
                    var urls = receiverGroupUrls.get(z).split(",");

                    for(var receiverUrl in urls){
                       dataPublisherHolderNode = new DataPublisherHolder(null, urls[receiverUrl], username, password);
                       dataPublisherHolders.add(dataPublisherHolderNode);
                    }
                    group = new ReceiverGroup(dataPublisherHolders,true);
                    allReceiverGroups.add(group);
                }

                //Defining Stream
				var streamId = jagg.module("util").getUserActivityStreamId();

				//Defining LoadBalancePublisher
				loadBalancingDataPublisher = new LoadBalancingDataPublisher(allReceiverGroups);
				loadBalancingDataPublisher.addStreamDefinition(streamId,USER_ACTIVITY_STREAM,USER_ACTIVITY_STREAM_VERSION);
                application.put(loadBalancePublisherObjReference,loadBalancingDataPublisher);

                }catch(e){
                    log.error("Error while initializing LoadBalancingDataPublisher \n"+e);
                    throw "Error while initializing LoadBalancingDataPublisher \n"+e;
                }
    }

    return loadBalancingDataPublisher;
};

var getUserActivityStreamId = function(){
	 var streamId = "{" +
                     "  'name':'" + USER_ACTIVITY_STREAM + "'," +
                     "  'version':'" + USER_ACTIVITY_STREAM_VERSION + "'," +
                     "  'nickName': 'User_Activity'," +
                     "  'description': 'User activity in cloud web application'," +
                     "  'metaData':[" +
                     "          {'name':'clientType','type':'STRING'}" +
                     "  ]," +
                     "  'payloadData':[" +
                     "          {'name':'item','type':'STRING'}," +
                     "          {'name':'action','type':'STRING'}," +
                     "          {'name':'timestamp','type':'STRING'}," +
                     "          {'name':'pageName','type':'STRING'},"+
                     "          {'name':'username','type':'STRING'}," +
                     "          {'name':'tenantDomain','type':'STRING'}" +
                     "  ]" +
                     "}";

     return streamId;
};

var getUserRoleDisplayName = function(userRoleKey){
    var cloudMgtJsonObject = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var subscriptionTypes = cloudMgtJsonObject.subscriptions.type;
    var userRoleDisplayName = "";

    //Merging clouds user roles
    var cloudUserRoles = [];

    for(var z = 0; z < subscriptionTypes.length; z++){
        cloudUserRoles = cloudUserRoles.concat(subscriptionTypes[z].roleTypes);
    }

    for(var i = 0; i < cloudUserRoles.length; i++){
        if(cloudUserRoles[i].roleName == userRoleKey){
            userRoleDisplayName = cloudUserRoles[i].displayRoles;
            break;
        }
    }

    return userRoleDisplayName;
};

var getRoleForGivenDisplayName = function(displayName) {
    var cloudMgtJsonObject = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var subscriptionTypes = cloudMgtJsonObject.subscriptions.type;
    var userRole = "";

    //Merging clouds user roles
    var cloudUserRoles = [];
    for (var z = 0; z < subscriptionTypes.length; z++) {
        cloudUserRoles = cloudUserRoles.concat(subscriptionTypes[z].roleTypes);
    }

    for (var i = 0; i < cloudUserRoles.length; i++) {
        if (cloudUserRoles[i].displayRoles == displayName) {
            userRole = cloudUserRoles[i].roleName;
            break;
        }
    }
    return userRole;
};

/**
 * Remove duplicate Strings in a given array and returns an array with distinct Strings
 * @param {Array} array of Strings
 * @return {Array} an array of distinct strings
 */
function getDistinctStringsInArray(array) {
    for (var i = 0; i < array.length; ++i) {
        for (var j = i + 1; j < array.length; ++j) {
            if (stringify(array[i]) === stringify(array[j])) {
                array.splice(j--, 1);
            }
        }
    }
    return array;
};

function getAuthHeader(username) {
    var KeyStoreManager = Packages.org.wso2.carbon.core.util.KeyStoreManager;
    var RSAPrivateKey = Packages.java.security.interfaces.RSAPrivateKey;
    var JWTClaimsSet = Packages.com.nimbusds.jwt.JWTClaimsSet;
    var RSASSASigner = Packages.com.nimbusds.jose.crypto.RSASSASigner;
    var JWSHeader = Packages.com.nimbusds.jose.JWSHeader;
    var JWSAlgorithm = Packages.com.nimbusds.jose.JWSAlgorithm;
    var SignedJWT = Packages.com.nimbusds.jwt.SignedJWT;
    var Base64Utils = Packages.org.apache.axiom.util.base64.Base64Utils;
    //Get the filesystem keystore default primary certificate
    var keyStoreManager = KeyStoreManager.getInstance(SUPER_TENANT_ID);
    try {
        keyStoreManager.getDefaultPrimaryCertificate();
        var rsaPrivateKey = new RSAPrivateKey(keyStoreManager.getDefaultPrivateKey());
        var signer = new RSASSASigner(rsaPrivateKey);
        var claimsSet = new JWTClaimsSet();
        claimsSet.setClaim(SIGNED_JWT_AUTH_USERNAME, username);
        var signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.RS512), claimsSet);
        signedJWT.sign(signer);
        return "Bearer " + Base64Utils.encode(signedJWT.serialize().getBytes());
    } catch (e) {
        var msg = "Failed to get primary default certificate";
        log.error(msg);
        log.error(e);
        throw Error(msg, e);
    }
}

/**
 * Check whether user is an admin user in carbon super tenant.
 * username - Tenant aware username
 */
function isCarbonSuperAdmin(username) {
    var carbon = require('carbon');
    var server = carbon.server;
    var tenantId = -1234;
    var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
    //Check whether the user is Tenant Admin
    var isAdmin = realmService.getTenantUserRealm(tenantId).getUserStoreManager().isUserInRole(username, ROLE_ADMIN);
    return isAdmin;
};

/**
 Returns the GatewayMigrationProperties from cloudmgt configs
 */
function getGatewayMigrationProperties() {
    var cloudConfigFile = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var gatewayMigrationProperties = null;
    var type = cloudConfigFile.subscriptions.type;
    for (var i = 0; i < type.length; i++) {
        if (type[i].id == SUBSCRIPTION_API_CLOUD) {
            gatewayMigrationProperties = type[i].gatewayMigrationProperties;
            break;
        }
    }
    return gatewayMigrationProperties;
}

/**
 Method to send email to Cloud after successful claim of complimentary account.
 */
var sendComplimentaryAccountClaimedNotification = function(email, supportAccount, username) {
    try {
        var emailBody = getObjFromFile("/site/conf/emails/complimentary_account_claim_success.txt");
        var subject = "WSO2 Cloud Notification [Complimentary API Cloud account claimed] - " + supportAccount;
        emailBody = emailBody.replace("$email", email);
        emailBody = emailBody.replace("$supportAccount", supportAccount);
        emailBody = emailBody.replace("$username", username);
        sendEmail(emailBody, subject);
    } catch (e) {
        log.error("Error while sending email for claiming complimentary account for username: "  + username);
        throw Error(e);
    }
};

/**
 Method to send email to Cloud incase of a failure while creating the complimentary account.
 */
var sendFailureNotification = function(emailTemplateFilePath, subject, emailBodyJson) {
    var emailBody = getObjFromFile(emailTemplateFilePath);
    var emailBodyKeys = Object.keys(emailBodyJson);
    for (var i = 0; i < emailBodyKeys.length; i++) {
        var emailBodyKey = emailBodyKeys[i];
        emailBody = emailBody.replace(emailBodyKey, emailBodyJson[emailBodyKey]);
    }
    sendEmail(emailBody, subject);
};

%>

