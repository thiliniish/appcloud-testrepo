<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
 
    var log = new Log();
    var modManager = jagg.module("manager");
    var carbon = require('carbon');
    var server = carbon.server;
    var multitenancy = carbon.multitenancy;

    var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

    var IS_URL =  cloudConfig.ServerUrls.identity.toString();

    var verifyPasswordResetConfirmationCode = function (confirm, id) {
        log.info("Verifying Password reset confirmation code for user : " + id);
        var ws = require('ws');
        var request = new ws.WSRequest();
        var options = new Array();
        options.useSOAP = 1.1;
        options.timeout = 1000000;
        options.action = "urn:verifyConfirmationCode";
        options["HTTPHeaders"] = [
            {name: "Cookie", value: modManager.getAdminCookie(IS_URL)}
        ];
        var payload = '<verifyConfirmationCode xmlns="http://services.mgt.identity.carbon.wso2.org">'+
                        '<username>'+id+'</username>'+
                        '<code>'+confirm+'</code>'+
                      '</verifyConfirmationCode>';
        var response;
        var result = {};
        try {
            var endPoint = IS_URL + "UserInformationRecoveryService";
            request.open(options, endPoint, false);
            request.send(payload);
            response = request.responseE4X;
            var entry = response.*::["return"];
            var key = entry.*::key.text();
            var verified = entry.*::verified.text();
            var error = entry.*::error.text();
            var data = {};
            if (verified == true) {
                log.info("Confirmation code verified successfully for user : " + id);
                var userInfo = jagg.module("tenant").getUserInfo(id);
                data.verified = true;
                data.confirmationKey = key;
                data.userName = id;
                data.email = userInfo.email.toString();
                result.error = false;
                result.message = "verified";
                result.data = data;
                session.put('intermediate-data', stringify(data));
            } else {
                result.error = true;
                if (error.indexOf("18001") != -1) {
                    result.message = "Invalid code";
                    log.warn("Invalid code provided to validate by user : " + id);
                } else if (error.indexOf("18002") != -1) {
                    result.message = "Expired code";
                    log.warn("Expired code provided to validate by user : " + id);
                } else {
                    result.message = error;
                    log.warn(error);
                }
            }
            return result;
        } catch (e) {
            log.error("Error while verifying confirmation code for user : " + id + "\n" + e.message);
            throw "Error while verifying confirmation code for user : " + id + "\n" + e.message
        }
    };



%>

