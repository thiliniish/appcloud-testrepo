<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");

var log = new Log("modules/monetizing/monetizing.jag");
var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var cloudmgtURL = cloudConfig.ServerUrls.cloudmgt.toString();
var modDb = jagg.module("database");
var modUtil = jagg.module("util");
var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var billingService = server.osgiService('org.wso2.carbon.cloud.billing.service.CloudBillingService');
var monetizationService = server.osgiService('org.wso2.carbon.cloud.billing.service.APICloudMonetizationService');

var getSubscribersOfTenant = function () {
    var tenantDomain = modManager.getTenantDomain();
    if (jagg.module("permission").hasTenantLevelUserMgtPermission()) {
        var modTenant = jagg.module("tenant");
        var subscribers = [];
        try {
            //get the tenant users that have the subscriber role
            var subscriberList = modTenant.getUserListOfRole(ROLE_SUBSCRIBER);
            var len = subscriberList.length;
            for (var i = 0; i < len; i++) {
                var tmpSubscriber = {};
                var userName = subscriberList[i];
                var tmpUser = modTenant.getUserInfo(userName);
                tmpSubscriber.userName = userName;
                tmpSubscriber.displayName = tmpUser.displayName;
                tmpSubscriber.email = tmpUser.email;
                var queryString = SQL_QUERY_STRINGS.SELECT_SUBSCRIBER_FROM_MONETIZATION_API_CLOUD_SUBSCRIBERS;
                var parameters = [userName, tenantDomain];
                var results = modDb.executeQuery(queryString, parameters);
                if (results == null || results == "") {
                    tmpSubscriber.subscriptionType = ACC_FREE;
                    tmpSubscriber.complimentary = false;
                } else {
                    var isTest = results[0]["TEST_ACCOUNT"];
                    var accNo = results[0]["ACCOUNT_NUMBER"];
                    tmpSubscriber.accountId = accNo;
                    tmpSubscriber.complimentary = isTest;
                    if (isTest) {
                        tmpSubscriber.subscriptionType = ACC_TEST;
                    }
                    else if (accNo != null && accNo != "null" && accNo != "") {
                        tmpSubscriber.subscriptionType = ACC_PAID;
                    } else {
                        tmpSubscriber.subscriptionType = ACC_FREE;
                    }
                }
                subscribers.push(tmpSubscriber);
            }
            return {
                error: false,
                subObj: subscribers,
                status: "200"
            };
        } catch (e) {
            log.error("Error while getting subscribers of the tenant: " + tenantDomain + ".");
            log.error(e);
            return {
                error: true,
                message: e.message,
                status: "500"
            };
        }
    } else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action.";
        log.error(msg);
        return {
            error: true,
            message: msg,
            status: "401"
        };
    }
};

var makeSubscriberAccountTest = function (subscriberString) {
    var tenantDomain = modManager.getTenantDomain();
    var tenantDisplayName = modManager.getTenantDisplayName(tenantDomain);
    var productName = tenantDomain + "_api_cloud";
    var sqlDateFormat = modUtil.dateTimeFormatter(MYSQL_DATETIME_FORMAT);
    var zuoradateFormatter = modUtil.dateTimeFormatter(ZUORA_DATE_FORMAT);
    var effectiveDate = new Packages.java.util.Date();
    var formattedEffectiveDate = sqlDateFormat.format(effectiveDate);
    var subscriber, userName, accountId;
    if (jagg.module("permission").hasTenantLevelUserMgtPermission()) {
        try {
            subscriber = JSON.parse(subscriberString);
            accountId = subscriber.accountId;
            userName = subscriber.userName;
            if (subscriber.complimentary == false) {
                if (log.isDebugEnabled()) {
                    log.debug("Updating account to test for subscriber: " + userName + " of tenant: " + tenantDomain + ".");
                }
                if (subscriber.subscriptionType == ACC_PAID) {
                    var subscriptionIds = JSON.parse(monetizationService.getActiveSubscriptionIdsForAccountId(accountId, productName));
                    var subsLen = subscriptionIds.length;
                    var jsonData = {};
                    jsonData.cancellationPolicy = 'SpecificDate';
                    jsonData.cancellationEffectiveDate = zuoradateFormatter.format(effectiveDate);
                    jsonData.invoiceCollect = true;
                    for (var j = 0; j < subsLen; j++) {
                        //Cancel subscriptions
                        var subscriptionId = subscriptionIds[j];
                        //Cancel paid subscriptions form Zuora
                        var cancellationResponse = billingService.cancelSubscription(subscriptionId, stringify(jsonData));
                        if (JSON.parse(cancellationResponse).success === true) {
                            if (log.isDebugEnabled()) {
                                log.debug("Zuora subscription: " + subscriptionId + " of subscriber: " + userName + " of tenant: " + tenantDomain + " cancellation successful.");
                            }
                            //Insert in to monetization subscription history table
                            var insertSubHistoryQuery = SQL_QUERY_STRINGS.INSERT_INTO_MONETIZATION_API_CLOUD_SUBSCRIPTIONS_HISTORY;
                            var parameters = [formattedEffectiveDate, accountId, subscriptionId];
                            modDb.executeQuery(insertSubHistoryQuery, parameters);
                            //Delete subscription from monetization subscription table
                            var deleteSubscriptionQuery = SQL_QUERY_STRINGS.DELETE_FROM_MONETIZATION_API_CLOUD_SUBSCRIPTIONS;
                            parameters = [accountId, subscriptionId];
                            modDb.executeQuery(deleteSubscriptionQuery, parameters);
                        } else {
                            throw "Subscription cancellation failed for user: " + userName + " of tenant: " + tenantDomain + ".";
                        }
                    }
                    //Update monetization subscriber table
                    updateMonetizationSubscriberTable(true, userName, tenantDomain);
                    //send notification email
                    sendUpdatedToTestAccountEmail(tenantDisplayName, productIdFromServiceId.api_cloud, effectiveDate, subscriber.email);
                }
                else {
                    //Insert into monetization subscriber table
                    var insertQueryString = SQL_QUERY_STRINGS.INSERT_INTO_MONETIZATION_API_CLOUD_SUBSCRIBERS;
                    var parameters = [userName, tenantDomain, true, null, true];
                    modDb.executeQuery(insertQueryString, parameters);
                    //Send notification email
                    sendUpdatedToTestAccountEmail(tenantDisplayName, productIdFromServiceId.api_cloud, effectiveDate, subscriber.email);
                }
                log.info("Updating account to test for user: " + userName + " of tenant: " + tenantDomain + " is successful.");
                return {
                    error: false,
                    status: "200"
                };
            } else {
                throw "Account of subscriber: " + userName + " of tenant: " + tenantDomain + " received for modifying to a test account is already a test account.";
            }
        } catch (e) {
            var msg;
            //Invalid input parameter. Invalid JSON string or null user name.
            if (userName == null) {
                msg = "Request with an invalid subscriber JSON String was received to make a test subscriber account for tenant: " + tenantDomain + ".";
            }
            else {
                msg = "Error while updating subscriber account to test for subscriber: " + userName + " of the tenant: " + tenantDomain + ".";
            }
            log.error(msg);
            log.error(e);
            return {
                error: true,
                message: msg,
                status: "500"
            };
        }


    } else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action.";
        log.error(msg);
        return {
            error: true,
            message: msg,
            status: "401"
        };
    }
};

var makeTestSubscriberAccountRegular = function (subscriberString) {
    var tenantDomain = modManager.getTenantDomain();
    var tenantDisplayName = modManager.getTenantDisplayName(tenantDomain);
    var effectiveDate = new Packages.java.util.Date();
    var subscriber, userName;
    if (jagg.module("permission").hasTenantLevelUserMgtPermission()) {
        try {
            subscriber = JSON.parse(subscriberString);
            userName = subscriber.userName;
            if (userName == null || userName == "" || userName == "null") {
                throw "Remove paid subscriptions failed for tenant: " + tenantDomain + ", userName is invalid.";
            }
            var apimSubscriberId = userName + "@" + tenantDomain;
            if (subscriber.complimentary == true) {
                if (log.isDebugEnabled()) {
                    log.debug("Removing test account of user: " + userName + " of tenant: " + tenantDomain + ".");
                }
                //Remove paid api subscriptions from apim
                var response = monetizationService.removePaidApiSubscriptionsOfUser(apimSubscriberId, tenantDomain);
                if (response === true) {
                    //Update monetization subscriber table
                    updateMonetizationSubscriberTable(false, userName, tenantDomain);
                    //Send notification email
                    sendRemoveTestAccountEmail(tenantDisplayName, productIdFromServiceId.api_cloud, effectiveDate, subscriber.email);
                    log.info("Removing test account status of user: " + userName + " of tenant: " + tenantDomain + " is successful.");
                    return {
                        error: false,
                        status: "200"
                    };
                } else {
                    throw "Remove paid subscriptions failed for user: " + userName + " of tenant: " + tenantDomain;
                }
            } else {
                throw "Account of subscriber: " + userName + " of tenant: " + tenantDomain + " received for change back to a regular account is already a regular account.";
            }
        } catch (e) {
            var msg;
            //Invalid input parameter. Invalid JSON string or null user name.
            if (userName == null) {
                msg = "Request with an invalid subscriber JSON String was received to change a test subscriber account back to regular for tenant: " + tenantDomain + ".";
            }
            else {
                msg = "Error while removing test account status of subscriber: " + userName + " of the tenant: " + tenantDomain + "."
            }
            log.error(msg);
            log.error(e);
            return {
                error: true,
                message: msg,
                status: "500"
            };
        }
    } else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action.";
        log.error(msg);
        return {
            error: true,
            message: msg,
            status: "401"
        };
    }
};

var updateMonetizationSubscriberTable = function (isTest, userName, tenantDomain) {
    var queryString = SQL_QUERY_STRINGS.UPDATE_MONETIZATION_API_CLOUD_SUBSCRIBERS;
    var parameters = [isTest, userName, tenantDomain];
    modDb.executeQuery(queryString, parameters);
};

var sendUpdatedToTestAccountEmail = function (displayName, service, endDate, userEmail) {
    var body = modUtil.getObjFromFile("/site/conf/emails/monetization_api_subscription_create_test_account_email_body.txt");
    var mailEndDate = modUtil.getEmailEffectiveDate(endDate);
    body = body.replace("$tenant", displayName).replace("$tenant", displayName).replace("$effective-date", mailEndDate);
    var subject = "WSO2 Cloud Services - WSO2 " + service + " subscriber account of " + displayName + " upgraded to a complimentary account";
    modUtil.sendEmail(body, subject, userEmail);
};

var sendRemoveTestAccountEmail = function (displayName, service, endDate, userEmail) {
    var body = modUtil.getObjFromFile("/site/conf/emails/monetization_api_subscription_remove_test_account_email_body.txt");
    var mailEndDate = modUtil.getEmailEffectiveDate(endDate);
    body = body.replace("$tenant", displayName).replace("$effective-date", mailEndDate).replace("$tenant", displayName);
    var subject = "WSO2 Cloud Services - WSO2 " + service + " complimentary subscriber account of " + displayName + " changed back to a regular account";
    modUtil.sendEmail(body, subject, userEmail);
};

%>