<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");
include("/modules/database/sql.jag");

var log = new Log("modules.tenant.users.add.add.jag");
var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

var from = cloudConfig.registrationEmail.from;
var subject =  cloudConfig.invitationEmail.subject;
var targetEpr = cloudConfig.registrationEmail.targetEpr.toString();
var cloudmgtDAO = new Packages.org.wso2.carbon.cloud.common.CloudMgtDAO();

var addUserRoles = function addUserRoles(username,userRoles) {
	//    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
	log.info("addUserRoles "+username);
	var tenantDomain=modManager.getTenantDomain();
	var context = multitenancy.getPrivilegedCarbonContext();
	var tenantManager = multitenancy.getTenantManager();
	try {
		context.startTenantFlow();
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
		result = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').addUserRoles(username,userRoles);
	} finally {
		context.endTenantFlow();
	}
};

var updateUserRoles = function (userName,addRoles,removeRols) {
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        var paraAddRoles,paraRemoveRoles;
        paraAddRoles=addRoles.split(",");
        paraRemoveRoles=removeRols.split(",");
        if((paraAddRoles.length==0)||(paraAddRoles[0].length==0)){
            paraAddRoles=null;
        }
        if((paraRemoveRoles.length==0)||(paraRemoveRoles[0].length==0)){
            paraRemoveRoles=null;
        }
        var result;
        var context = multitenancy.getPrivilegedCarbonContext();
        var tenantManager = multitenancy.getTenantManager();
        try {
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            result = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateUserRoles(userName,paraAddRoles,paraRemoveRoles);
        } finally {
            context.endTenantFlow();
        }
        return result;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var updateUserInvitation = function (email, addRoles, removeRoles) {
    var tenantDomain = modManager.getTenantDomain();
    var message;
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        //Get the existing roles in the invitation
        var currentRoles = [];
        var role = '';

        //Calling the db
        var CloudMgtDAO = Packages.org.wso2.carbon.cloud.common.CloudMgtDAO;
        var cloudmgtDAO;
        cloudmgtDAO = new CloudMgtDAO();
        var existingRoles = null;
        try {
            existingRoles = cloudmgtDAO.getRolesOfTempInvitees(tenantDomain, email);
        } catch(e) {
            log.error("An error occurred while getting the roles for the user " + email);
            log.error(e);
        }
        if (existingRoles != "" && existingRoles != null) {
            existingRoles = String(existingRoles);
            var tmpRoles = existingRoles.split(',');
            for (var k = 0; k < tmpRoles.length; k++) {
                currentRoles.push(tmpRoles[k]);
            }
        }
        //Get roles to be added and deleted into arrays
        var roles = [];
        var paramAddRoles, paramRemoveRoles;
        paramAddRoles = addRoles.split(",");
        paramRemoveRoles = removeRoles.split(",");
        if ((paramAddRoles.length == 0) || (paramAddRoles[0].length == 0)) {
            paramAddRoles = null;
        } else {
            for (var i = 0; i < paramAddRoles.length; i++) {
                role = jagg.module("util").getRoleForGivenDisplayName(paramAddRoles[i]);
                paramAddRoles[i] = role;
            }
        }
        if ((paramRemoveRoles.length == 0) || (paramRemoveRoles[0].length == 0)) {
            paramRemoveRoles = null;
        } else {
            for (var i = 0; i < paramRemoveRoles.length; i++) {
                role = jagg.module("util").getRoleForGivenDisplayName(paramRemoveRoles[i]);
                paramRemoveRoles[i] = role;
            }
        }
        //If there are no roles to be updated
        if (paramAddRoles == null && paramRemoveRoles == null) {
            message = "No roles were selected to be added to or removed from invitation to " + email;
            if (log.isDebugEnabled()) {
                log.debug(message);
            }
            return {
                error: false,
                result: true,
                message: message,
                statusCode: 200
            };
        } else {
            if (paramAddRoles != null) {
                for (var i = 0; i < paramAddRoles.length; i++) {
                    roles.push(paramAddRoles[i]);
                }
            }
            if (currentRoles != null) {
                var roleIndex = 0;
                var removeRoleIndex = 0;
                for (roleIndex = 0; roleIndex < currentRoles.length; roleIndex++) {
                    //Add all current roles to the role list if there are no roles to remove
                    if (paramRemoveRoles == null) {
                        roles.push(currentRoles[roleIndex]);
                    } else {
                        for (removeRoleIndex = 0; removeRoleIndex < paramRemoveRoles.length; removeRoleIndex++) {
                            if (currentRoles[roleIndex] == paramRemoveRoles[removeRoleIndex]) {
                                break;
                            }
                        }
                        if (removeRoleIndex < paramRemoveRoles.length) {
                            //Do not add the role if it is a role to be removed
                            continue;
                        } else {
                            roles.push(currentRoles[roleIndex]);
                        }
                    }
                }
            }
            try {
                var results = cloudmgtDAO.updateTempInviteeRoles(roles, tenantDomain, email);
                //Resend invitation email
                resendInvite(email);
                return {
                    error: false,
                    result: results,
                    message: "User Invitation resent to " + email,
                    statusCode: 200
                };
            } catch (e) {
                message = "Error while updating user invitation to " + email + " to tenant " + tenantDomain;
                log.error(message);
                log.error(e);
                return {
                    error: true,
                    message: message,
                    statusCode: 500
                };
            }
        }
    } else {
        message = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(message);
        return {
            error: true,
            message: message,
            statusCode: 401
        };
    }
};

var revokeUserInvitation = function (email) {
    var tenantDomain = modManager.getTenantDomain();
    var user = jagg.getUser();
    var message;
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        try {
            var results = cloudmgtDAO.removeTempInviteeInvite(tenantDomain, email);
            message = "Member Invitation for " + email + " for the tenant " + tenantDomain + " has been revoked by "
                    + user;
            log.info(message);
            return {
                error: false,
                result: results,
                message: message,
                statusCode: 200
            };
        } catch (e) {
            message = "Error while revoking user invitation to " + email + " to tenant " + tenantDomain;
            log.error(message);
            log.error(e);
            return {
                error: true,
                message: message,
                statusCode: 500
            };
        }
    } else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return {
            error: true,
            message: msg,
            statusCode: 401
        };
    }
};

var deleteUserFromTenant = function (userName){
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        userName = modManager.getUserNameFromEmail(userName);
        var email = jagg.module('manager').getEmailOfUser(userName);
        var isSuccess = "false";
        var context=multitenancy.getPrivilegedCarbonContext();
        var tenantManager= multitenancy.getTenantManager();
        try {
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            var isTenantUser = jagg.module("tenant").isUserOfTenant(tenantDomain, email);
            if (isTenantUser.isExists) {
                log.info("Removing user " + userName + " from tenant " + tenantDomain);
                isSuccess = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService')
                        .removeUserFromTenant(userName);
            } else {
                var msg = "Error while removing non-existing user " + email + " in the tenant " + tenantDomain;
                log.error(msg);
                return {
                    error: true,
                    message: msg,
                    statusCode: 500
                };
            }
        }catch (e){
            log.error(e);
        }finally{
            context.endTenantFlow();
        }
        return isSuccess;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var sendInvite = function (email, tenant, roles, message) {
    log.info("Sending invitation for invited user [ " + email + " ]");
    var displayName = modManager.getTenantDisplayName(tenant);
    var uuid = generateUUId();
    log.info("Adding the user [ " + email + " ] to TEMP_INVITEE");

    //Calling the db
    var CloudMgtDAO = Packages.org.wso2.carbon.cloud.common.CloudMgtDAO;
    var cloudmgtDAO;
    cloudmgtDAO = new CloudMgtDAO();
    var existingRecord = null;
    try {
        existingRecord = cloudmgtDAO.getRolesOfTempInvitees(tenant, email);
    } catch(e) {
        log.error("An error occurred while getting the roles for the user " + email);
        log.error(e);
    }
    if (existingRecord != "" && existingRecord != null) {
        existingRecord = String(existingRecord);
        var existingRoles = existingRecord.split(",");
        var userRoleArray = roles.split(",");
        for (var i = 0; i < existingRoles.length; i++) {
            var exsistingRole = existingRoles[i].trim();
            var isRoleExistsInRoleArray = false;
            for (var j = 0; j < userRoleArray.length; j++) {
                if (exsistingRole == userRoleArray[j]) {
                    isRoleExistsInRoleArray = true;
                    break;
                }
            }
            if (!isRoleExistsInRoleArray) {
                roles = exsistingRole + "," + roles;
            }
        }
    }
        var results = cloudmgtDAO.insertIntoTempInvitee(tenant, email, uuid, roles, 0);
        log.info("Successfully added the user by email [ " + email + " ] to TEMP_INVITEE");
        var link = getInvitationLink(tenant, roles, uuid);
        sendEmail(email, link, displayName, roles, message);
        var modEvents = jagg.module("events");
        var type = "CloudMgt";
        var actionString = MAIL_CAMPAIGN + "-" + type + "-cloudsignup{Invite}:Success";
        var page = MAIL_CAMPAIGN;
        var events = [];
        var event = {};
        event.item = type;
        event.timestamp = new Date().getTime();
        event.pageName = page;
        event.action = actionString;
        events[events.length] = event;
        modEvents.publishUserActivity(events, email, tenant);
        return email;
};

var sendEmail = function(to,link,domain,roles,message) {
    var userRoleArray = roles.split(",");
    var displayRoles="";
    var displayRoleArray = [];
    for(var i=0;i<userRoleArray.length;i++){
        var userRoleDisplayName = jagg.module("util").getUserRoleDisplayName(userRoleArray[i]);
        if(userRoleDisplayName != null && userRoleDisplayName != "" && userRoleDisplayName != "null") {
            displayRoleArray.push(userRoleDisplayName);
        }
    }
    for(var j=0;j<displayRoleArray.length;j++){

        displayRoles = displayRoles + displayRoleArray[j];
        //Appending (',') or ('and') to the displayRoles string value.
        if (j == displayRoleArray.length - 2) {
            displayRoles = displayRoles + " and ";
        } else if (j < displayRoleArray.length - 2) {
            displayRoles = displayRoles + ", ";
        }
    }
    if(displayRoleArray.length == 1){
        displayRoles = displayRoles + " role";
    } else{
      displayRoles = displayRoles + " roles";
    }

    var body = getCustomEmailBody(userRoleArray);
    var isCustom = false;
    if (body) {
        isCustom = true;
    } else {
        body = jagg.module("util").getObjFromFile("/site/conf/emails/user_invitation_email.body.txt");
        body = body.replace("$tenant", domain);
        if (message != null && message != "" && message != "null" && message != undefined) {
            body = body.replace("$message", message);
        } else {
            body = body.replace("$message", "");
        }
    }
    body = body.replace("$link", link).replace("$link", link);
    body = body.replace("$roles", displayRoles);
    var loggedInUserEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
    if (isCustom) {
        var imagePath = getCustomLogoPath();
        var attachment = {"path": imagePath, "contentType": "image/png", "cid": "<header>"};
        jagg.module("util").sendEmailWithAttachment(body, subject + loggedInUserEmail, to, attachment);
    } else {
        jagg.module("util").sendEmail(body, subject + loggedInUserEmail, to);
    }
    log.info("Successfully sent the email to [ " + to + " ], with the link : " + link);
};

var getCustomEmailBody = function(userRoleArray) {
    var path;
    if (userRoleArray.length == 1) {
        if (userRoleArray[0] == ROLE_SUBSCRIBER) {
            path = getEmailTemplatePath(ROLE_SUBSCRIBER);
        } else if (userRoleArray[0] == ROLE_PUBLISHER) {
            path = getEmailTemplatePath(ROLE_PUBLISHER);
        } else {
            path = getEmailTemplatePath("other");
        }
    } else {
        path = getEmailTemplatePath("other");
    }
    var file = new File(path);
    if (file.isExists()) {
        return jagg.module("util").getObjFromFile(path);
    } else {
        return null;
    }
};

var getEmailTemplatePath = function(tag) {
    var path = "file://" + getCustomEmailDir() + "custom_" + tag + "_invitation_email.txt";
    return path;
};

var getCustomEmailDir = function() {
    var tenantDomain = modManager.getTenantDomain();
    var tenantId = modManager.getTenantId(tenantDomain);
    var carbonHome = Packages.java.lang.System.getProperty("carbon.home");
    var path = carbonHome + "/repository/tenants/" + tenantId + "/customizations/emailTemplates/";
    return path;
};

var getCustomLogoPath = function() {
    return getCustomEmailDir() + "custom-logo";
};

var sendUserInvite = function (emails,roles){
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        var userNames;
        userNames = modManager.getUserNamesFromEmails(emails);
        var isSuccess = "true";
        try {
            for (var i = 0; i < userNames.length; i++) {
                sendInvite(emails[i], tenantDomain, roles);
            }
        }catch (e){
            log.error(e);
        }
        return isSuccess;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var constructRoleList = function constructRoleList(roles){
    var roleList = "";
    if(roles != null && roles != "" && roles != "null" && roles != undefined){
        for(var i = 0; i < roles.length; i++){
            if(i == 0){
                roleList = roles[i].id;
            }else{
                roleList = roleList+","+roles[i].id;
            }
        }
    }
    return roleList;
}

var inviteUsers = function inviteUsers(userRoleList, defaultRoles, message) {
    var tenantDomain = modManager.getTenantDomain();
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        try {
            for (var i = 0; i < userRoleList.length; i++) {
                var user = userRoleList[i];
                var rolesList;
                var defaultRoleList = constructRoleList(defaultRoles);
                if (defaultRoleList != "") {
                    rolesList = defaultRoleList + "," + constructRoleList(userRoleList[i].roles);
                }
                else {
                    rolesList = constructRoleList(userRoleList[i].roles);
                }
                sendInvite(user.id, tenantDomain, rolesList, message);
            }
        } catch (e) {
            log.error("Error while sending user invitations");
            log.error(e);
            throw "Error while sending user invitations";
        }
        return true;
    }
    else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var resendInvite = function resendInvite(email) {

    var tenantDomain = modManager.getTenantDomain();
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        try {
            log.info("Re-sending invitation to invited user " + email);
            var displayName = modManager.getTenantDisplayName(tenantDomain);
            var CloudMgtDAO = Packages.org.wso2.carbon.cloud.common.CloudMgtDAO;
            var cloudmgtDAO;
            cloudmgtDAO = new CloudMgtDAO();
            var results = "";
            var queryResults = cloudmgtDAO.getRolesAndUUIDOfTempInvitees(email, tenantDomain);
            if (queryResults != null) {
                results = JSON.parse(queryResults);
            }
        } catch (e) {
            log.error(e);
            log.error("Error while re-sending invitation to " + email);
            throw "Error while re-sending invitation to " + email;
        }
        if (results != null && results != "") {
            var uuid = results.uuid;
            var userRoles = results.roles;
            var link = getInvitationLink(tenantDomain, userRoles, uuid);
            sendEmail(email, link, displayName, userRoles);
            log.info("Re-sending invitation to invited user " + email +" successful")
            return true;
        } else {
            log.info("No pending users available for " + tenantDomain + " and email " + email);
            return false;
        }
    }
    else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var sendEmailWithCustomMessage = function (toList, emailSubject, message) {

    var tenantDomain = modManager.getTenantDomain();
    var commonBody = jagg.module("util").getObjFromFile("/site/conf/emails/custom_email.body.txt");
    commonBody = commonBody.replace("$message", message);
    var loggedInUserEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        for (var i = 0; i < toList.length; i++) {
            jagg.module("util").sendEmail(commonBody, emailSubject + " from :" + loggedInUserEmail, toList[i]);
            log.info("Custom email successfully sent to " + toList[i]);
        }
        return true;
    } else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var importInvitedUserAndGetDirectURL = function (confirmationKey, defaultPassword, firstName, lastName) {
    try {
        var url = "../pages/index.jag";
        var roles = importInvitedUser(confirmationKey, defaultPassword, firstName, lastName);
        if (roles != null) {
            url = jagg.module("util").getInviteeDirectUrl(roles);
        }
    } catch (e) {
        log.error("Error while importing user [ " + firstName + " ] , [ " + lastName + " ] to tenant and getting the " +
                "redirect URL ");
        log.error(e);
        return {
            error: true,
            message: e.message,
            status: 500
        };
    }
    return {
        error: false,
        status: 200,
        data: url
    };
};

var importInvitedUser = function (confirmationKey, defaultPassword, firstName, lastName) {
    try {
        //Retrieve invited user info from TEMP_INVITEE table
        var results;
        var queryResults = cloudmgtDAO.getTempInviteeDetails(confirmationKey);
        if (queryResults != null) {
            results = JSON.parse(queryResults);
        }
        var email = results["email"];
        var roles = results["roles"];
        var tenantDomain = results["tenantDomain"];
        session.put("TENANT_DOMAIN", tenantDomain.toString());
        var assignedRoles = roles.split(",");
        var username = modManager.getUserNameFromEmail(email);
        var tenantManager = multitenancy.getTenantManager();
        var tenantId = tenantManager.getTenantId(tenantDomain);
        var context = multitenancy.getPrivilegedCarbonContext();

        //start tenant flow
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantId);
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);

        //if its a new user add to OT, and assign to the tenant.
        var isUserExist = modManager.isExistingUser(username);
        if (!isUserExist) {
            server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').importUserTotheTenant(username, defaultPassword, email, firstName, lastName);
            jagg.module("util").addUserToOT(email, defaultPassword, firstName, lastName);
            log.info("The invited new user [ " + username + " ] joined the tenant [ " + tenantDomain + " ]");
        }

        //update the newly assigned roles of the user
        var isUserOfTenant = false;
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager = realm.getUserStoreManager();
        var userRoles = userStoreManager.getRoleListOfUser(username);
        for (var i = 0; i < userRoles.length; i++) {
            if (userRoles[i] == "default") {
                isUserOfTenant = true;
                break;
            }
        }
        if (!isUserOfTenant) {
            //Need to add default role for users who exists already but not a member of tenant; hence adding default role here
            assignedRoles.push(CLOUD_DEFAULT_ROLE);
        }
        server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateUserRoles(username, assignedRoles, null);
        log.info("Updating the roles [ " + assignedRoles + " ] for the user [ " + username + " ] of the tenant [ " +
                "" + tenantDomain + " ]");
    } catch (e) {
        log.error("Error while importing [ " + username + " ] to the tenant [ " + tenantDomain + " ]");
        log.error(e);
        throw e;
    } finally {
        //stop tenant flow
        context.endTenantFlow();
    }

    try {
        //Adding to TENANT_USER_MAPPING
        log.info("Adding user [ " + username + " ] and tenant [ " + tenantDomain + " ] in to TENANT_USER_MAPPING");
        cloudmgtDAO.addTenantUserMapping(username, tenantDomain);
        log.info("Tenant user mapping added successfully for [ " + username + " ] and tenant [" + tenantDomain + "]");

        //Deleting from TEMP_INVITEE
       cloudmgtDAO.removeTempInviteeRecord(confirmationKey);
        log.info("The entry at TEMP_INVITEE is deleted for [ " + username + " ] and tenant [" + tenantDomain + "]");

    } catch (e) {
        log.error("Error while adding tenant user mapping for user [ " + username + " ] with tenant domain [ " +
                tenantDomain + " ] ");
        log.error(e);
        throw e;
    }
    return roles;
};

//This method validates the input fields of the add user API for adding users.
var validateInputFields = function (userEmail, password, firstName, lastName, roles) {
    var utilModule = jagg.module("util");
    var userEmailValidationResult = utilModule.validateEmail(userEmail);
    var passwordValidationResult = utilModule.validatePassword(password);
    var firstNameValidationResult = utilModule.validateNameString(firstName);
    var lastNameValidationResult = utilModule.validateNameString(lastName);
    var userRolesValidationResult = utilModule.validateUserRoles(roles);

    if (userEmailValidationResult == null || userEmailValidationResult.error) {
        return userEmailValidationResult;
    } else if (passwordValidationResult == null || passwordValidationResult.error) {
        return passwordValidationResult;
    } else if (firstNameValidationResult == null || firstNameValidationResult.error) {
        return firstNameValidationResult;
    } else if (lastNameValidationResult == null || lastNameValidationResult.error) {
        return lastNameValidationResult;
    } else if (userRolesValidationResult == null || userRolesValidationResult.error) {
        return userRolesValidationResult;
    } else {
        return {
            error: false,
            message: "All provided values are valid to proceed with the user addition",
            status: 200
        };
    }
};

//Method used to add users to the organization using the add user API.
var importUserToTenant = function (email, defaultPassword, firstName, lastName, roles) {
    var isUserOfTenant = false;
    var tenantDomain = modManager.getTenantDomain();
    var username = modManager.getUserNameFromEmail(email);
    var isTenantUserResult = jagg.module("tenant").isUserOfTenant(tenantDomain, email);
    var isTenantUser = isTenantUserResult.isExists;
    if (!isTenantUser) {
        try {
            var isUserExist = modManager.isExistingUser(username);
            var tenantManager = multitenancy.getTenantManager();
            var tenantId = tenantManager.getTenantId(tenantDomain);
            var context = multitenancy.getPrivilegedCarbonContext();

            var assignedRoles = roles.split(",");
            var tenantManager = multitenancy.getTenantManager();
            var tenantId = tenantManager.getTenantId(tenantDomain);
            var context = multitenancy.getPrivilegedCarbonContext();

            //start tenant flow
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantId);
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);

            //if its a new user add to OT, and assign to the tenant.
            if (!isUserExist) {
                server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').importUserTotheTenant(username, defaultPassword, email, firstName, lastName);
                jagg.module("util").addUserToOT(email, defaultPassword, firstName, lastName);
                log.info("The invited new user [ " + username + " ] joined the tenant [ " + tenantDomain + " ]");
            }
            //update the newly assigned roles of the user
            var hasDefaultRole = false;
            var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
            var realm = realmService.getTenantUserRealm(tenantId);
            var userStoreManager = realm.getUserStoreManager();
            var userRoles = userStoreManager.getRoleListOfUser(username);

            for (var i = 0; i < userRoles.length; i++) {
                if (userRoles[i] == CLOUD_DEFAULT_ROLE) {
                    hasDefaultRole = true;
                    break;
                }
            }
            //Need to add default role for users who exists already but not a member of tenant; hence adding default role here
            if (!hasDefaultRole) {
                assignedRoles.push(CLOUD_DEFAULT_ROLE);
            }
            server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateUserRoles(username, assignedRoles, null);
            log.info("Updating the roles [ " + assignedRoles + " ] for the user [ " + username + " ] of the tenant [ " +
                     "" + tenantDomain + " ]");
        } catch (e) {
            var message = "Error while importing [ " + username + " ] to the tenant [ " + tenantDomain + " ]";
            log.error(message);
            log.error(e);
            var responseObj = {
                error: true,
                message: message,
                success: false,
                status: 500
            };
        } finally {
            //stop tenant flow
            context.endTenantFlow();
        }

        try {
            //Adding to TENANT_USER_MAPPING
            log.info("Adding user [ " + username + " ] and tenant [ " + tenantDomain + " ] in to TENANT_USER_MAPPING");
            cloudmgtDAO.addTenantUserMapping(username, tenantDomain);
            var message = "Successfully added the user " + email + " to the tenant " + tenantDomain;
            log.info("Tenant user mapping added successfully for [ " + username + " ] and tenant [" + tenantDomain + "]");

            var responseObj = {
                error: false,
                message: message,
                success: true,
                status: 200
            };
        } catch (e) {
            var message = "Error while adding tenant user mapping for user [ " + username + " ] with tenant domain [ " +
                          tenantDomain + " ] ";
            log.error(message);
            log.error(e);
            var responseObj = {
                error: true,
                message: message,
                success: false,
                status: 500
            };
        }
    } else {
        var message = "The user " + email + " already belongs to the tenant " + tenantDomain;
        var responseObj = {
            error: true,
            message: message,
            success: false,
            status: 405
        };
    }
    return responseObj;
};

var changePassword=function(oldPassword,newPassword){
	var userName = session.get('LOGGED_IN_USER');
	var userEmail = session.get("LOGGED_IN_USER_EMAIL");
	var tenantAwareUserName = modManager.getTenantAwareUsername(userName);
	var tenantDomain=modManager.getTenantDomain();
	var context=multitenancy.getPrivilegedCarbonContext();
	var tenantManager = multitenancy.getTenantManager();
	try {
		var tenantId = tenantManager.getTenantId(tenantDomain);
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
		var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
		var realm = realmService.getTenantUserRealm(tenantId);
		var userStoreManager=realm.getUserStoreManager();
		var result=userStoreManager.updateCredential(tenantAwareUserName,newPassword,oldPassword);
		var claimValue=userStoreManager.setUserClaimValue(tenantAwareUserName,"http://wso2.org/claims/firstlogin","false",null);

        jagg.module("util").changeOTUserPass(userEmail,newPassword);

	}catch (e){
		log.error("Error occured while changing password");
		throw "Error occured while changing password";
	}finally{
		context.endTenantFlow();
	}
};

var getBlockedSubscriptions = function(tenantDomain) {
	var roleList= new Array();
	var tenantId = modManager.getTenantId(tenantDomain);
	//getting the paid and inactive subscriptions
    var cloudBillingDAO = new Packages.org.wso2.carbon.cloud.billing.core.commons.dataaccess.CloudBillingDAO();
    var results = JSON.parse(cloudBillingDAO.getSubscriptionsForBillingAccount(tenantDomain,"PAID","DISABLED"));
    for(var i =0; i< results.length; i++){
        roleList.push(results[i]["SUBSCRIPTION"]);
    }
	return roleList;
};

var generateUUId = function() {
	log.info("generating the UUID ");
	var d = new Date().getTime();
	var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
		var r = (d + Math.random()*16)%16 | 0;
		d = Math.floor(d/16);
		return (c=='x' ? r : (r&0x7|0x8)).toString(16);
	});
	return uuid;
};

/**
 * Construct the invitation link. if user is invited with only subscriber role
 * then invitation link will be store url else cloud management app url
 * @param tenant
 * @param roles
 * @param uuid
 * @returns {string}
 */
var getInvitationLink = function (tenant, roles, uuid) {
    var prefix = "?confirmation=" + uuid + "&isInvitee=true";
    var link = targetEpr + prefix;
    if (roles) {
        var usreRoles = roles.split(',');
        if (usreRoles.length == 1 && usreRoles == ROLE_SUBSCRIBER) {
            link = getStoreConfirmationLink(tenant, prefix);
        }
    }
    return link;
}

/**
 * Construct the store confirmation page link.
 * @param tenantDomain
 * @param prefix
 * @returns {string}
 */
var getStoreConfirmationLink = function (tenantDomain, prefix) {
    //construct the link with default store domain
    var link = cloudConfig.registrationEmail.targetStoreEpr + prefix + "&tenant=" + tenantDomain;
    var defaultStoreURL = cloudConfig.customUrl.defaultStoreUrl;
    //Get registry mapping
    var currentMapping = jagg.module("customurl").getCurrentUserMapping(tenantDomain, API_CLOUD_TYPE);
    if (currentMapping != null && currentMapping.store.customUrl != defaultStoreURL) {
        var confirmPagePath = cloudConfig.registrationEmail.confirmPagePath;
        link = "https://" + currentMapping.store.customUrl + confirmPagePath + prefix + "&tenant=" + tenantDomain;
    }
    return link;
}
%>
