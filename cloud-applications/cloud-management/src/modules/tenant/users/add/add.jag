<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");
include("/modules/database/sql.jag");
// used for logging
var log = new Log("/modules/tenant/users/add/add.jag");

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

var from = cloudConfig.registrationEmail.from;
var subject =  cloudConfig.invitationEmail.subject;
var targetEpr = cloudConfig.registrationEmail.targetEpr.toString();

var addUserRoles = function addUserRoles(username,userRoles) {
	//    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
	log.info("addUserRoles "+username);
	var tenantDomain=modManager.getTenantDomain();
	var context = multitenancy.getPrivilegedCarbonContext();
	var tenantManager = multitenancy.getTenantManager();
	try {
		context.startTenantFlow();
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
		result = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').addUserRoles(username,userRoles);
	} finally {
		context.endTenantFlow();
	}


};

var updateUserRoles = function (userName,addRoles,removeRols) {
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        var paraAddRoles,paraRemoveRoles;
        paraAddRoles=addRoles.split(",");
        paraRemoveRoles=removeRols.split(",");
        if((paraAddRoles.length==0)||(paraAddRoles[0].length==0)){
            paraAddRoles=null;
        }
        if((paraRemoveRoles.length==0)||(paraRemoveRoles[0].length==0)){
            paraRemoveRoles=null;
        }
        var result;
        var context = multitenancy.getPrivilegedCarbonContext();
        var tenantManager = multitenancy.getTenantManager();
        try {
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            result = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateUserRoles(userName,paraAddRoles,paraRemoveRoles);
        } finally {
            context.endTenantFlow();
        }
        return result;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var deleteUserFromTenant = function (userName){
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        userName = modManager.getUserNameFromEmail(userName);
        var isSuccess = "false";
        var context=multitenancy.getPrivilegedCarbonContext();
        var tenantManager= multitenancy.getTenantManager();
        try {
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            isSuccess = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').removeUserFromTenant(userName);
        }catch (e){
            log.error(e);
        }finally{
            context.endTenantFlow();
        }
        return isSuccess;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var sendInvite = function (email, tenant, roles, message) {
    log.info("Sending invitation for invited user " + email);
    var displayName = modManager.getTenantDisplayName(tenant);
    var uuid = generateUUId();
    log.info("Adding temp registration for user " + email);
    var getRolesQueryString = SQL_QUERY_STRINGS.SELECT_ROLES_FROM_TEMP_INVITEE;
    var parameters = [tenant, email];
    var existingRecord = jagg.module("database").executeQuery(getRolesQueryString, parameters);
    if (existingRecord != "" && existingRecord != null) {
        var existingRoles = existingRecord[0]["roles"].split(",");
        var userRoleArray = roles.split(",");
        for (var i = 0; i < existingRoles.length; i++) {
            var exsistingRole = existingRoles[i].trim();
            var isRoleExistsInRoleArray = false;
            for (var j = 0; j < userRoleArray.length; j++) {
                if (exsistingRole == userRoleArray[j]) {
                    isRoleExistsInRoleArray = true;
                    break;
                }
            }
            if (!isRoleExistsInRoleArray) {
                roles = exsistingRole + "," + roles;
            }
        }
    }
    var queryString = SQL_QUERY_STRINGS.INSERT_INTO_TEMP_INVITEE;
    parameters = [tenant, email, uuid, roles, uuid, roles];
    var results = jagg.module("database").executeQuery(queryString, parameters);

    log.info("Successfully added the temp registration");
    var link = targetEpr + "?confirmation=" + uuid + "&isInvitee=true";
    sendEmail(email, link, displayName, roles, message);
    var is_enable = cloudConfig.RightWaveAddUserApi.enable_RightWaveAddUserApi;
    if (is_enable.toString() == "true") {
        setTimeout(function () {
            var modEvents = jagg.module("events");
            var jsonData = {
                "email": email
            };
            var URL = cloudConfig.RightWaveAddUserApi.cloudSignup;
            var data = "json=" + JSON.stringify(jsonData);
            var result = post(URL, data, {
                'Content-Type': 'application/json'}, 'text');
            var type = "CloudMgt";
            var msg = JSON.parse(result['data']);
            var actionString = "Rightwave-" + type + "-cloudsignup{Invite}:";
            var page = "Rightwave";
            var item = type;
            var events = [];
            if (msg.message == RIGHTWAVE_SUBMISSION_SUCCESS) {
                actionString = actionString + "Success";
                log.info("Rightwave api call Cloud Signup is success for " + email);
            } else {
                actionString = actionString + "Failed";
                log.error("Rightwave api call failed for the user " + email);
            }
            var event = {};
            event.item = item;
            event.timestamp = new Date().getTime();
            event.pageName = page;
            event.action = actionString;
            events[events.length] = event;
            modEvents.publishUserActivity(events, email, tenant);
        }, 0);
    }
    return email;
};

var sendEmail = function(to,link,domain,roles,message) {
    var userRoleArray = roles.split(",");
    var displayRoles="";
    var displayRoleArray = [];
    for(var i=0;i<userRoleArray.length;i++){
        var userRoleDisplayName = jagg.module("util").getUserRoleDisplayName(userRoleArray[i]);
        if(userRoleDisplayName != null && userRoleDisplayName != "" && userRoleDisplayName != "null") {
            displayRoleArray.push(userRoleDisplayName);
        }
    }
    for(var j=0;j<displayRoleArray.length;j++){

        displayRoles = displayRoles + displayRoleArray[j];
        //Appending (',') or ('and') to the displayRoles string value.
        if (j == displayRoleArray.length - 2) {
            displayRoles = displayRoles + " and ";
        } else if (j < displayRoleArray.length - 2) {
            displayRoles = displayRoles + ", ";
        }
    }
    if(displayRoleArray.length == 1){
        displayRoles = displayRoles + " role";
    } else{
      displayRoles = displayRoles + " roles";
    }
    var body = jagg.module("util").getObjFromFile("/site/conf/emails/user_invitation_email.body.txt");

    body = body.replace("$link",link).replace("$link",link);
    body = body.replace("$tenant",domain);
    body = body.replace("$roles",displayRoles);
    if(message != null && message != "" && message != "null" && message !=undefined){
        body = body.replace("$message",message);
    }else{
        body = body.replace("$message","");
    }
    var loggedInUserEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
    jagg.module("util").sendEmail(body, subject + loggedInUserEmail, to);
    log.info("Email successfully sent to " + to);
};

var sendUserInvite = function (emails,roles){
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        var userNames;
        userNames = modManager.getUserNamesFromEmails(emails);
        var isSuccess = "true";
        try {
            for (var i = 0; i < userNames.length; i++) {
                sendInvite(emails[i], tenantDomain, roles);
            }
        }catch (e){
            log.error(e);
        }
        return isSuccess;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var constructRoleList = function constructRoleList(roles){
    var roleList = "";
    if(roles != null && roles != "" && roles != "null" && roles != undefined){
        for(var i = 0; i < roles.length; i++){
            if(i == 0){
                roleList = roles[i].id;
            }else{
                roleList = roleList+","+roles[i].id;
            }
        }
    }
    return roleList;
}

var inviteUsers = function inviteUsers(userRoleList, defaultRoles, message) {
    var tenantDomain = modManager.getTenantDomain();
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        try {
            for (var i = 0; i < userRoleList.length; i++) {
                var user = userRoleList[i];
                var rolesList;
                var defaultRoleList = constructRoleList(defaultRoles);
                if (defaultRoleList != "") {
                    rolesList = defaultRoleList + "," + constructRoleList(userRoleList[i].roles);
                }
                else {
                    rolesList = constructRoleList(userRoleList[i].roles);
                }
                sendInvite(user.id, tenantDomain, rolesList, message);
            }
        } catch (e) {
            log.error("Error while sending user invitations");
            log.error(e);
            throw "Error while sending user invitations";
        }
        return true;
    }
    else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var resendInvite = function resendInvite(email) {

    var tenantDomain = modManager.getTenantDomain();
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        try {
            log.info("Re-sending invitation to invited user " + email);
            var displayName = modManager.getTenantDisplayName(tenantDomain);
            var queryString = SQL_QUERY_STRINGS.SELECT_UUID_AND_ROLES_FROM_TEMP_INVITEE;
            var parameters = [email, tenantDomain];
            var results = jagg.module("database").executeQuery(queryString, parameters);
        } catch (e) {
            log.error(e);
            log.error("Error while re-sending invitation to " + email);
            throw "Error while re-sending invitation to " + email;
        }
        if (results != null && results != "") {
            var uuid = results[0]["uuid"];
            var userRoles = results[0]["roles"];
            var link = targetEpr + "?confirmation=" + uuid + "&isInvitee=true";
            sendEmail(email, link, displayName, userRoles);
            log.info("Re-sending invitation to invited user " + email +" successful")
            return true;
        } else {
            log.info("No pending users available for " + tenantDomain + " and email " + email);
            return false;
        }
    }
    else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var sendEmailWithCustomMessage = function (toList, emailSubject, message) {

    var tenantDomain = modManager.getTenantDomain();
    var commonBody = jagg.module("util").getObjFromFile("/site/conf/emails/custom_email.body.txt");
    commonBody = commonBody.replace("$message", message);
    var loggedInUserEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
    if (jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)) {
        for (var i = 0; i < toList.length; i++) {
            jagg.module("util").sendEmail(commonBody, emailSubject + " from :" + loggedInUserEmail, toList[i]);
            log.info("Custom email successfully sent to " + toList[i]);
        }
        return true;
    } else {
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};

var importInvitedUser = function (confirmationKey, defaultPassword, firstName, lastName) {
    try {
        var tenantMod = jagg.module("tenant");
        var isUserExist = false;
        var queryString = SQL_QUERY_STRINGS.SELECT_FROM_TEMP_INVITEE;
        var parameters = [confirmationKey];
        var results = jagg.module("database").executeQuery(queryString, parameters);
        var email = results[0]["email"];
        var roles = results[0]["roles"];
        var tenantDomain = results[0]["tenantDomain"];
        log.info(email + " is invited for " + tenantDomain + " as  " + roles);
        session.put("TENANT_DOMAIN", tenantDomain.toString());

        var userName = modManager.getUserNameFromEmail(email);
        isUserExist = tenantMod.isExistingUser(userName);

        var context = multitenancy.getPrivilegedCarbonContext();
        var tenantManager = multitenancy.getTenantManager();
        var tenantId = tenantManager.getTenantId(tenantDomain);
        var assignedRoles;
        assignedRoles = roles.split(",");
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantId);
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager = realm.getUserStoreManager();
        var userRoles = userStoreManager.getRoleListOfUser(userName);
        var isUserOfTenant = false;
        //checks whether the user exists in the tenant or not by checking default role.
        for (var i = 0; i < userRoles.length; i++) {
            if (userRoles[i] == "default") {
                isUserOfTenant = true;
                break;
            }
        }
        if (!isUserExist) {
            log.info("Adding new user, " + userName + " FirstName : " + firstName + " LastName : " + lastName);
            server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').importUserTotheTenant(userName, defaultPassword, email, firstName, lastName);
            jagg.module("util").addUserToOT(email, defaultPassword, firstName, lastName);
        } else if (!isUserOfTenant) {
            assignedRoles.push(CLOUD_DEFAULT_ROLE);  //Need to add default role for users who exists already but not a member of tenant; hence adding default role here
        }
        log.info("Updating the user roles of user " + userName);
        server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateUserRoles(userName, assignedRoles, null);
    } catch (e) {
        log.error("Error while importing " + firstName + " " + lastName + "." + e);
        throw "Error while importing " + firstName + " " + lastName + "." + e;
    } finally {
        context.endTenantFlow();
    }
    try {
        //Adding User -Tenant Mapping
        var queryString = SQL_QUERY_STRINGS.INSERT_INTO_TENANT_USER_MAPPING;
        var parameters = [userName, tenantDomain];
        var results = jagg.module("database").executeQuery(queryString, parameters);
        var deleteString = SQL_QUERY_STRINGS.DELETE_FROM_TEMP_INVITEE;
        parameters = [confirmationKey];
        results = jagg.module("database").executeQuery(deleteString, parameters);
    } catch (e) {
        log.error("Error while adding the user to tenant : " + tenantDomain + ". " + e);
        throw "Error while adding the user to tenant " + e;
    }
    return roles;
};

var changePassword=function(oldPassword,newPassword){
	var userName = session.get('LOGGED_IN_USER');
	var userEmail = session.get("LOGGED_IN_USER_EMAIL");
	var tenantAwareUserName = modManager.getTenantAwareUsername(userName);
	var tenantDomain=modManager.getTenantDomain();
	var context=multitenancy.getPrivilegedCarbonContext();
	var tenantManager = multitenancy.getTenantManager();
	try {
		var tenantId = tenantManager.getTenantId(tenantDomain);
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
		var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
		var realm = realmService.getTenantUserRealm(tenantId);
		var userStoreManager=realm.getUserStoreManager();
		var result=userStoreManager.updateCredential(tenantAwareUserName,newPassword,oldPassword);
		var claimValue=userStoreManager.setUserClaimValue(tenantAwareUserName,"http://wso2.org/claims/firstlogin","false",null);

        jagg.module("util").changeOTUserPass(userEmail,newPassword);

	}catch (e){
		log.error("Error occured while changing password");
		throw "Error occured while changing password";
	}finally{
		context.endTenantFlow();
	}
};

var getBlockedSubscriptions = function(tenantDomain) {
	var roleList= new Array();
	//var tenantId = modManager.getTenantId(tenantDomain);
	//getting the paid and inactive subscriptions
	var queryString =SQL_QUERY_STRINGS.SELECT_BLOCKED_SUBSCRIPTION_FROM_BILLING_STATUS;
			var parameters =[tenantDomain,"PAID","DISABLED"];
	        var results = jagg.module("database").executeQuery(queryString, parameters);
	        for(var i =0; i< results.length; i++){
	        	roleList.push(results[i]["SUBSCRIPTION"]);
	        }
	return roleList;
};

var generateUUId = function() {
	log.info("generating the UUID ");
	var d = new Date().getTime();
	var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
		var r = (d + Math.random()*16)%16 | 0;
		d = Math.floor(d/16);
		return (c=='x' ? r : (r&0x7|0x8)).toString(16);
	});
	return uuid;
};

%>
