<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");
include("/modules/database/sql.jag");
// used for logging
var log = new Log("/modules/tenant/users/add/add.jag");

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

var from = cloudConfig.registrationEmail.from;
var subject =  cloudConfig.invitationEmail.subject;
var senderEmail = cloudConfig.registrationEmail.username;
var senderPort = parseInt(cloudConfig.registrationEmail.port);
var senderPassword= cloudConfig.registrationEmail.password;
var senderHost= cloudConfig.registrationEmail.host;
var tls = cloudConfig.registrationEmail.tls.toString();
var targetEpr = cloudConfig.registrationEmail.targetEpr.toString();

//var appfactory = require('appFactory');
//var multitenancy = carbon.multitenancy;
//var server = require('/modules/server.js');

/*Add user to the tenant domain with a particlualr role*/
var addRolestoUserinTenantDomain = function addUserToTenantDomain(requestersUsername,username,userRole) {

	/*  var tenantDomain=session.get("APPLICATION_INFO").tenantDomain;
	 var userManager = server.userManager(server,tenantDomain);
	var user=userManager.getUser(username);
	user.addRoles(userRole);
	*/

};
var addUserRoles = function addUserRoles(username,userRoles) {
	//    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
	log.info("addUserRoles "+username);
	var tenantDomain=modManager.getTenantDomain();
	var context = multitenancy.getPrivilegedCarbonContext();
	var tenantManager = multitenancy.getTenantManager();
	try {
		context.startTenantFlow();
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
		result = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').addUserRoles(username,userRoles);
	} finally {
		context.endTenantFlow();
	}


};

var getTenantDisplayName = function getTenantDisplayName(tenantKey) {
	var queryString = SQL_QUERY_STRINGS.SELECT_DISPLAY_NAME;
    var parameters =[tenantKey];
    var results = jagg.module("database").executeQuery(queryString, parameters);

	var displayName = results[0]["displayName"];
	log.info("displayName "+displayName);

	return displayName;

};

var updateUserRoles = function updateUserRoles(userName,addRoles,removeRols) {
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        var paraAddRoles,paraRemoveRoles;
        paraAddRoles=addRoles.split(",");
        paraRemoveRoles=removeRols.split(",");
        if((paraAddRoles.length==0)||(paraAddRoles[0].length==0)){
            paraAddRoles=null;
        }
        if((paraRemoveRoles.length==0)||(paraRemoveRoles[0].length==0)){
            paraRemoveRoles=null;
        }
        var result;
        var context = multitenancy.getPrivilegedCarbonContext();
        var tenantManager = multitenancy.getTenantManager();
        try {
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            result = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateUserRoles(userName,paraAddRoles,paraRemoveRoles);
        } finally {
            context.endTenantFlow();
        }
        return result;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};


var deleteUserFromTenant = function deleteUserFromTenant(userName){
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        userName = jagg.module("util").getUserNameFromEmail(userName);
        var isSuccess = "false";
        var context=multitenancy.getPrivilegedCarbonContext();
        var tenantManager= multitenancy.getTenantManager();
        try {
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            isSuccess = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').removeUserFromTenant(userName);
        }catch (e){
            log.error(e);
        }finally{
            context.endTenantFlow();
        }
        return isSuccess;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};


var sendInvite = function(email,tenant,roles) {
	log.info("Sending invitation for invited user "+email);
    var displayName = getTenantDisplayName(tenant);
	var uuid = generateUUId ();
	log.info("uuid "+uuid);
	log.info("Adding temp registration for user");
	var queryString =SQL_QUERY_STRINGS.INSERT_INTO_TEMP_INVITEE;
	var parameters =[tenant,email,uuid,roles];
    var results = jagg.module("database").executeQuery(queryString, parameters);

	log.info("Sucessfully added the temp registration");
	var link = targetEpr+"?confirmation="+uuid+"&isInvitee=true";
	sendEmail(email,link,displayName,roles);
	var is_enable = cloudConfig.RightWaveAddUserApi.enable_RightWaveAddUserApi;
		if(is_enable.toString() == "true") {
			setTimeout(function () {
				var modEvents = jagg.module("events");
				var jsonData={
					"email" : email
				};
				var URL = cloudConfig.RightWaveAddUserApi.cloudSignup;
				var data = "json="+JSON.stringify(jsonData);
				var result = post(URL,data,{
					'Content-Type': 'application/json'}, 'text');
				var type ="CloudMgt";
			    var msg = result['data'];
				var actionString = "Rightwave-"+type+"-cloudsignup{Invite}:";
				var page = "Rightwave";
				var item = type;
				var events = [];
				if(msg === "Data Submitted Successfully") {
					actionString =  actionString+"Success";
				} else {
					actionString =  actionString+"Failed";
					log.error("Rightwave api call failed for the user "+email);
				}
				var event={
				};
				event.item = item;
				event.timestamp = new Date().getTime();
				event.pageName = page;
				event.action = actionString;
				events[events.length] = event;
				modEvents.publishUserActivity(events,email,tenant);
			} ,0);
		}
	return email;
}

var sendEmail = function(to,link,domain,roles) {
    var userRoleArray = roles.split(",");
    var displayRoles="";
    for(var i=0;i<userRoleArray.length;i++){
        var userRoleDisplayName = jagg.module("util").getUserRoleDisplayName(userRoleArray[i]);
        if(userRoleDisplayName != null && userRoleDisplayName != "" && userRoleDisplayName != "null") {
            displayRoles = displayRoles + userRoleDisplayName;

            //Appending (',') or ('and') to the displayRoles string value.
            if (i == userRoleArray.length - 2) {
                displayRoles = displayRoles + " and ";
            } else if (i < userRoleArray.length - 2) {
                displayRoles = displayRoles + ", ";
            }
        }
    }
    if(userRoleArray.length == 1){
        displayRoles = displayRoles + " role";
    } else{
        displayRoles = displayRoles + " roles";
    }

    var body = jagg.module("util").getObjFromFile("/site/conf/emails/user_invitation_email.body.txt");

	body = body.replace("$link",link).replace("$link",link);
	body = body.replace("$tenant",domain);
	body = body.replace("$roles",displayRoles);
	var loggedInUserEmail = String(session.get("LOGGED_IN_USER_EMAIL"));
	jagg.module("util").sendEmail(body, subject + loggedInUserEmail, to);
	log.info("Email successfully sent to " + to);
}

var sendUserInvite = function sendUserInvite(users,roles){
    var tenantDomain=modManager.getTenantDomain() ;
    if(jagg.module("permission").hasTenantLevelUserMgtPermission(tenantDomain)){
        var userNames;
        userNames = getUserNamesFromEmail(users);
        var loggedInUser = jagg.module("util").getDomainLessUserName(String(session.get("LOGGED_IN_USER")));

        var isSuccess = "true";

        var context=multitenancy.getPrivilegedCarbonContext();
        var tenantManager= multitenancy.getTenantManager();

        try {
            for(var i =0; i< userNames.length; i++){
             sendInvite(users[i],tenantDomain,roles);
             }
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        }catch (e){
            log.error(e);

        }finally{
            context.endTenantFlow();
        }
        return isSuccess;
    }else{
        var msg = "User " + String(session.get("LOGGED_IN_USER")) + " is not allowed to perform action";
        log.error(msg);
        return false;
    }
};



var importInvitedUser = function importInvitedUser(confirmationKey, defaultPassword, firstName, lastName){

	try {
		var tenantMod = jagg.module("tenant");
		var isUserExist = false;
		var queryString =SQL_QUERY_STRINGS.SELECT_FROM_TEMP_INVITEE;
		var parameters =[confirmationKey];
        var results = jagg.module("database").executeQuery(queryString, parameters);
		var email = results[0]["email"];
		var roles = results[0]["roles"];
		var tenantDomain = results[0]["tenantDomain"];
		log.info(email+" is invited for "+tenantDomain+" as  "+roles);
		session.put("TENANT_DOMAIN", tenantDomain.toString());


		var userName = getUserNameFromEmail(email);
		isUserExist = tenantMod.isExistingUser(userName);
		log.info("Adding new user " + userName + " firstName= " + firstName + " lastname = " + lastName);

		
		var context=multitenancy.getPrivilegedCarbonContext();
		var tenantManager= multitenancy.getTenantManager();
		var assignedRoles;
		assignedRoles=roles.split(",");
		context.startTenantFlow();
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);

		if(!isUserExist) {
		    server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').importUserTotheTenant(userName, defaultPassword, email, firstName, lastName);
			jagg.module("util").addUserToOT(email, defaultPassword, firstName, lastName);
			//jagg.module("util").addUserToRightWave(email);
		}
        log.info("Updating the user roles");
        server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateUserRoles(userName, assignedRoles, null);
	}catch(e){
        log.error("Error while importing " + firstName + " " + lastName + "." + e);
        throw "Error while importing " + firstName + " " + lastName + "." + e;
    }finally{
		context.endTenantFlow();
	}
	try{
        //Adding User -Tenant Mapping
        var queryString = SQL_QUERY_STRINGS.INSERT_INTO_TENANT_USER_MAPPING;
        var parameters =[userName,tenantDomain];
        var results = jagg.module("database").executeQuery(queryString, parameters);
        var deleteString = SQL_QUERY_STRINGS.DELETE_FROM_TEMP_INVITEE;
        parameters =[confirmationKey];
        results = jagg.module("database").executeQuery(deleteString, parameters);
    }catch(e){
        log.error("Error while adding the user to tenant "+e); 
        throw "Error while adding the user to tenant "+e;
    }
	return roles;
}


var getUserNameFromEmail = function getUserNameFromEmail(user){
	var userName =  user.replace(/@/g, ".");
	return userName;
}


var getUserNamesFromEmail = function getUserNamesFromEmail(users){
	var userNames = [];

	for(var i =0; i< users.length; i++){
		userNames[i] =  users[i].replace(/@/g, ".");
	}
	return userNames;
}



var changePassword=function(oldPassword,newPassword){
	var username = session.get('LOGGED_IN_USER');
	var userEmail = session.get("LOGGED_IN_USER_EMAIL");
	var user = username.substring(0,userName.lastIndexOf('@'));
	var tenantDomain=modManager.getTenantDomain();
	var context=multitenancy.getPrivilegedCarbonContext();
	var tenantManager = multitenancy.getTenantManager();
	try {
		var tenantId = tenantManager.getTenantId(tenantDomain);
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
		var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
		var realm = realmService.getTenantUserRealm(tenantId);
		var userStoreManager=realm.getUserStoreManager();
		var result=userStoreManager.updateCredential(user,newPassword,oldPassword);
		var claimValue=userStoreManager.setUserClaimValue(user,"http://wso2.org/claims/firstlogin","false",null);

        jagg.module("util").changeOTUserPass(userEmail,newPassword);

	}catch (e){
		log.error("Error occured while changing password");
		throw "Error occured while changing password";
	}finally{
		context.endTenantFlow();
	}
}
var getBlockedSubscriptions = function(tenantDomain) {
	var roleList= new Array();
	//var tenantId = modManager.getTenantId(tenantDomain);
	//getting the paid and inactive subscriptions
	var queryString =SQL_QUERY_STRINGS.SELECT_BLOCKED_SUBSCRIPTION_FROM_BILLING_STATUS;
			var parameters =[tenantDomain,"PAID","DISABLED"];
	        var results = jagg.module("database").executeQuery(queryString, parameters);
	        for(var i =0; i< results.length; i++){
	        	roleList.push(results[i]["SUBSCRIPTION"]);
	        }
	return roleList;
}

var generateUUId = function() {
	log.info("generating the UUID ");
	var d = new Date().getTime();
	var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
		var r = (d + Math.random()*16)%16 | 0;
		d = Math.floor(d/16);
		return (c=='x' ? r : (r&0x7|0x8)).toString(16);
	});
	return uuid;
}

%>
