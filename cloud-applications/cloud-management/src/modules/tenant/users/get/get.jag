<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var subscriptionsType = cloudConfig.subscriptions.type;
// used for logging
var log = new Log("modules.tenant.users.get.get.jag");

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var getUsersofTenant = function getUsersofTenant(tenantDomain) {
    var users = getUserArrayFromService(tenantDomain);
    var resultUsers = [];
    for (var i = 0; i < users.length; i++) {
        var user = users[i];
        var tmpUser = {};
        var tmpFirstName = user.getFirstName();
        var tmpLastName = user.getLastName();
        var tmpRoles = user.getRoles();
        tmpUser.userName = user.getUserName();
        tmpUser.email = user.getEmail();
        if (tmpFirstName == "$1" || tmpLastName == "$2" || tmpFirstName == "undefined" || (tmpFirstName == null)) {
            tmpUser.displayName = tmpUser.email;
        } else {
            tmpUser.displayName = user.getDisplayName();
        }
        tmpUser.firstName = tmpFirstName;
        tmpUser.lastName = tmpLastName;
        var allRoles = "";
        for (var j = 0; j < tmpRoles.length; j++) {
            var enableDisplayRole = getProperty("TenantRoles.Role." + tmpRoles[j] + ".DisplayRole") == "true";
            // enableDisplayRole specifies whether or not to display a role ( Added parameter in cloud-mgt.xml )
            if (!enableDisplayRole || tmpRoles[j].indexOf(cloudConfig.internalRole) != -1) {
                continue;
            }
            if (allRoles != "") {
                allRoles = tmpRoles[j] + "\n" + allRoles;
            } else {
                allRoles = tmpRoles[j];
            }
        }
        tmpUser.roles = allRoles;
        tmpUser.displayRoles = [];
        for (var tempRole in tmpRoles) {
            var tmpRole = tmpRoles[tempRole];
            var displayName = getProperty("TenantRoles.Role." + tmpRole + ".DisplayName");
            if (tmpRole == cloudConfig.adminRole) {
                tmpUser.displayRoles = [];
                tmpUser.displayRoles.push(cloudConfig.adminRoleDisplayName);
                break;
            }
            if (displayName != null) {
                tmpUser.displayRoles.push(displayName);
            }
        }
        resultUsers.push(tmpUser);
    }
    session.put('tenantUsers', resultUsers);
    if (log.isDebugEnabled()) {
        log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);
    }
    return resultUsers;
};

var getUsersOfTenantByCloudType = function getUsersOfTenantByCloudType(tenantDomain, cloudType) {
    var users = getUserArrayFromService(tenantDomain);
    var cloudTypeRoles = getRolesOfCloudType(cloudType);
    var resultUsers = [];
    for (var i = 0; i < users.length; i++) {
        var user = users[i];
        var tmpUser = {};
        var tmpUsername = user.getUserName();
        var tmpEmail = user.getEmail();
        var tmpDisplayName = user.getDisplayName();
        var tmpFirstName = user.getFirstName();
        var tmpLastName = user.getLastName();
        var tmpRoles = user.getRoles();
        tmpUser.userName = tmpUsername;
        tmpUser.email = tmpEmail;
        if (tmpFirstName == "$1" || tmpLastName == "$2" || tmpFirstName == "undefined" || (tmpFirstName == null)) {
            tmpUser.displayName = tmpUser.email;
        } else {
            tmpUser.displayName = tmpDisplayName;
        }
        tmpUser.firstName = tmpFirstName;
        tmpUser.lastName = tmpLastName;
        tmpUser.roleTypes = [];
        for (var j = 0; j < tmpRoles.length; j++) {
            var enableDisplayRole = getProperty("TenantRoles.Role." + tmpRoles[j] + ".DisplayRole") == "true";
            // enableDisplayRole specifies whether or not to display a role ( Added parameter in cloud-mgt.xml )
            if (!enableDisplayRole || tmpRoles[j].indexOf(cloudConfig.internalRole) != -1) {
                continue;
            }
            if (tmpRoles[j] == cloudConfig.adminRole) {
                var roles = {};
                roles.role = tmpRoles[j];
                roles.displayName = cloudConfig.adminRoleDisplayName;
                tmpUser.roleTypes.push(roles);
                continue;
            }
            for (var k = 0; k < cloudTypeRoles.length; k++) {
                if (tmpRoles[j] == cloudTypeRoles[k].roleName) {
                    var roles = {};
                    roles.role = cloudTypeRoles[k].roleName;
                    roles.displayName = cloudTypeRoles[k].displayRoles;
                    tmpUser.roleTypes.push(roles);
                    break;
                }
            }
        }
        if (tmpUser.roleTypes[0] != "" && tmpUser.roleTypes[0] != null) {
            resultUsers.push(tmpUser);
        }
    }
    return resultUsers;
};

var getUserArrayFromService = function getUserArrayFromService(tenantDomain) {
    var users = [];
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        var userMgtService = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService');
        users = userMgtService.getUsersofTenant();
    } catch (e) {
        log.error("Error while getting users of tenant " + tenantDomain);
        log.error(e);
        throw "Error while getting users of tenant " + tenantDomain;
    } finally {
        context.endTenantFlow();
    }
    return users;
};

var getRolesOfCloudType = function getRolesOfCloudType(cloudType) {
    var cloudTypeRoles;
    for (i = 0; i < subscriptionsType.length; i++) {
        if ((subscriptionsType[i].id).equals(cloudType)) {
            cloudTypeRoles = subscriptionsType[i].roleTypes;
            break;
        }
    }
    return cloudTypeRoles;
};

var getPendingUsers = function getPendingUsersOfRole(tenantDomain, role) {
    try {
        var queryString = SQL_QUERY_STRINGS.SELECT_FROM_TEMP_INVITEE_BY_TENANT_DOMAIN;
        var parameters = [tenantDomain];
        var results = jagg.module("database").executeQuery(queryString, parameters);
    } catch (e) {
        log.error("Error while retrieving pending users of tenant " + tenantDomain);
        log.error(e);
        throw "Error while retrieving pending users";
    }
    var pendingUsers = [];
    for (var i = 0; i < results.length; i++) {
        var tmpEmail = results[i]["email"];
        var tmpRoles = results[i]["roles"].split(',');
        var pendingUser = {};
        pendingUser.email = tmpEmail;
        pendingUser.roles = [];
        for (var k = 0; k < tmpRoles.length; k++) {
            displayRole = jagg.module("util").getUserRoleDisplayName(tmpRoles[k]);
            if (displayRole != null && displayRole != "") {
                pendingUser.roles.push(displayRole);
            }
        }
        pendingUsers.push(pendingUser);

    }
    return pendingUsers;
};

var getPendingUsersOfRole = function getPendingUsersOfRole(tenantDomain, role) {

    try {
        var queryString = SQL_QUERY_STRINGS.SELECT_FROM_TEMP_INVITEE_BY_TENANT_DOMAIN;
        var parameters = [tenantDomain];
        var results = jagg.module("database").executeQuery(queryString, parameters);
    } catch (e) {
        log.error("Error while retrieving pending users of tenant " + tenantDomain + "for role " + role);
        log.error(e);
        throw "Error while retrieving pending users";
    }
    var pendingUsers = [];
    for (var i = 0; i < results.length; i++) {
        var tmpEmail = results[i]["email"];
        var tmpRoles = results[i]["roles"].split(',');
        for (var j = 0; j < tmpRoles.length; j++) {
            if (tmpRoles[j] == role) {
                pendingUser = {};
                pendingUser.email = tmpEmail;
                pendingUser.roleTypes = [];
                for (var k = 0; k < tmpRoles.length; k++) {
                    var userRoles = {};
                    displayRole = jagg.module("util").getUserRoleDisplayName(tmpRoles[k]);
                    if (displayRole != null && displayRole != "") {
                        userRoles.role = tmpRoles[k];
                        userRoles.displayName = displayRole;
                        pendingUser.roleTypes.push(userRoles);
                    }
                }
                pendingUsers.push(pendingUser);
                break;
            }
        }
    }
    return pendingUsers;
};

var getUserRolesByCloudType = function getUserRolesByCloudType(username, cloudType) {

    try {
        var userDetails = getUserInfo(username);
        var tmpUser = {};
        tmpUser.roleTypes = [];
        var tmpRoles = userDetails.roles;
        var cloudTypeRoles = getRolesOfCloudType(cloudType);
        for (var j = 0; j < tmpRoles.length; j++) {
            if (tmpRoles[j] == cloudConfig.adminRole) {
                var roles = {};
                roles.role = tmpRoles[j];
                roles.displayName = cloudConfig.adminRoleDisplayName;
                tmpUser.roleTypes.push(roles);
                continue;
            }
            if (tmpRoles[j] == CLOUD_DEFAULT_ROLE) {
                continue;
            }
            for (k = 0; k < cloudTypeRoles.length; k++) {
                if (tmpRoles[j] == cloudTypeRoles[k].roleName) {
                    var roles = {};
                    roles.role = cloudTypeRoles[k].roleName;
                    roles.displayName = cloudTypeRoles[k].displayRoles;
                    tmpUser.roleTypes.push(roles);
                    break;
                }
            }
        }
        tmpUser.userName = userDetails.userName;
        tmpUser.email = userDetails.email;
        tmpUser.displayName = userDetails.displayName;
        tmpUser.firstName = userDetails.firstName;
        tmpUser.lastName = userDetails.lastName;
    } catch (e) {
        log.error(e);
        log.error("Error while retrieving user info for " + username);
        throw "Error while retrieving user info for " + username;
    }
    return tmpUser;
};

var getUserInfo = function getUserInfo(username) {
    var tmpUser = {};
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();

    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        var userMgtService = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService');
        var user = userMgtService.getUserInfo(username);
    } catch (e) {
        log.error("Error while retrieving user info for" + username);
        log.error(e);
    } finally {
        context.endTenantFlow();
    }
    try {
        tmpUser.userName = user.getUserName();
        tmpUser.email = user.getEmail();
        tmpUser.displayName = user.getDisplayName();
        tmpUser.firstName = user.getFirstName();
        tmpUser.lastName = user.getLastName();
        tmpUser.roles = user.getRoles();
        var temporaryRoles = tmpUser.roles;
        tmpUser.displayRoles = [];
        for (var temporaryRole in temporaryRoles) {
            tmpUser.displayRoles.push(getProperty("TenantRoles.Role." + temporaryRoles[temporaryRole] + ".DisplayName"));
        }
        if (log.isDebugEnabled()) {
            log.debug("Invoking service endpoint:" + endPoint + " returned result:" + result);
        }
    }
    catch (e) {
        log.error("Error while retrieving user info for" + username);
        log.error(e);
    }
    return tmpUser;
};

var isFirstLogin = function () {
    var user = session.get("LOGGED_IN_USER").split('@')[0];
    var tenantDomain = modManager.getTenantDomain();
    var tenantManager = multitenancy.getTenantManager();
    try {
        //context.startTenantFlow();
        var tenantId = tenantManager.getTenantId(tenantDomain);
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager = realm.getUserStoreManager();
        var claimValue = userStoreManager.getUserClaimValue(user, "http://wso2.org/claims/firstlogin", null);
        return claimValue;
    } catch (e) {
        log.error("Error occured while checking first login status");
        log.error(e);
        throw "Error occured while checking first login status"
    }
};

var getApplicatioinKeysOfUser = function (username) {
    var appsOfUser;
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        appsOfUser = server.osgiService('org.wso2.carbon.appfactory.application.mgt.service' +
                '.ApplicationUserManagementService').getApplicationKeysOfUser(username);
    } finally {
        context.endTenantFlow();
    }
    return appsOfUser;
};

var getUserListOfRole = function (role) {
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        var tenantId = tenantManager.getTenantId(tenantDomain);
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager = realm.getUserStoreManager();
        var result = userStoreManager.getUserListOfRole(role);
        return result;
    } catch (e) {
        log.error("Error occurred while getting users of role " + " " + role + " for tenant " + tenantDomain);
        log.error(e);
        throw e;
    } finally {
        context.endTenantFlow();
    }
};

%>
