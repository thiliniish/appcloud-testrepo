<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");

var log = new Log("modules.tenant.register.register.jag");
var modManager = jagg.module("manager");

var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

var CLOUDMGT_SERVICES =  cloudConfig.ServerUrls.cloudmgtServices.toString();
var IS_URL =  cloudConfig.ServerUrls.identity.toString();

var body = jagg.module("util").getObjFromFile("/site/conf/emails/new_registration_email.body.txt");

var from = cloudConfig.registrationEmail.from;
var subject =  cloudConfig.registrationEmail.subject;
var senderEmail = cloudConfig.registrationEmail.username;
var senderPort = parseInt(cloudConfig.registrationEmail.port);
var senderPassword= cloudConfig.registrationEmail.password;
var senderHost= cloudConfig.registrationEmail.host;
var tls = cloudConfig.registrationEmail.tls.toString();
var targetEpr = cloudConfig.registrationEmail.targetEpr.toString();

var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
//Calling the db
var cloudmgtDAO = new Packages.org.wso2.carbon.cloud.common.CloudMgtDAO();

var confirmUser = function (confirm, isInvitee, isStoreInvitee) {
    try {
        var isUserInvitee = (isInvitee != null && isInvitee == "true");
        var isStoreInvitee = (isStoreInvitee != null && isStoreInvitee == "true");
        var isInvitedUser = false;
        if (isUserInvitee) {
            session.put('isInvitee', true);
            session.put('isStoreInvitee', false);
            isInvitedUser = true;
        } else if (isStoreInvitee) {
            session.put('isStoreInvitee', true);
            session.put('isInvitee', true);
            isInvitedUser = true;
        } else {
            session.put('isInvitee', false);
            session.put('isStoreInvitee', false);
        }
        var CloudMgtDAO = Packages.org.wso2.carbon.cloud.common.CloudMgtDAO;
        var cloudmgtDAO = new CloudMgtDAO();

        var email = cloudmgtDAO.getEmailForUUID(confirm,isInvitedUser);

        if (email != null) {
            email = String(email);
            var username = modManager.getUserNameFromEmail(email);
            var isUserAvailable = modManager.isExistingUser(username);
            if ((isUserAvailable && isStoreInvitee) || (isUserAvailable && isUserInvitee)) {
                var tenantMod = jagg.module("tenant");
                var roles = tenantMod.importInvitedUser(confirm, null);
                var url = jagg.module("util").getInviteeDirectUrl(roles);
                if (log.isDebugEnabled()) {
                    log.debug("User [ " + username + " ] is invited to " + tenantMod);
                    log.debug("The invitee redirect URL for [ " + username + " ] - " + url);
                }
                return {
                    error: false,
                    status: 200,
                    data: url
                };
            }
            session.put('isUserAvail', isUserAvailable);
            session.put('registration-intermediate-data', confirm);
            session.put('registration-email', email);
            return {
                error: false,
                status: 200,
                data: "add-tenant.jag",
                registration : { confirmationKey : confirm, email : email }
            };
        } else {
            return {
                error: false,
                status: 410,
                data: "expired"
            };
        }
    } catch (e) {
        log.error("Error while confirming user [ " + email + " ]");
        log.error(e);
        return {
            error: true,
            message: e.message,
            status: 500
        };
    }
};

var getConfirmationEmail = function (confirm) {
    try {
        var email = cloudmgtDAO.getEmailForUUID(confirm, false);
        email = String(email);
        if (email != null) {
            cloudmgtDAO.removeTempRegistrationRecord(confirm);
            log.info("Retrieved the email [ " + email + " ] from TEMP_REGISTRATION table");
        } else {
            log.error("Unable to find a temporary record for confirmation code [ " + confirm + "]");
        }
        return email;
    } catch (e) {
        log.error("Error while getting confirmation email: " + confirm);
        log.error(e);
        throw (e);
    }
};

var registerOrg = function (organizationName, password, usagePlan, confirmationKey, firstName, lastName) {
    log.info("Registering the new organization [ " + organizationName + " ]");
    var email;
    var newUser = true;
    var adminUserName;
    if (confirmationKey != null) {
        email = getConfirmationEmail(confirmationKey);
        if (email != null) {
            adminUserName = modManager.getUserNameFromEmail(email.toString());
        } else {
            return false;
        }
    } else {
        var fullUserName = String(session.get("LOGGED_IN_USER"));
        adminUserName = modManager.getTenantAwareUsername(fullUserName);
        var tmpUser = jagg.module("tenant").getUserInfo(adminUserName);
        firstName = tmpUser.firstName;
        lastName = tmpUser.lastName;
        email = tmpUser.email;
        newUser = false;
    }
    return createTenant(organizationName, password, usagePlan, firstName, lastName, email, adminUserName, false);
};

/**
 * Method to create tenant for user
 *
 * returns {}
 */
var createTenant = function (organizationName, password, usagePlan, firstName, lastName, email, adminUserName,
                             isComplimentaryAccount) {
    log.info("User information to register [ Username: " + adminUserName + ", First Name: " + firstName + ", Last" +
            " Name: " + lastName + ", Email: " + email + " ]");
    newUser = (!isComplimentaryAccount && !modManager.isExistingUser(adminUserName));
    var organizationDomain = getCompanyId(organizationName);
    session.put("TENANT_DOMAIN", organizationDomain);
    log.info("Organization information to register [ Display Name: " + organizationName + ", Tenant Domain: " +
            organizationDomain + " ]");
    var adminPassword = jagg.module("util").escapeSpecialCharsXML(password);
    var id = registerTenantForTrustedUser(organizationDomain, adminUserName, adminPassword, firstName, lastName, email, usagePlan);
    var isUserInCloud = hasATenant(adminUserName);
    if (!isUserInCloud) {
        log.info("Sending tenant creation events of [ " + organizationDomain + " ] to BAM");
        server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').updateBAMStats(adminUserName, "ADD");
        try {
            //Adding user to OT
            jagg.module("util").addUserToOT(email, password, firstName, lastName);
            //Adding user to OT CloudUser role
            jagg.module("util").addUserToOTCloudUserRole(email);
        } catch (e) {
            log.error("Error while registering organization [ " + organizationDomain + " ] Email [ " + email + "]");
            log.error(e);
            throw (e);
        }

    }

    //adding tenant mapping to the table
    //TODO - Move the below to a listener
    storeTenantMGTRegistration(adminUserName, organizationDomain);
    storeTenantDisplayNameMapping(organizationDomain, organizationName);
    if (newUser) {
        log.info("Adding default login role for the user [ " + adminUserName + " ], tenant [" + organizationDomain + " ]");
        addDefaultLoginRole(adminUserName);
        log.info("Successfully added the default role for the user [ " + adminUserName + " ] of the"
                + " tenant [ " + organizationDomain + " ]");
    }
    storeSubscription(organizationDomain);

    //Add tenant to billing account database tables
    var tenantId = modManager.getTenantId(organizationDomain);
    log.info("Id of the tenant [ " + organizationDomain + " ] is [ " + tenantId + " ]");

    //Adding tenant to billing Account part removed temporarily.
    //TODO uncomment following lines

    jagg.module("billing").addTenantToBilling(tenantId, organizationDomain);
    log.info("Billing account created for tenant [ " + organizationDomain + " ]");

    log.info("Tenant registration completed for [ " + organizationDomain + " ]");

    //removing registration data from the session after successful registration.
    session.remove("registration-intermediate-data");
    session.remove("registration-email");
    return true;
};

var hasATenant = function (userName) {
    try {
        var results = JSON.parse(cloudmgtDAO.isUsernameAvail(userName));
        if(!results) {
            return false;
        } else {
            log.info("Username [ " + userName + " ] already in the cloud system");
            return true;
        }
    }catch (e){
        log.error(e)
    }
};

var getCompanyId = function (organizationName){
	var companyId =  organizationName.replace(/\s/g, "").replace(/([^a-zA-Z0-9\-])/gi, "").trim().toLowerCase();
	var length = companyId.length;
	var str;
	if(length <= 5){
		str = companyId + Math.floor(Math.random()*(9000)+1000);
		companyId =  str;
	}
	if(length > 15){
		str = companyId.substring(0,15);
		companyId =  str;
	}

	var avail = checkTenantDomainAvailability(companyId);
	if(avail){
		return companyId;
	}else {
        var tmpId;
        if(companyId.length == 15){
            tmpId = companyId.substring(0,11) + Math.floor(Math.random() * 10000);
        }else {
            tmpId = companyId + Math.floor(Math.random() * 10000);
        }
		return getCompanyId(tmpId);
	}
};

var checkUserExistence = function (username) {
    var isExist = false;
    try {
        isExist = modManager.isExistingUser(username);
    } catch (e) {
        log.error(e);
        return {
            error: true,
            message: e.message,
            status: 500
        };
    }
    return {
        error: false,
        status: 200,
        data: isExist
    };
};

var addDefaultLoginRole = function(userName) {
    try{
        return server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').addDefaultLoginRole(userName);
    }catch (e){
        log.error("Error while adding defualt role for user [ " + userName + " ]");
        log.error(e);
        throw (e);
    }
};

var storeSubscription = function( domain) {
    try{
        log.info("Adding subscriptions to the domain [ " + domain + " ]");
        cloudmgtDAO.addsubscriptionDetails(domain);
        log.info("Subscriptions added successfully to the domain [ " + domain + " ]");
    }catch (e){
        log.error("Error while storing subscription for domain [ " + domain + " ]");
        log.error(e);
        throw (e);
    }

};

var registerTenantForTrustedUser = function (tenantDomain,adminUser,adminPassword, firstName,lastName,email,usagePlan) {
    log.info("Creating the tenant with tenant domain [ "+tenantDomain+" ] for the admin user [" +
            adminUser+" ] with usage plan [ "+usagePlan+" ]");
	var ws = require("ws");
	var createTenant = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.1;
	options.action = "urn:registerTenantForTrustedUser";
	options.timeout = 1000000;
	options["HTTPHeaders"] = [
	{
		name : "Cookie", value :modManager.getAdminCookie(IS_URL)}
		];
		var payload = '<p:registerTenantForTrustedUser xmlns:p="http://services.mgt.tenant.carbon.wso2.org">' +
		'<tenantInfoBean xmlns="http://services.mgt.tenant.carbon.wso2.org">' +
		'<active xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">true</active>' +
		'<admin xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">' + adminUser + '</admin>' +
		'<adminPassword xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">' + adminPassword + '</adminPassword>' +
		'<createdDate xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">2001-12-31T12:00:00</createdDate>' +
		'<email xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">' + email + '</email>' +
		'<firstname xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">' + firstName + '</firstname>' +
		'<lastname xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">' + lastName + '</lastname>' +
		'<originatedService xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">WSO2 Cloud Manager</originatedService>' +
		'<tenantDomain xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">' + tenantDomain + '</tenantDomain>' +
		'<tenantId xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">-1</tenantId>' +
		'<usagePlan xmlns="http://beans.common.stratos.carbon.wso2.org/xsd">' + usagePlan + '</usagePlan>' +
		'</tenantInfoBean>' +
		'</p:registerTenantForTrustedUser>' ;

		var result;
		try {
			var endPoint = IS_URL + "TenantMgtService";
			createTenant.open(options,endPoint, false);
			createTenant.send(payload);
			result = createTenant.responseE4X;
            log.info("Tenant creation completed for tenant domain [ "+tenantDomain+" ]");
			return result;
		} catch (e) {
            log.error("Error while registering organization [ " + tenantDomain + " ] for trusted user [ " + email + " ]");
			log.error(e);
			throw (e);
		}
};

var checkDomainAvailability = function (domainName) {
    log.info("Checking the organization name availability");
    var isDomainAvailable = false;
    var isOrgAvailable ='';
    try{
        var companyDisplayName = jagg.module("util").escapeSpecialChars(domainName);
        var results = cloudmgtDAO.isOrganizationAvail(companyDisplayName);
        if(!results){
            isDomainAvailable = true;
            log.info("The organization name [ " + domainName + " ] is available");
        }else{
            log.info("The organization name [ " + domainName + " ] is not available");
        }
    }catch (e) {
        log.error("Error while checking organization name availability for [ " + domainName + " ]");
        log.error(e);
        throw (e);
    }
    return isDomainAvailable;
};

var checkTenantDomainAvailability = function (domainName) {
    log.info("Checking domain availability for [ " + domainName + " ]");
    var availability = false;
    try{
        var tenantSelfRegistrationService = server.osgiService('org.wso2.carbon.tenant.mgt.services.TenantSelfRegistrationService');
        availability = tenantSelfRegistrationService.checkDomainAvailability(domainName);
    }catch (e) {
        log.error("Error while checking domain availability for [ " + domainName + " ]");
        log.error(e);
        throw (e);
    }
    if(availability){
        log.info("The domain [ " + domainName + " ] is available ");
    }else{
        log.info("The domain [ " + domainName + " ] is not available ");
    }
    return availability;
};

var storeTenantMGTRegistration = function (username,tenantDomain) {
    try {
        //Adding User -Tenant Mapping
        log.info("Adding user [ " + username + " ] and tenantDomain [ " + tenantDomain + " ] as a tenant user mapping");
        cloudmgtDAO.addTenantUserMapping(username, tenantDomain);
        log.info("Successfully added tenant details for user [ " + username + " ] and tenant [ " + tenantDomain + " ]");
    }catch (e){
        log.error("Error while storing tenant details for tenant [ " + tenantDomain + " ] of user [ " + username +" ]");
        log.error(e);
        throw (e);
    }
};

var storeTenantDisplayNameMapping = function (tenantDomain, displayName) {
    try {
        //Adding Tenant - Display Name mapping
        log.info("Adding tenantDomain [ "+tenantDomain+" ] and displayName [ "+displayName+" ] as a tenant display name mapping");
        var displayName = jagg.module("util").escapeSpecialChars(displayName);   //company display name
        cloudmgtDAO.addOrganizationsDetails(tenantDomain, displayName);
        log.info("Successfully added the tenant display name mapping for tenant [ " + tenantDomain + " ]");
    } catch (e) {
        log.error("Error while adding the tenant display name mapping for tenant [ " + tenantDomain + " ]");
        log.error(e);
        throw (e);
    }
};

var storeTempRegistration = function (email, uuid, isInvitee) {
    log.info("Adding temporary registration for user [ " + email + "]");
    try {
        cloudmgtDAO.addTempRegistrationDetails(email, uuid, isInvitee);
    } catch (e) {
        log.error("Error while adding the temporary registration for user [ " + email + " ]");
        log.error(e);
        try {
            var emailSubject = "Storing in TEMP_REGISTRATION failed for user: " + email;
            var emailContent = "Initial tenant creation failed for newly signed-up user: ";
            emailContent = emailContent.concat(email).concat(" Exception occurred while Storing in TEMP_REGISTRATION. UUID: ").concat(uuid).
            concat(" ").concat(e).concat(e.stack);
            var isEmailSent = jagg.module("util").sendEmail(emailContent, emailSubject, null);
        } catch (ex) {
            log.error("Error sending email notification for store temp registration failure to [ " + email + " ]");
            log.error(ex);
        }
        throw (e);
    }
    log.info("Successfully added the temporary registration for user [ "+email+" ]");
};

var sendInvite = function (email, token) {
    try {
        var CloudMgtDAO = Packages.org.wso2.carbon.cloud.common.CloudMgtDAO;
        var cloudmgtDAO = new CloudMgtDAO();
        var isInvitePermitted = cloudmgtDAO.isInvitePermitted(email, false);
        if (isInvitePermitted) {
            log.info("Sending the sign up email for user [ " + email + " ]");
            var uuid = jagg.module("util").generateUUId();
            var link = targetEpr + "?confirmation=" + uuid;
            try {
                storeTempRegistration(email, uuid, 0);
                sendEmail(email, link);
            } catch (e) {
                log.error("Error while sending invitation to [ " + email + " ] ");
                log.error(e);
                return {
                    error: true,
                    message: e.message,
                    status: 500
                };
            }
            //<TODO> getting lead source capturing token

            //adding signed up user to MailCampaign
            var isEnabled = cloudConfig.MailCampaignAddUserApi.enable_MailCampaignAddUserApi;
            if (isEnabled) {
                setTimeout(function () {
                    var modEvents = jagg.module("events");
                    var URL = cloudConfig.MailCampaignAddUserApi.cloudSignup;
                    var data = "email=" + email;
                    var result = post(URL, data, {}, 'text');
                    var type = "CloudMgt";
                    var msg = result['data'];
                    var actionString = MAIL_CAMPAIGN + "-" + type + "-cloudsignup:";
                    var page = MAIL_CAMPAIGN;
                    var item = type;
                    var events = [];
                    if (MAIL_CAMPAIGN_SUBMISSION_SUCCESS.equals(msg)) {
                        actionString = actionString + "Success";
                        log.info(MAIL_CAMPAIGN + " cloud signup api call success for the user [ " + email + " ]");
                    } else {
                        actionString = actionString + "Failed";
                        log.error(MAIL_CAMPAIGN + " cloud signup api call failed for the user [ " + email + " ] : " + msg);
                    }
                    var event = {};
                    event.item = item;
                    event.timestamp = new Date().getTime();
                    event.pageName = page;
                    event.action = actionString;
                    events[events.length] = event;
                    modEvents.publishUserActivity(events, email, "not-defined");
                }, 0);
            }
            return {
                error: false,
                status: 200,
                data: email
            };
        } else {
            log.error("inviting is not permitted for the email " + email + " as is has exceeded the maximum " +
                      "retry count");
            return {
                error: true,
                status: 405,
                message: "The number of retries has exceeded for the email " + email + " Please try again after an hour",
                data: email
            };
        }
    } catch(e) {
        log.error("An error occurred while retrieving the retry count for the email " + email);
        log.error(e);
        return {
            error: true,
            status: 500,
            message: "An error occurred while retrieving the retry count for the email " + email,
            data: email
        };
    }
};

var reInvite = function (email) {
    try {
        var isInvitePermitted = cloudmgtDAO.isInvitePermitted(email, false);
        if (isInvitePermitted) {
            try {
                log.info("Resending the sign up email for [ " + email + " ]");
                var results;
                var queryResults = cloudmgtDAO.getUUIDFromEmail(email);

                if (queryResults != null) {
                    results = JSON.parse(queryResults);
                }
                var uuid;
                if (results.length >= 1) {
                    uuid = results[0]["uuid"];
                } else {
                    uuid = jagg.module("util").generateUUId();
                    storeTempRegistration(email, uuid, 0);
                }
                if (log.isDebugEnabled()) {
                    log.debug("UUID fetched from db for email " + email + " = " + uuid);
                }
                var link = targetEpr + "?confirmation=" + uuid;
                sendEmail(email, link);
            } catch (e) {
                log.error("Resending the sign up email for [ " + email + " ] failed");
                log.error(e);
                return {
                    error: true,
                    message: e.message,
                    status: 500
                };
            }
            return {
                error: false,
                status: 200,
                data: email
            };
        } else {
            log.error("Re-invite is not permitted for the email " + email + " as is has exceeded the maximum " +
                      "retry count");
            return {
                error: true,
                status: 405,
                message: "The number of retries has exceeded for the email " + email + " Please try again after an hour",
                data: email
            };
        }
    } catch(e) {
        log.error("An error occurred while retrieving the retry count for the email " + email);
        return {
            error: true,
            status: 500,
            message: "An error occurred while retrieving the retry count for the email " + email,
            data: email
        };
    }
};

var sendEmail = function (to, link) {
    try {
        body = body.replace("$link", link).replace("$link", link);
        var email = require('email');
        var sender;
        if (tls == "true") {
            sender = new email.Sender(senderHost, senderPort.toString(), senderEmail, senderPassword, "tls");
        } else {
            sender = new email.Sender(senderHost, senderPort.toString(), senderEmail, senderPassword);
        }
        sender.from = from;
        sender.to = to;
        sender.subject = subject;
        sender.html = body;
        sender.send();
        log.info("Successfully sent the signup email to [ " + to + " ] with the link : " + link);
    } catch (e) {
        log.error("Sending signup email to [ " + to + " ] failed");
        log.error(e);
        try {
            var emailSubject = "Sending email with one time link failed for newly signed-up user [ " +to+" ]";
            var emailContent = "Initial registration failed for newly signed-up user: ";
            emailContent = emailContent.concat(email).concat(" Exception occurred while sending email with one time link.").concat(e).concat(e.stack);
            var isEmailSent = jagg.module("util").sendEmail(emailContent, emailSubject, null);
        } catch (ex) {
            log.error("Error in sending \"Sending email with one time link ...\" failure email to [ " + to + " ]");
            log.error(ex);
        }
        throw (e);
    }
};

var createComplimentarySubscription = function (email, firstName, lastName, password) {
    var managerModule = jagg.module("manager");
    var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var productName = cloudConfig.complimentaryAPICloudAccount.productName;
    var authorizationHeaderValue = AUTHORIZATION_TYPE +
            cloudConfig.complimentaryAPICloudAccount.supportJira.authorizationHeaderValue;
    var headers = {
        "Authorization": authorizationHeaderValue
    };
    if (email == null) {
        return {
            error: true,
            status: 500,
            message: "Invalid email provided."
        };
    }
    if (!managerModule.isExistingUser(email)) {
        return {
            error: true,
            status: 200,
            message: "Please log in or create a WSO2 account."
        };
    }
    //Get customer production jira list from Support Jira
    var jiraKeysArray = getJiraKeysListForCustomer(email, headers);
    var customerProdJiraKeysArray = getProductionJiraKeysForCustomer(jiraKeysArray, headers);
    if (customerProdJiraKeysArray.length == 0) {
        return {
            error: true,
            status: 200,
            message: "You do not have production support. You are not eligible to claim the complimentary " +
            "cloud subscription."
        };
    }
    var supportAccount = customerProdJiraKeysArray[0];
    //Load Salesforce configuration
    var CustomerManager = Packages.org.wso2.carbon.cloud.complimentary.users.CustomerManager;
    var salesforceUsername = cloudConfig.complimentaryAPICloudAccount.salesforce.username;
    var salesforcePassword = cloudConfig.complimentaryAPICloudAccount.salesforce.password;
    var salesforceToken = cloudConfig.complimentaryAPICloudAccount.salesforce.token;
    CustomerManager.loadConfig(salesforceUsername, salesforcePassword, salesforceToken);
    //Get customer opportunity list from Salesforce
    var customerOpportunitiesList = CustomerManager.getOpportunitiesByJira(customerProdJiraKeysArray);
    if (!CustomerManager.hasProductionSupportForProduct(customerOpportunitiesList, productName)) {
        return {
            error: true,
            status: 200,
            message: "You do not have production support for WSO2 API Manager. You are not eligible to claim the " +
            "complimentary cloud subscription."
        };
    }

    //Check if user is in the contact list for production support
    var contactId = CustomerManager.getContactId(customerOpportunitiesList, email);
    if (contactId) {
        if (CustomerManager.hasClaimedComplimentarySubscription(customerOpportunitiesList)) {
            var contactEmail = CustomerManager.getContactWhoClaimedSubscription(customerOpportunitiesList);
            return {
                error: true,
                status: 200,
                message: "The subscription has been claimed already. Please contact " + contactEmail + "."
            };
        } else {
            //Create Complimentary Account
            var usagePlan = cloudConfig.complimentaryAPICloudAccount.usagePlan;
            var productRatePlanId = cloudConfig.complimentaryAPICloudAccount.productRatePlanId;
            var serviceId = cloudConfig.complimentaryAPICloudAccount.serviceId;

            //TODO: Get from Support Jira (companyName and trialEndDate)
            var companyName = getOrganizationNameFromEmail(email);
            var username = managerModule.getUserNameFromEmail(email.toString());
            var tenantCreationResult = createTenant(companyName, password, usagePlan, firstName, lastName, email,
                    username, true);
            if (tenantCreationResult != null) {
                var billingAccountCreationResult = createTrialBillingAccount(email, firstName, lastName,
                        serviceId, productRatePlanId, companyName);
                if (billingAccountCreationResult != null) {
                    //Update account and contact objects for who claimed subscription
                    CustomerManager.updateSalesforceAccountObject(customerOpportunitiesList, true);
                    CustomerManager.updateSalesforceContactObject(contactId, true);
                    //TODO : Post registration actions (add user to list in pardot)
                    jagg.module("util").sendComplimentaryAccountClaimedNotification(email, supportAccount,
                            username + '@' + companyName);
                    return {
                        error: false,
                        status: 200,
                        message: "Complimentary account successfully created."
                    };
                }
            }
        }
    } else {
        return {
            error: true,
            status: 200,
            message: "You cannot claim the subscription. Please contact WSO2 Cloud support for information " +
            "on who can claim the subscription."
        };
    }
};

var getJiraKeysListForCustomer = function (userEmail, headers) {
    var url = SUPPORT_JIRA_URL + JIRA_REST_API_USER_ENDPOINT;
    var data = {
        "username": userEmail,
        "expand": SUPPORT_JIRA_URL_EXPAND_PARAM_VALUE
    };
    var jiraKeysArray = [];
    var customerInfoJson = get(url, data, headers, RESPONSE_TYPE);
    if (customerInfoJson != null && customerInfoJson.data != null && customerInfoJson.data.groups != null &&
            customerInfoJson.data.groups.items != null) {
        var customerGroupItemsJson = customerInfoJson.data.groups.items;
        var itemsJsonKeys = Object.keys(customerGroupItemsJson);
        for (var i = 0; i < itemsJsonKeys.length; i++) {
            var itemName = customerGroupItemsJson[itemsJsonKeys[i]].name;
            var splitItems = itemName.split(".");
            if ((splitItems.length == 4)) {
                var jiraKey = splitItems[2];
                var lastFourCharacters = jiraKey.substr(jiraKey.length - 4);
                if (lastFourCharacters == SUPPORT_JIRA_PROD_CUSTOMER) {
                    jiraKeysArray.push({
                        "key": jiraKey
                    });
                }
            }
        }
    }
    return jiraKeysArray;
};

var getProductionJiraKeysForCustomer = function (jiraKeys, headers) {
    var customerProdJiraKeysArray = [];
    for (var i = 0; i < jiraKeys.length; i++) {
        var jiraKey = jiraKeys[i].key;
        var url = SUPPORT_JIRA_URL + JIRA_REST_API_PROJECT_ENDPOINT + jiraKey;
        var data = {};
        var customerProjectInfoJson = get(url, data, headers, RESPONSE_TYPE);
        if (customerProjectInfoJson != null && customerProjectInfoJson.data != null &&
                customerProjectInfoJson.data.projectCategory != null &&
                customerProjectInfoJson.data.projectCategory.name != null) {
            var projectCategoryName = customerProjectInfoJson.data.projectCategory.name;
            if (projectCategoryName == SUPPORT_JIRA_PROD && projectCategoryName != SUPPORT_JIRA_MANAGE_CLOUD_PROD) {
                customerProdJiraKeysArray.push(jiraKey);
            }
        }
    }
    return customerProdJiraKeysArray;
};

var getOrganizationNameFromEmail = function (email) {
    var splitValues = email.split("@");
    var domainName = splitValues[1].split(".")[0];
    //Check display name availability
    var isDomainAvailable = checkDomainAvailability(domainName);
    var tempDomainName = domainName;
    while (!isDomainAvailable) {
        if (tempDomainName.length == TENANT_DOMAIN_NAME_MAXIMUM_LENGTH) {
            tempDomainName = tempDomainName.substring(0, 11) + Math.floor(Math.random() * 10000);
        } else {
            tempDomainName = tempDomainName + Math.floor(Math.random() * 10000);
        }
        isDomainAvailable = checkDomainAvailability(tempDomainName);
    }
    //Check tenant domain availability
    var isTempDomainAvailable = checkTenantDomainAvailability(tempDomainName);
    while (!isTempDomainAvailable) {
        if (tempDomainName.length == TENANT_DOMAIN_NAME_MAXIMUM_LENGTH) {
            tempDomainName = tempDomainName.substring(0, 11) + Math.floor(Math.random() * 10000);
        } else {
            tempDomainName = tempDomainName + Math.floor(Math.random() * 10000);
        }
        isTempDomainAvailable = checkDomainAvailability(tempDomainName);
    }
    return tempDomainName;
};

var createTrialBillingAccount = function (email, firstName, lastName, serviceId, productRatePlanId, companyName) {
    var billingModule = jagg.module("billing");
    var accountData = {
        "trialEndDate": TRIAL_END_DATE
    };
    var metaData = {
        "workEmail": email,
        "firstName": firstName,
        "lastName": lastName,
        "serviceId": serviceId,
        "productRatePlanId": productRatePlanId,
        "type": CUSTOMER_TYPE_COMPLIMENTARY
    };
    var billingAccountCreationResult = billingModule.createAccount(accountData, metaData, companyName, true, false);
    return billingAccountCreationResult;
};

%>
