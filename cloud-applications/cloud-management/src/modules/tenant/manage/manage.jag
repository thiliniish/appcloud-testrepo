<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
include("/modules/database/dataaccess.jag");

var log = new Log();
var modManager = jagg.module("manager");


var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var cloudmgtDAO = new Packages.org.wso2.carbon.cloud.common.CloudMgtDAO();

var getUserRolesOfTenant = function (userName, tenantDomain) {
    var displayRoles=[];
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();

    try {
        var tenantId = tenantManager.getTenantId(tenantDomain);
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantId);
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        var tenantMgtService = server.osgiService('org.wso2.carbon.cloud.users.service.UserManagementService');
        var user = tenantMgtService.getUserInfo(userName);
        var roles=user.getRoles();
    }
    catch (e) {
        log.error("Error while retrieving user roles for "+userName);
    }
    return roles;
};

var getOrganizations = function() {
    var user =  String(session.get("LOGGED_IN_USER"));
    var userName =  modManager.getTenantAwareUsername(user);
    var results;
    var queryResults = cloudmgtDAO.getAllOrganizationsForUser(userName);
    if (queryResults != null) {
        results = JSON.parse(queryResults);
    }
    var tenants = [];
    if(results.length >= 1){
        for(var i=0;i<results.length;i++) {
            var tenant = {};
            tenant.tenantDomain =  results[i]["tenantDomain"];
            tenant.displayName =  results[i]["displayName"];
            var roles = getUserRolesOfTenant(userName,tenant.tenantDomain);
            tenant.userRoles = roles;
            var displayRoles = [];
            for(var j=0;j<roles.length;j++){
                if(roles[j]=='admin'){
                    displayRoles=[];
                    displayRoles.push('Admin');
                    tenant.adminUser = 'true';
                    break;
                }
                var disName = getProperty("TenantRoles.Role." + roles[j] + ".DisplayName");
                if(disName!= null){
                    displayRoles.push(disName);
                }
            }
            if(displayRoles.length == 0 ){
                displayRoles.push("User");
            }
            tenant.displayRoles = displayRoles;
            tenants.push(tenant);
        }
        return tenants;
    } else {
        log.error("Error while getting tenants \n");
        throw "Error while getting tenants ";
    }
}

/**
 This method checks whether use has exceeded the max number of organizations allowed to create per
 user.
 **/
var isOrgLimitExceeded = function () {
    var result = false;
    var user = String(session.get("LOGGED_IN_USER"));
    var username = modManager.getTenantAwareUsername(user);
    try {
        //default value of max number of tenants a user can create
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
        var maxNumberOfOrg = cloudConfig.defaultMaxAllowedOrganizations;
        //max number of tenants a user can create, if user is whistlisted
        var CloudMgtDAO = Packages.org.wso2.carbon.cloud.common.CloudMgtDAO;
        var cloudmgtDAO = new CloudMgtDAO();
        var orgCountWhiteListed = cloudmgtDAO.getMaxTenantCount(username);
        if (orgCountWhiteListed > maxNumberOfOrg) {
            maxNumberOfOrg = orgCountWhiteListed;
        }
        //a user who already has a tenant/organization can only add another organization
        //so if max limit is 1 user can not create another organization.
        if (maxNumberOfOrg <= 1) {
            result = true;
            return result;
        }
        //List of tenant where user exists
        var tenants = getOrganizations();
        //if number of tenants user exists is less than the max size ,
        //then obviously user can create new organization
        if (!tenants || (tenants.length < maxNumberOfOrg)) {
            return result;
        }

        //number of tenants user exists is greater than max size defined, but user can
        //exist in some invited organization as admin/any other role. So need to check ,in how may organization
        //user is an super admin.i.e User will be super admin in every organization he/she created.

        var PrivilegedCarbonContext = Packages.org.wso2.carbon.context.PrivilegedCarbonContext;
        var context = PrivilegedCarbonContext.getThreadLocalCarbonContext();
        var realmService = context.getOSGiService((java.lang.Class).forName('org.wso2.carbon.user.core.service.RealmService'));
        var tenantManager = realmService.getTenantManager();

        var tenantCount = 0;
        for (var i = 0; i < tenants.length; i++) {
            var tenant = tenants[i];
            if (tenant.adminUser == 'true') {
                var tenantDomain = tenant.tenantDomain;
                var tenantId = tenantManager.getTenantId(tenantDomain);
                var tenantInfo = tenantManager.getTenant(tenantId);
                var adminEmail = tenantInfo.getEmail();
                var isActive = tenantInfo.isActive();
                if (isActive && (username == adminEmail)) {
                    tenantCount++;
                }

                if (tenantCount == maxNumberOfOrg) {
                    result = true;
                    break;
                }
            }
        }
    } catch (e) {
        log.error(e);
        var errMsg = "Error while checking whether user(" + username
                + ") has reached the max number of organizations allowed to create.";
        throw new Error(errMsg);
    }
    return result;
};
%>

