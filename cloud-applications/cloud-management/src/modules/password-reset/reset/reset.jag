<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log("modules.user.reset.reset.jag");
var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var IS_URL = cloudConfig.ServerUrls.identity.toString();

var verifyPasswordResetConfirmationCode = function (confirm, id) {
    log.info("Verifying password reset confirmation code of the user [ " + id + " ]");
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:verifyConfirmationCode";
    options["HTTPHeaders"] = [
        {name: "Cookie", value: modManager.getAdminCookie(IS_URL)}
    ];
    var payload = '<verifyConfirmationCode xmlns="http://services.mgt.identity.carbon.wso2.org">' +
            '<username>' + id + '</username>' +
            '<code>' + confirm + '</code>' +
            '</verifyConfirmationCode>';
    var response;
    try {
        var endPoint = IS_URL + "UserInformationRecoveryService";
        request.open(options, endPoint, false);
        request.send(payload);
        response = request.responseE4X;
        var entry = response.*::["return"];
        var key = entry.*::key.text();
        var verified = entry.*::verified.text();
        var error = entry.*::error.text();
        var data = {};
        if (verified == true) {
            log.info("Confirmation code of the user [ " + id + " ] verified successfully");
            var userInfo = jagg.module("tenant").getUserInfo(id);
            data.verified = true;
            data.confirmationKey = key;
            data.userName = id;
            data.email = userInfo.email.toString();
            session.put('intermediate-data', stringify(data));
            return {
                error: false,
                status: 200,
                message: "verified",
                data: data
            };
        } else {
            var errorObj = {
                error: true
            };
            if (error.indexOf("18001") != -1) {
                errorObj.message = "Invalid code";
                errorObj.status = 403;
                log.warn("Invalid code provided to validate by user : " + id);
            } else if (error.indexOf("18002") != -1) {
                errorObj.message = "Expired code";
                errorObj.status = 403;
                log.warn("Expired code provided to validate by user : " + id);
            } else {
                errorObj.message = error;
                errorObj.status = 404;
                log.warn(error);
            }
            return errorObj;
        }
    } catch (e) {
        var errorMsg = "Error while verifying confirmation code for user [ " + id + " ]\n";
        log.error(errorMsg);
        log.error(e);
        return {
            error: true,
            message: errorMsg,
            status: 404
        };
    }
};

%>
