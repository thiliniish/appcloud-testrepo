<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
var log = new Log("modules.user.initiate.initiate.jag");
var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);

var IS_URL = cloudConfig.ServerUrls.identity.toString();
var CLOUDMGT_URL = cloudConfig.ServerUrls.cloudmgt.toString();
var senderEmail = cloudConfig.registrationEmail.username;
var senderPort = parseInt(cloudConfig.registrationEmail.port);
var senderPassword = cloudConfig.registrationEmail.password;
var senderHost = cloudConfig.registrationEmail.host;
var from = cloudConfig.registrationEmail.from;
var subject = cloudConfig.passwordResetEmail.subject;
var tls = cloudConfig.registrationEmail.tls.toString();

var body = jagg.module("util").getObjFromFile("/site/conf/emails/password_reset_email_body.txt");

var initiatePasswordReset = function (email) {
    try {
        var userName = modManager.getUserNameFromEmail(email);
        log.info("Initiating password reset for [ "+userName+" ]");
        var verifyResult = verifyUser(userName);
        var result = {};
        if (verifyResult.verified) {
            result = sendRecoveryNotification(userName, verifyResult.confirmationKey);
        } else {
            result.error = true;
            result.message = verifyResult.error;
        }
        return result;
    } catch (e) {
        log.error("Error while initiating password reset for [ " + userName + " ] : " + e);
        throw "Error while initiating password reset for [ " + userName + " ] : " + e;
    }
};

var verifyUser = function (userName) {
    log.info("Verifying user [ " + userName + " ] for password reset");
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:verifyUser";
    options["HTTPHeaders"] = [
        {name: "Cookie", value: modManager.getAdminCookie(IS_URL)}
    ];
    var payload = '<verifyUser xmlns="http://services.mgt.identity.carbon.wso2.org">' +
            '<username>' + userName + '</username>' +
            '</verifyUser>';
    var result = {};
    var response;
    try {
        var endPoint = IS_URL + "UserInformationRecoveryService";
        request.open(options, endPoint, false);
        request.send(payload);
        response = request.responseE4X;
        var entry = response.*::["return"];
        var key = entry.*::key.text();
        var verified = entry.*::verified.text();
        var error = entry.*::error.text();
        if (verified == true) {
            log.info("The user [ " + userName + " ] is successfully verified");
            result.verified = true;
            result.confirmationKey = String(key);
            return result;
        } else {
            result.verified = false;
            if (error.indexOf("18003") != -1) {
                log.warn("Invalid user name given for verifying. User with user name [ " + userName + " ] does"+
                        +"not exist");
                result.error = "Invalid User name";
            } else {
                log.warn("Password reset error - code [ "+error+" ]");
                result.error = error;
            }
            return result;
        }
    } catch (e) {
        log.error("Error while verifying user \n" + e);
        throw "Error while verifying user \n" + e;
    }
};

var sendRecoveryNotification = function (userName, key) {
    log.info("Getting recovery notification data for user [ "+userName+" ]");
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:sendRecoveryNotification";
    options["HTTPHeaders"] = [
        {name: "Cookie", value: modManager.getAdminCookie(IS_URL)}
    ];
    var payload = '<sendRecoveryNotification xmlns="http://services.mgt.identity.carbon.wso2.org">' +
            '<username>' + userName + '</username>' +
            '<key>' + key + '</key>' +
            '<notificationType>email</notificationType>' +
            '</sendRecoveryNotification>';
    var result = {};
    var response;
    try {
        var endPoint = IS_URL + "UserInformationRecoveryService";
        request.open(options, endPoint, false);
        request.send(payload);
        response = request.responseE4X;
        var entry = response.*::["return"];
        var error = entry.*::error.text();
        var verified = entry.*::verified.text();
        var notificationCode = entry.*::notificationData.*::notificationCode.text();
        var email = entry.*::notificationData.*::notificationAddress.text();
        if (verified == true) {
            log.info("Recovery notification data retrieved successfully for the user [ " + userName
                    + " ] with email [ " + email + " ]");
            sendRecoveryEmail(notificationCode, userName, email);
            result.error = false;
            result.message = "Email sent successfully";
        } else {
            log.warn("Failed to retrieve recovery notification data for user [ " + userName + " ] due to : " +
                    error);
            result.error = true;
            result.message = error;
        }
        return result;
    } catch (e) {
        log.error("Error while sending recovery notification \n" + e);
        throw "Error while sending recovery notification \n" + e;
    }
};

var sendRecoveryEmail = function (notificationCode, userName, emailAddress) {
    log.info("Sending Email to [ " + emailAddress + " ]");
    var userInfo = jagg.module("tenant").getUserInfo(userName);
    var link = CLOUDMGT_URL + "/site/pages/reset.jag?id=" + userName + "&confirmation=" + notificationCode;
    try {
        body = body.replace("$passwordRestLink", link).replace("$passwordRestLink", link);
        body = body.replace("$userName", emailAddress.toString()).replace("$userName", emailAddress.toString());
        jagg.module("util").sendEmail(body, subject, emailAddress.toString());
        log.info("Email successfully sent to [ " + userInfo.email.toString() + " ]");
    } catch (e) {
        log.error("Error while sending email \n" + e);
        throw e;
    }
};

%>
