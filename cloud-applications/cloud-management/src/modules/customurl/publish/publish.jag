<%
    include("/jagg/constants.jag");
    var log = new Log("modules/customurl/publish/publish.jag");

    var activeMQConnectionFactory = org.apache.activemq.ActiveMQConnectionFactory;
    var jmsSession = javax.jms.Session;
    var utilModule = jagg.module("util");
    var billingModule = jagg.module("billing");
    var managerModule = jagg.module("manager");
    var cloudConfigFile = utilModule.getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
    var integrationCloudServerBlockBaseUrl = cloudConfigFile.customUrl.integrationCloud.serverBlockBaseUrl;
    var registryPath = cloudConfigFile.customUrl.registry.registryPath;
    var registryUsername = cloudConfigFile.customUrl.registry.registryUsername;
    var registryPassword = cloudConfigFile.customUrl.registry.registryPassword;

    var topicName = cloudConfigFile.customUrl.messageBroker.topicName;
    var messageBrokerUrl = cloudConfigFile.customUrl.messageBroker.messageBrokerUrl;
    var defaultStoreURL = cloudConfigFile.customUrl.defaultStoreUrl;
    var defaultGatewayURL = cloudConfigFile.customUrl.defaultGatewayUrl;
    var httpsGatewayPort = cloudConfigFile.customUrl.httpsGatewayPort;

    var carbon = require('carbon');
    var server = carbon.server;
    var registry = server.osgiService('org.wso2.carbon.registry.core.service.RegistryService')
                                                .getGovernanceUserRegistry(registryUsername, registryPassword);
    var messageBrokerConnection;
    var encryptedSSLFileContent;
    var encryptedKeyFileContent;
    var encryptedChainFileContent;
    var encodedIndexingVectorContent;

    var tenantDomain = managerModule.getTenantDomain();

    var isRegionSelectionEnabled = function () {
        var enabledRegionSelection = false;
        var regionSelection = null;
        var type = cloudConfigFile.subscriptions.type;
        //Get region selection configs
        for (var i = 0; i < type.length; i++) {
            if (type[i].id == SUBSCRIPTION_API_CLOUD) {
                regionSelection = type[i].regionSelection;
                break;
            }
        }
        //Get current rate plan level
        var currentRatePlan = billingModule.getCurrentRatePlan(API_CLOUD_SUBSCRIPTION_ID);
        var ratePlansObj = billingModule.getRatePlans(SUBSCRIPTION_API_CLOUD);
        var ratePlans = ratePlansObj.entry;
        var currentPlanLevel = 0;
        if (ratePlans != null) {
            for (var j = 0; j < ratePlans.length; j++) {
                if (ratePlans[j].id == currentRatePlan.id) {
                    currentPlanLevel = ratePlans[j].premiumLevel;
                }
            }
        }
        //Check if region selection enabled for current plan
        if (regionSelection != null) {
            for (var j = 0; j < regionSelection.length; j++) {
                //<TODO>Needs to be modified for multiple region selection in future</TODO>
                if (currentPlanLevel >= regionSelection[j].premiumLevel) {
                    enabledRegionSelection = true;
                    break;
                }
            }
        }
        return enabledRegionSelection;
    };

    var sendGatewayMigrationEmails = function (region) {
        var isSuccessful = false;
        var username = session.get("LOGGED_IN_USER");
        var userEmail = String(managerModule.getEmailOfUser(username));
        var userDisplayName = jagg.module("user/profile").getDisplayName(username);
        if (userDisplayName == null) {
            userDisplayName = username;
        }
        log.info("Received request for gateway migration to region " + region + " from " + username);
        if (userEmail == null) {
            throw "Unable to send gateway migration notification email as user email is not specified.";
        }
        //Construct email bodies
        var userEmailBody = utilModule.getObjFromFile(
                "/site/conf/emails/migrate_regional_gateway_user_email_body.txt");
        userEmailBody = userEmailBody.replace("$username", userDisplayName)
                .replace("$tenant", tenantDomain).replace("$region", region);
        var cloudEmailBody = utilModule.getObjFromFile(
                "/site/conf/emails/migrate_regional_gateway_notification_email_body.txt");
        cloudEmailBody = cloudEmailBody.replace("$username", username)
                .replace("$tenant", tenantDomain).replace("$region", region);
        //Send emails
        var gatewayMigrationProperties = utilModule.getGatewayMigrationProperties();
        if (gatewayMigrationProperties != null) {
            var userEmailSubject = gatewayMigrationProperties.userEmailSubject;
            var cloudEmail = gatewayMigrationProperties.cloudEmail;
            var cloudEmailSubject = gatewayMigrationProperties.cloudEmailSubject;
            if (utilModule.sendEmail(userEmailBody, userEmailSubject, userEmail) && utilModule.sendEmail
                    (cloudEmailBody, cloudEmailSubject, cloudEmail)) {
                isSuccessful = true;
                log.info("Successfully sent gateway migration notification emails.");
            }
        }
        return isSuccessful;
    };

    var publish = function (region, cloudProfile, node, customUrl, sslCertificateContent, keyFileContent,
                            chainFileContent, previousRegion) {
        try {
            var status = "initial";
            var fileEncryptionStatus = initializeSSLFileContent(sslCertificateContent, keyFileContent, chainFileContent,
                    customUrl);
            if (fileEncryptionStatus.error) {
                return fileEncryptionStatus;
            }
            var customUrlMappingStatus = fileEncryptionStatus;
            //Get default region
            var defaultRegion = cloudConfigFile.customUrl.defaultRegion.id;
            //Determine the registry path for security certificates
            var certsRegistryPath;
            if (node == STORE_NODE_TYPE || node == GATEWAY_NODE_TYPE) {
                if (!region) {
                    region = defaultRegion;
                }
                certsRegistryPath = registryPath + cloudProfile + "/" + tenantDomain + "/securityCertificates/" +
                        region + "/" + node;
            } else {
                certsRegistryPath = registryPath + cloudProfile + "/" + tenantDomain + "/securityCertificates/" +
                        node;
            }
            registry.beginTransaction();
            if (registry.resourceExists(registryPath + cloudProfile + "/" + tenantDomain)) {
                status = "update";
                if (registry.resourceExists(certsRegistryPath)) {
                    registry.delete(certsRegistryPath);
                }
                //If this is a gateway region migration
                if (node == GATEWAY_NODE_TYPE && isRepeatedGatewayMapping(tenantDomain)) {
                    var previousCertsRegistryPath = registryPath + cloudProfile + "/" + tenantDomain +
                            "/securityCertificates/" + previousRegion;
                    if (registry.resourceExists(previousCertsRegistryPath)) {
                        registry.delete(previousCertsRegistryPath);
                    }
                    var previousUrlMappingPath = registryPath + cloudProfile + "/" + tenantDomain +
                            "/urlMapping/" + previousRegion + "-" + tenantDomain;
                    if (registry.resourceExists(previousUrlMappingPath)) {
                        registry.delete(previousUrlMappingPath);
                    }
                }
            }
            var payload = null;
            if (node == STORE_NODE_TYPE || node == GATEWAY_NODE_TYPE) {
                payload = getPayLoad(node, customUrl, status, region);
                var urlMappingContent = '{"tenantDomain" : "' + payload.tenantDomain + '", "store" : {"customUrl" : "'
                        + payload.store.customUrl + '"}, "gateway" : {"customUrl" : "' + payload.gateway.customUrl +
                        '" , "region" : "' + payload.gateway.region + '"}}';
                var urlMappingResource = registry.newResource();
                urlMappingResource.setContent(urlMappingContent);

                //<TODO>Needs to be configurable for multiple regions</TODO>
                //Add the urlMapping content to default location
                registry.put(registryPath + cloudProfile + "/" + tenantDomain + "/urlMapping/" + tenantDomain,
                        urlMappingResource);
                //Add urlMapping content to the selected region
                registry.put(registryPath + cloudProfile + "/" + tenantDomain + "/urlMapping/" + region + "-"
                        + tenantDomain, urlMappingResource);
            }
            /**
             * Setting resources
             */
            var sslFileResource = registry.newResource();
            sslFileResource.setContent(encryptedSSLFileContent);
            var keyFileResource = registry.newResource();
            keyFileResource.setContent(encryptedKeyFileContent);
            var chainFileResource = registry.newResource();
            chainFileResource.setContent(encryptedChainFileContent);
            var indexingVectorResource = registry.newResource();
            indexingVectorResource.setContent(encodedIndexingVectorContent);

            registry.put(certsRegistryPath + "/" + tenantDomain + "-" + node + ".pem", sslFileResource);
            registry.put(certsRegistryPath + "/" + tenantDomain + "-" + node + ".key", keyFileResource);
            registry.put(certsRegistryPath + "/" + tenantDomain + "-" + node + ".pub", chainFileResource);
            registry.put(certsRegistryPath + "/" + tenantDomain + "-" + node + ".iv", indexingVectorResource);
            registry.commitTransaction();
            publishToCustomUrlBroker(node, cloudProfile, customUrl, payload);
            return customUrlMappingStatus;
        } catch (e) {
            registry.rollbackTransaction();
            var errorMessage = "Exception occurred during establishing connection " + e;
            log.error(errorMessage);
            throw e;
        }
    };

    function publishToCustomUrlBroker(node, cloudProfile, customUrl, payload) {
        if (node == STORE_NODE_TYPE || node == GATEWAY_NODE_TYPE) {
            initializeBroker();
            publishToMessageBroker(payload, cloudProfile);
        } else {
            var serverBlockBaseUrl = cloudConfigFile.customUrl.integrationCloud.serverBlockBaseUrl;
            var loginUrl = serverBlockBaseUrl + cloudConfigFile.customUrl.integrationCloud.loginBlockSuffix;
            var urlMapperUrl = serverBlockBaseUrl + cloudConfigFile.customUrl.integrationCloud.urlMapperBlockSuffix;
            var service = server.osgiService('org.wso2.carbon.cloud.listener.CloudListener');
            var username = session.get("LOGGED_IN_USER");
            var parameterMap = new java.util.HashMap();
            parameterMap.put("cloudType", cloudProfile);
            parameterMap.put("username", username);
            parameterMap.put("authorizationHeader", utilModule.getAuthHeader(username));
            parameterMap.put("customUrl", customUrl);
            parameterMap.put("applicationName", node);
            parameterMap.put("loginUrl", loginUrl);
            parameterMap.put("urlMapperUrl", urlMapperUrl);
            service.triggerOnCustomUrlAddition(parameterMap);
        }
    };

    function isRepeatedGatewayMapping() {
        var isRepeated = false;
        var currentMapping = this.getCurrentUserMapping(API_CLOUD_TYPE);
        if(currentMapping.gateway.customUrl !=
                (defaultGatewayURL + ":" + httpsGatewayPort + "/t/" + tenantDomain + "/")){
            isRepeated = true;
        }
        return isRepeated;
    };

    function getPayLoad(node, customUrl, status, region) {
        var storePayload = {};
        var gatewayPayload = {};
        var payload = {};
        if (status == "initial") {
            payload.type = 'initial';
            if (node == STORE_NODE_TYPE) {
                storePayload.customUrl = customUrl;
                gatewayPayload.customUrl = defaultGatewayURL + ":" + httpsGatewayPort + "/t/" + tenantDomain + "/";
                gatewayPayload.region = region;
            } else {
                storePayload.customUrl = defaultStoreURL + "/store";
                gatewayPayload.customUrl = customUrl;
                gatewayPayload.region = region;
            }
        } else {
            var currentMapping = this.getCurrentUserMapping(API_CLOUD_TYPE);
            if (node == STORE_NODE_TYPE) {
                if (currentMapping.store.customUrl == (defaultStoreURL + "/store")) {
                    payload.type = 'initial';
                } else {
                    payload.type = 'update';
                }
                storePayload.customUrl = customUrl;
                gatewayPayload.customUrl = currentMapping.gateway.customUrl;
                gatewayPayload.region = currentMapping.gateway.region;
            } else {
                if (currentMapping.gateway.customUrl ==
                        (defaultGatewayURL + ":" + httpsGatewayPort + "/t/" + tenantDomain + "/")) {
                    payload.type = 'initial';
                } else {
                    payload.type = 'update';
                }
                storePayload.customUrl = currentMapping.store.customUrl;
                gatewayPayload.customUrl = customUrl;
                gatewayPayload.region = region;
            }
        }
        payload.store = storePayload;
        payload.gateway = gatewayPayload;
        payload.node = node;
        payload.tenantDomain = tenantDomain;
        return payload;
    }

    function initializeBroker() {
        try {
            connectionFactory = new activeMQConnectionFactory(messageBrokerUrl);
            this.messageBrokerConnection = connectionFactory.createConnection();
        } catch(e) {
            var errorMessage = "Error occurred during establishing connection with " + messageBrokerUrl;
            log.error(errorMessage);
            throw e;
        }
    }

    function publishToMessageBroker(payload, cloudType) {
        var jsonPayload = {};
        if (cloudType == API_CLOUD_TYPE) {
            jsonPayload.cloudType = cloudType;
            jsonPayload.status = payload.type;
            jsonPayload.node = payload.node;
            jsonPayload.tenantDomain = payload.tenantDomain;
            if (payload.node == STORE_NODE_TYPE) {
                jsonPayload.customUrl = payload.store.customUrl;
                topicName = cloudConfigFile.customUrl.messageBroker.defaultTopicName;
            } else {
                jsonPayload.customUrl = payload.gateway.customUrl;
                if (payload.gateway.region) {
                    topicName = topicName + "-" + payload.gateway.region;
                } else {
                    topicName = cloudConfigFile.customUrl.messageBroker.defaultTopicName;
                }
            }
        }
        try {
            var mbSession = messageBrokerConnection.createSession(false, jmsSession.AUTO_ACKNOWLEDGE);
            var topic = mbSession.createTopic(topicName);
            var message = mbSession.createTextMessage();
            var messageProducer = mbSession.createProducer(topic);
            var text = stringify(jsonPayload);
            message.setText(text);
            messageProducer.send(message);
        } catch(e) {
            var errorMessage = "Error occurred when publishing to message broker "+ e;
            log.error(errorMessage);
            throw new Error(errorMessage);
        } finally {
            if (messageBrokerConnection != null) {
                messageBrokerConnection.close();
            }
        }
    }

    var getCurrentUserMapping = function(cloudType) {
        if (registry.resourceExists(registryPath + cloudType + "/" + tenantDomain + "/urlMapping/"+tenantDomain)) {
            var registryLocation =registryPath + cloudType + "/" + tenantDomain + "/urlMapping/"+tenantDomain;
            var resource = registry.get(registryLocation);
            var stringOBj = String((new java.lang.String(resource.getContent())));
            return parse(stringOBj);
        }
        return null;
    };

    var isUrlAvailable = function(newUrl, node) {
        if (node == APPLICATION_NODE_TYPE) {
            return (isCustomDomainAvailable(newUrl).trim() === "true");
        } else {
            var currentUrlMapping = getCurrentUserMapping(API_CLOUD_TYPE);
            if (currentUrlMapping != null) {
                var currentUrl;
                if (node == STORE_NODE_TYPE) {
                    currentUrl = currentUrlMapping.store.customUrl
                } else {
                    currentUrl = currentUrlMapping.gateway.customUrl;
                }
                //checking whether the current-mapping is identical
                if (currentUrl == newUrl) {
                    return true;
                } else {
                    return checkMappingAvailable(newUrl);
                }
            } else {
                return checkMappingAvailable(newUrl);
            }
        }
    };

    var checkMappingAvailable = function(newUrl) {
        var registryLocation = registryPath + "/" + API_CLOUD_TYPE;
        var tenantCollection = registry.get(registryLocation);
        for (i = 0; i < tenantCollection.getChildCount(); i++) {
            var tenantId = tenantCollection.getChildren()[i].substring(tenantCollection.getChildren()[i]
                        .lastIndexOf("/") + 1, tenantCollection.getChildren()[i].length());
            var urlMappingPath = tenantCollection.getChildren()[i] + "/urlMapping/" + tenantId;
            var domainResource = registry.get(urlMappingPath);
            var urlMappingJson = parse(String((new java.lang.String(domainResource.getContent()))));
            if (urlMappingJson.store.customUrl == newUrl) {
                return false;
            }
            else if (urlMappingJson.gateway.customUrl == newUrl) {
                return false;
            }
        }
        return true;
    };

    var validateUrl = function(customUrl, pointedUrl) {
        var JNDI_KEY_NAMING_FACTORY_INITIAL = "java.naming.factory.initial";
        var JNDI_KEY_DNS_TIMEOUT = "com.sun.jndi.dns.timeout.initial";
        var JDNI_KEY_DNS_RETRIES = "com.sun.jndi.dns.timeout.retries";
        var Hashtable = java.util.Hashtable;
        var env = new Hashtable();
        var success;
        // set environment configurations
        env.put(JNDI_KEY_NAMING_FACTORY_INITIAL, "com.sun.jndi.dns.DnsContextFactory");
        env.put(JNDI_KEY_DNS_TIMEOUT, "10000");
        env.put(JDNI_KEY_DNS_RETRIES, "1");
        try {
            var resolvedHosts = resolveDNS(customUrl, env);
               var resolvedCnames = resolvedHosts.get(DNS_CNAME_RECORD);
               if (!resolvedCnames.isEmpty() && resolvedCnames.contains(pointedUrl)) {
                   log.info(pointedUrl+" can be reached from: " + customUrl +" via CNAME records");
                   success = true;
               } else {
                   log.warn(pointedUrl+" cannot be reached from: " + customUrl +" via CNAME records");
                   success = false;
          }
        } catch (e) {
              log.error("Error occurred while resolving dns for: " + customUrl);
              log.warn(e);
        }
        return success;
    };

    function resolveDNS(domain, environmentConfigs) {
        //Import ArrayListMultimap
        var ArrayListMultimap = com.google.common.collect.ArrayListMultimap;
        //import InitialDirContext
        var InitialDirContext = javax.naming.directory.InitialDirContext;
        var dnsRecordsResult = ArrayListMultimap.create();
        try {
            if (log.isDebugEnabled()) {
                   log.debug("DNS validation: resolving DNS for " + domain);
            }
            var isCNAMEFound = false;
            var context = new InitialDirContext(environmentConfigs);
            var dnsRecordsToCheck = [DNS_CNAME_RECORD];
            var dnsRecords = context.getAttributes(domain, dnsRecordsToCheck);
            // looking for CNAME records
            var cnameRecords = dnsRecords.get(DNS_CNAME_RECORD);
            if (cnameRecords != null && cnameRecords.size() > 0) {
                   var cnameRecordHosts = cnameRecords.getAll();
                   var cnameHost;
                   while (cnameRecordHosts.hasMore()) {
                     isCNAMEFound = true;
                     cnameHost = cnameRecordHosts.next().toString();
                     if (cnameHost.endsWith(".")) {
                        // Since DNS records are end with "." we are removing it.
                        // For example real dns entry for www.google.com is www.google.com.
                        cnameHost = cnameHost.substring(0, cnameHost.lastIndexOf('.'));
                     }
                     dnsRecordsResult.put(DNS_CNAME_RECORD, cnameHost);
                    if (log.isDebugEnabled()) {
                        log.debug("DNS validation: recurring on CNAME record towards host " + cnameHost);
                     }
                     dnsRecordsResult.putAll(resolveDNS(cnameHost, environmentConfigs)); // recursively resolve cnameHost
                   }
            }
            if (!isCNAMEFound) {
                log.info("DNS validation: No CNAME found for domain: '" + domain);
            }
            return dnsRecordsResult;
        } catch (e) {
            log.error("DNS validation: DNS query failed for: " + domain);
            log.error(e);
        }
    }

    /**
     * File Encryption and validation
     */
    function initializeSSLFileContent(sslFileContent, keyFileContent, chainFileContent, customUrl) {
        var status = {};
        status.error = false;
        try {
            var fileValidatingService =
                    server.osgiService('org.wso2.carbon.cloud.ssl.security.service.SSLFileAnalyzer');
            fileValidatingService.init(sslFileContent, chainFileContent);
            var isSSLFileDateVerified = parse(String(fileValidatingService.isSSLFileDateVerified()));
            if (isSSLFileDateVerified.error == 'false') {
                var isSelfSigned = parse(String(fileValidatingService.isCertificateSelfSigned()));
                if (isSelfSigned.error == 'false') {
                    var isPublicKeyValid = parse(String(fileValidatingService.isPublicKeyValid()));
                    if (isPublicKeyValid.error == 'false') {
                        var isUrlValidated = parse(String(fileValidatingService.validateIssuedUrl(customUrl)));

                        if (isUrlValidated.error == 'false') {
                            status.error = false;
                        } else {
                            status.error = true;
                            status.message = isUrlValidated.message;
                        }
                    } else {
                        status.error = true;
                        status.message = isPublicKeyValid.message;
                    }
                } else {
                    status.error = true;
                    status.message = isSelfSigned.message;
                }
            } else {
                status.error = true;
                status.message = isSSLFileDateVerified.message;
            }
            if (!status.error) {
                var fileEncryptService =
                        server.osgiService('org.wso2.carbon.cloud.ssl.security.service.SSLFileEncryptService');
                fileEncryptService.init();

                encryptedSSLFileContent = fileEncryptService.encryptData(sslFileContent);
                encryptedKeyFileContent = fileEncryptService.encryptData(keyFileContent);
                encryptedChainFileContent = fileEncryptService.encryptData(chainFileContent);
                encodedIndexingVectorContent = fileEncryptService.getIndexingVector();
            }
            return status;
        } catch(e) {
            var message = "Error occurred during file encryption.";
            log.error(message + e);
            status.error = true;
            status.message = message + " Please contact WSO2 Cloud Team for help.";
            return status;
        }
    }

    function getCustomDomainDetailsForTenant() {
        var cookie = getCookieFromLoginToIntegrationCloudUsingJWT();

        //Invoke Integration Cloud REST API to get custom domain details for logged in tenant
        var applicationAPIUrl = integrationCloudServerBlockBaseUrl + cloudConfigFile.customUrl.integrationCloud.applicationBlockSuffix;
        var getCustomDomainDetailsForTenantAction =
                cloudConfigFile.customUrl.integrationCloud.getCustomDomainDetailsForTenantAction;
        var customDomainDetailsQueryData = {
            "action" : getCustomDomainDetailsForTenantAction
        };
        var customDomainDetailsQueryHeaders = {
            "Cookie" : cookie
        };
        var customDomainDetailsQueryResult = post(applicationAPIUrl, customDomainDetailsQueryData,
                customDomainDetailsQueryHeaders);
        return customDomainDetailsQueryResult.xhr.responseText;
    }

    function getCookieFromLoginToIntegrationCloudUsingJWT() {
        return loginToIntegrationCloudUsingJWT().getResponseHeader(SET_COOKIE_HEADER);
    }

    function loginToIntegrationCloudUsingJWT() {
        try {
            var fullUsername = session.get("LOGGED_IN_USER");
            var authorizationHeader = utilModule.getAuthHeader(fullUsername);
            //Login to Integration Cloud using jwt authentication
            var loginUrl = integrationCloudServerBlockBaseUrl + cloudConfigFile.customUrl.integrationCloud.loginBlockSuffix;
            var loginAction = cloudConfigFile.customUrl.integrationCloud.loginAction;
            var loginData = {
                "action": loginAction
            };
            var loginHeaders = {
                "Authorization": stringify(authorizationHeader)
            };
            var loginResult = post(loginUrl, loginData, loginHeaders);
            var loginResponse = loginResult.xhr.responseText;
            if (loginResponse.error == "true") {
                throw new Error(loginResponse.message);
            } else {
                return loginResult.xhr;
            }
        } catch (e) {
            var errorMessage = "Exception occurred during establishing connection to IntegrationCloud.";
            log.error(errorMessage);
            log.error(e);
            throw e;
        }
    }

    function isCustomDomainAvailable(customDomain) {
        var cookie = getCookieFromLoginToIntegrationCloudUsingJWT();
        //Invoke Integration Cloud REST API to check if custom domain is available
        var applicationAPIUrl = integrationCloudServerBlockBaseUrl + cloudConfigFile.customUrl.integrationCloud.urlMapperBlockSuffix;
        var isCustomDomainAvailableAction = cloudConfigFile.customUrl.integrationCloud.isCustomDomainAvailableAction;
        var isCustomDomainAvailableQueryData = {
            "action" : isCustomDomainAvailableAction,
            "customDomain" : customDomain
        };
        var isCustomDomainAvailableQueryHeaders = {
            "Cookie" : cookie
        };
        var isCustomDomainAvailableQueryResult = post(applicationAPIUrl, isCustomDomainAvailableQueryData,
                isCustomDomainAvailableQueryHeaders);
        return isCustomDomainAvailableQueryResult.xhr.responseText;
    }
%>
