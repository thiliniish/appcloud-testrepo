<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");

// used for logging
var log = new Log("modules/manager/manager.jag");
var carbon = require('carbon');
var server = carbon.server;

var clock = new Date();
var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var ADMIN_USERNAME = cloudConfig.SSORelyingParty.adminUser;
var ADMIN_PASSWORD =  cloudConfig.SSORelyingParty.adminPassword;
var SSO_NAME =  cloudConfig.SSORelyingParty.name;
var SSO_PROVIDER =  cloudConfig.SSORelyingParty.identityProviderURL;
var SSO_KEYSTORE_PASSWORD =  cloudConfig.SSORelyingParty.keyStorePassword;
var SSO_KEY_ALIAS =  cloudConfig.SSORelyingParty.identityKeyAlias;
var SSO_KEYSTORE_NAME =  cloudConfig.SSORelyingParty.keyStoreName;
var COOKIE_REFRESH_INTERVAL =  cloudConfig.SSORelyingParty.cookieRefreshInterval;
var CLOUDMGT_SERVICES = cloudConfig.ServerUrls.cloudmgtServices.toString();
var cookieRefreshInterval = COOKIE_REFRESH_INTERVAL;

var getAdminCookie = function (serverUrl) {
	var timeNow = clock.getTime();
	if(application.get("adminCookieLastUpdatedTime" + serverUrl) == null) {
		application.put("adminCookieLastUpdatedTime" + serverUrl , timeNow);
	}
	var adminCookieLastUpdatedTime = application.get("adminCookieLastUpdatedTime" + serverUrl);
	if(((timeNow - adminCookieLastUpdatedTime) > cookieRefreshInterval) || (application.get("authenticatedCookie" + serverUrl) == null)){
		updateAdminCookie(serverUrl);
		application.put("adminCookieLastUpdatedTime" + serverUrl , timeNow);
	}
	return application.get("authenticatedCookie" + serverUrl);
};

var updateAdminCookie = function (serverUrl) {

	var xhr = new XMLHttpRequest();
	xhr.setRequestHeader('SOAPAction', 'urn:login');
	xhr.setRequestHeader('Content-Type', 'application/soap+xml');
	var endPoint = serverUrl + "AuthenticationAdmin";
	xhr.open("POST", endPoint);
	var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>' + ADMIN_USERNAME + '</aut:username><aut:password>' + ADMIN_PASSWORD + '</aut:password><aut:remoteAddress>localhost</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';
	xhr.send(payload);
	
    var cookie = xhr.getResponseHeader("Set-Cookie");
    application.put("authenticatedCookie" + serverUrl , cookie ) ;
  
	
};


var getAdminCookieBySAMLToken = function (serverUrl) {

    var security =require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);
    var token = ssoRelyingParty.getSAMLToken(session.getId());
    var xhr = new XMLHttpRequest();
    var endPoint = serverUrl+"SAML2SSOAuthenticationService";
    xhr.open("POST", endPoint);
    var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+token+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

    xhr.setRequestHeader('SOAPAction','urn:login');
    xhr.setRequestHeader('Content-Type','application/soap+xml');
    xhr.send(payload);
    var cookie=xhr.getResponseHeader("Set-Cookie");
    return cookie;

};

var encodeString = function(stringValue){
   var security =require("sso");
   var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);

   return ssoRelyingParty.encode(stringValue);
};

var getDataSource = function (applicationId, stageName, dbname) {
    var ws = require('ws');
    var getDataSourceService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:getDataSource";
    
    var payload = '<xsd:getDataSource xmlns:xsd="http://org.apache.axis2/xsd">' +
    				'<xsd:dsName>' + dbname + '</xsd:dsName>' +
    			  '</xsd:getDataSource>';
    
    var result;
    try {
        var endPoint = CLOUDMGT_SERVICES + 'NDataSourceAdmin';
        getDataSourceService.open(options, endPoint, false, ADMIN_USERNAME + '@' + applicationId, ADMIN_PASSWORD);
        getDataSourceService.send(payload);
        
       var result = getDataSourceService.responseE4X;
       var ns = new Namespace("http://org.apache.axis2/xsd");
       var ax2223 = new Namespace("http://services.core.ndatasource.carbon.wso2.org/xsd");
       
       var response = result.ns::["return"];       
       var responseDS = response[0];
       
       var configuration = responseDS.ax2223::["dsMetaInfo"][0].ax2223::["definition"][0].ax2223::["dsXMLConfiguration"];
       var definition = responseDS.ax2223::["dsMetaInfo"][0].ax2223::["definition"][0];
       
       var type = definition.ax2223::["type"][0].text();
       
       var desc = responseDS.ax2223::["dsMetaInfo"][0].ax2223::["description"][0].text();
       
       var name = responseDS.ax2223::["dsMetaInfo"][0].ax2223::["name"][0].text();;
       
       var configToXml = new XML(configuration.toString());
       
       var driverClassName= configToXml.*::driverClassName.text();
       var url= configToXml.*::url.text();
       var username= configToXml.*::username.text();
       var password= configToXml.*::password.text();
       
       var dataSource={};
       dataSource.applicationKey = applicationId;
       dataSource.name = name;
       dataSource.type = type;
       dataSource.desc = desc;
       dataSource.driver = driverClassName;
       dataSource.url = url;
       dataSource.username = username;
       dataSource.password = password;
       
       return dataSource;

    } catch (e) {
        log.error("Error while getting datasource " + stageName + "\n" + e.message);
        throw "Error while deleting datasource  " + stageName;
    }
};

var deleteDatasource = function (applicationId, stageName, name) {
    jagg.module("permission").checkUserActionPermission(applicationId,PERMISSION_DATASOURCE_UPDATE_OF_STAGE+stageName);
    var ws = require('ws');
    var deleteDataSourceService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:deleteDataSource";

    var payload = '<xsd:addDataSource xmlns:xsd="http://org.apache.axis2/xsd">' +
                  '<xsd:dsName>'+name+'</xsd:dsName>'+
                  '</xsd:addDataSource>';
    var result;
    try {
        var endPoint = CLOUDMGT_SERVICES + 'NDataSourceAdmin';
        getDataSourceService.open(options, endPoint, false, ADMIN_USERNAME + '@' + applicationId, ADMIN_PASSWORD);
        deleteDataSourceService.send(payload);
        return {
        	error:false
        };

    } catch (e) {
        log.error("Error while deleting datasource " + stageName + "\n" + e.message);
        throw "Error while deleting datasource  " + stageName;
    }
};

var addDataSource = function (applicationId, stageName, name, url, driverClass, username,
        password, description) {
	
	jagg.module("permission").checkUserActionPermission(applicationId,PERMISSION_DATASOURCE_UPDATE_OF_STAGE+stageName);
    var ws = require('ws');
    var createDataSourcesService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:addDataSource";

    var payload = '<xsd:addDataSource xmlns:xsd="http://org.apache.axis2/xsd"' +
                  ' xmlns:xsd1="http://services.core.ndatasource.carbon.wso2.org/xsd"' +
                  ' xmlns:xsd2="http://core.ndatasource.carbon.wso2.org/xsd">' +
                  '<xsd:dsmInfo>' +
                  '<xsd1:definition>' +
                  '<xsd1:dsXMLConfiguration>' +
                  ' <![CDATA[<configuration>' +
                  '<url>' + url + '</url>' +
                  '<username>' + username + '</username>' +
                  '<password>' + password + '</password>' +
                  '<driverClassName>' + driverClass + '</driverClassName>' +
                  '<maxActive>50</maxActive>' +
                  '<maxWait>60000</maxWait>' +
                  '<testOnBorrow>true</testOnBorrow>' +
                  '<validationQuery>SELECT 1</validationQuery>' +
                  '<validationInterval>30000</validationInterval>' +
                  '</configuration>]]>' +
                  '</xsd1:dsXMLConfiguration>' +
                  '<xsd1:type>RDBMS</xsd1:type>' +
                  '</xsd1:definition>' +
                  '<xsd1:description>' + description + '</xsd1:description>' +
                  '<xsd1:jndiConfig>' +

                  '<xsd2:name>' + 'jdbc/' + name + '</xsd2:name>' +
                  '<xsd2:useDataSourceFactory>false</xsd2:useDataSourceFactory>' +
                  '</xsd1:jndiConfig>' +
                  '<xsd1:name>' + name + '</xsd1:name>' +
                  '<xsd1:system>false</xsd1:system>' +
                  '</xsd:dsmInfo>' +
                  '</xsd:addDataSource>';
    var result;
    try {
        var endPoint = CLOUDMGT_SERVICES + 'NDataSourceAdmin';
        log.info("printing end point ..........................................................");
        log.info(endPoint);
        createDataSourcesService.open(options, endPoint, false, ADMIN_USERNAME + '@' + applicationId, ADMIN_PASSWORD);
        createDataSourcesService.send(payload);
	    result = createDataSourcesService.responseE4X;
        var datasources = buildResponse(result);
         log.info("Created data source: " + datasources);
        return datasources;


    } catch (e) {
        log.error("Error while creating datasource " + stageName + "\n" + e.message);
        throw "Error while creating datasource  " + stageName;
    }
	
};

var createDataSource = function (applicationId, stageName, name, url, driverClass, username,
                                 password, description) {
    jagg.module("permission").checkUserActionPermission(applicationId,PERMISSION_DATASOURCE_CREATE);
    var ws = require('ws');
    var createDataSourcesService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:addDataSource";

    var payload = '<xsd:addDataSource xmlns:xsd="http://org.apache.axis2/xsd"' +
                  ' xmlns:xsd1="http://services.core.ndatasource.carbon.wso2.org/xsd"' +
                  ' xmlns:xsd2="http://core.ndatasource.carbon.wso2.org/xsd">' +
                  '<xsd:dsmInfo>' +
                  '<xsd1:definition>' +
                  '<xsd1:dsXMLConfiguration>' +
                  ' <![CDATA[<configuration>' +
                  '<url>' + url + '</url>' +
                  '<username>' + username + '</username>' +
                  '<password>' + password + '</password>' +
                  '<driverClassName>' + driverClass + '</driverClassName>' +
                  '<maxActive>50</maxActive>' +
                  '<maxWait>60000</maxWait>' +
                  '<testOnBorrow>true</testOnBorrow>' +
                  '<validationQuery>SELECT 1</validationQuery>' +
                  '<validationInterval>30000</validationInterval>' +
                  '</configuration>]]>' +
                  '</xsd1:dsXMLConfiguration>' +
                  '<xsd1:type>RDBMS</xsd1:type>' +
                  '</xsd1:definition>' +
                  '<xsd1:description>' + description + '</xsd1:description>' +
                  '<xsd1:jndiConfig>' +

                  '<xsd2:name>' + 'jdbc/' + name + '</xsd2:name>' +
                  '<xsd2:useDataSourceFactory>false</xsd2:useDataSourceFactory>' +
                  '</xsd1:jndiConfig>' +
                  '<xsd1:name>' + name + '</xsd1:name>' +
                  '<xsd1:system>false</xsd1:system>' +
                  '</xsd:dsmInfo>' +
                  '</xsd:addDataSource>';
    var result;
    try {
        var endPoint = CLOUDMGT_SERVICES + 'NDataSourceAdmin';
        log.info("printing end point ..........................................................");
        log.info(endPoint);
        createDataSourcesService.open(options, endPoint, false, ADMIN_USERNAME + '@' + applicationId, ADMIN_PASSWORD);
        createDataSourcesService.send(payload);
	    result = createDataSourcesService.responseE4X;
        var datasources = buildResponse(result);
         log.info("Created data source: " + datasources);
        return datasources;


    } catch (e) {
        log.error("Error while creating datasource " + stageName + "\n" + e.message);
        throw "Error while creating datasource  " + stageName;
    }
};

function buildResponse(result){
   var databaseObject=[];
   
   if(result != undefined){    
   var response=result.*::["return"].text();
   var entry=response[0];
   return entry;
 }
}

/* 
 * getBackendCookie returns returns logged in user's server session string.
 */
var getBackendCookie = function () {
	if(session.get(APPFAC_BACKEND_COOKIE) == null){
		var token = session.get("SAML_TOKEN");
		var security =require("sso");
		var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);
		//token=ssoRelyingParty.decode(token);           
		var encodedToken = ssoRelyingParty.xmlEncode(token);
		var xhr = new XMLHttpRequest();
		xhr.setRequestHeader('SOAPAction', 'urn:login');
	    xhr.setRequestHeader('Content-Type', 'application/soap+xml');
		var endPoint = CLOUDMGT_SERVICES + "SAML2SSOAuthenticationService";
		xhr.open("POST", endPoint);
		var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+encodedToken+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';
		xhr.send(payload);
		var cookieString = xhr.getResponseHeader("Set-Cookie");
	   	var cookie = cookieString.split(";")[0];
		session.put(APPFAC_BACKEND_COOKIE, cookie.toString());
	} 
   	return session.get(APPFAC_BACKEND_COOKIE);   
}

/*
 *   getTenantDomain is used to logged user's domain name.
 */
var getTenantDomain = function() {

	if(session.get(TENANT_DOMAIN_NAME) == null){
	    var username=jagg.getUser();
		var tenantDomain = SUPER_TENANT_DOMAIN_NAME;

        if (username != null) {
            if(username.indexOf("@")!=-1){
                tenantDomain = username.substring(username.lastIndexOf('@')+1);
            }
        }
		session.put(TENANT_DOMAIN_NAME, tenantDomain.toString().toLowerCase());
	}
       return session.get(TENANT_DOMAIN_NAME);
}
var getTenantAwareUsername = function(username) {
         var tenantAwareUsername='null';
                if (username.indexOf("@")!=-1) {
                    tenantAwareUsername= username.substring(0,username.lastIndexOf('@'));
                } else {        // else assume super tenant
                    tenantAwareUsername = SUPER_TENANT_DOMAIN_NAME;
                }
        return tenantAwareUsername;
} ;

/*
 *   getDomainlessUserName is used to get the user name without the domain name.
 */
var getDomainlessUserName = function (username) {
    var seperator = "@";
    var strippedUserName = "";
    var index = userName.lastIndexOf(seperator);
    if (index == -1)
        strippedUserName = userName;
    else
        strippedUserName = userName.substring(0, index);

    return strippedUserName;
};


/**
 * Resolve tenantId from tenantDomain by using carbon TenantManager.
 * @param tenantDomain
 * @return {*}
 */
var getTenantId = function (tenantDomain) {
    var carbon = require('carbon');
    var tenantManager = carbon.multitenancy.getTenantManager();
    return tenantManager.getTenantId(tenantDomain);
};

var getOrganizationDisplayName = function (tenantDomain){
     var queryString  = SQL_QUERY_STRINGS.SELECT_DISPLAY_NAME;
     var parameters =[tenantDomain];
     var results = jagg.module("database").executeQuery(queryString, parameters);
    if(results !=null){
        return results[0]["displayName"];
    }else{
        return null;
    }
};

var getOTtenantProperty=function(){
    var tenantDomain=getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    var tenantId=tenantManager.getTenantId(tenantDomain);
    var index=-1;
    try{
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantId);
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        var tenant=tenantManager.getTenant(tenantId);
        var realm = server.osgiService('org.wso2.carbon.user.core.service.RealmService').getTenantUserRealm(tenantId);
        var properties=realm.getRealmConfiguration().getUserStoreProperties();
        var sProp=properties.toString();
        var propString ="OTTenant=true";
        index=sProp.indexOf(propString);

    }finally{
        context.endTenantFlow();
    }
     return index>0;;
}


%>
