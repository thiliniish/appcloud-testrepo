<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/modules/database/dataaccess.jag");

// used for logging
var log = new Log("modules.manager.manager.jag");

//To access carbon functionality
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var clock = new Date();
var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
var ADMIN_USERNAME = cloudConfig.SSORelyingParty.adminUser;
var ADMIN_PASSWORD = cloudConfig.SSORelyingParty.adminPassword;
var SSO_NAME = cloudConfig.SSORelyingParty.name;
var COOKIE_REFRESH_INTERVAL = cloudConfig.SSORelyingParty.cookieRefreshInterval;
var cookieRefreshInterval = COOKIE_REFRESH_INTERVAL;

/**
 * Returns boolean value of isEmailUserNameEnabled
 * @return boolean isEmailUserNameEnabled
 */
var isEmailUserNameEnabled = function () {
    if (application.get("isEmailUserNameEnabled") != null) {
        return Boolean(application.get("isEmailUserNameEnabled"));
    }
    application.put("isEmailUserNameEnabled", cloudConfig.isEmailUserNameEnabled);
    return Boolean(application.get("isEmailUserNameEnabled"));
};

/**
 * Get username from email and check if that user exists in user store
 * @param {string} email - the email of the user
 */
var isExistingUser = function (email) {
    log.info("Validate email address and checking user existence for [ " + email + " ]");
    var isExist = false;
    try {
        var user = email;
        if (email.indexOf('@') > 0) {
            if (!isValidEmail(email)) {
                log.info("The email address [ " + email + " ] is not valid");
                throw "Invalid Email Address " + email;
            }
            log.info("The email address [ " + email + " ] is valid");
            user = getUserNameFromEmail(email);
        }
        isExist = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService').isExistingUser(user);
    } catch (e) {
        log.error("Error while checking the existence of user [ " + user + " ]");
        log.error(e);
        throw (e);
    }
    if (isExist) {
        log.info("A user for [ " + email + " ] already exist");
    } else {
        log.info("A user for [ " + email + " ] does not exist");
    }
    return isExist;
};

/**
 * check if a provided email is valid or not
 * @param {string} email - the email of the user
 */
var isValidEmail = function (email) {
    var patternForEmailValidation = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return patternForEmailValidation.test(email);
};

/**
 * Returns the userName from the given email
 * @param email
 * @return String userName
 */
var getUserNameFromEmail = function (email) {
        if (isEmailUserNameEnabled()) {
            return email;
        } else {
            return email.replace(/@/g, ".");
        }
};

/**
 * Returns the userNames from the given emails
 * @param emails
 * @return Array userNames
 */
var getUserNamesFromEmails = function (emails) {
    var userNames = [];
    for (var i = 0; i < emails.length; i++) {
        userNames[i] = getUserNameFromEmail(emails[i]);
    }
    return userNames;
};

/**
 * Returns the Tenant Aware Use rName from the given userName (i.e. domain less user name)
 * @param userName
 * @return String tenantAwareUsername
 */
var getTenantAwareUsername = function (userName) {
    if (userName.indexOf("@") != -1 && !isEmailUserNameEnabled()) {
        userName = userName.substring(0, userName.lastIndexOf("@"));
    } else if (isEmailUserNameEnabled() && userName.indexOf("@") != userName.lastIndexOf("@")) {
        userName = userName.substring(0, userName.lastIndexOf("@"));
    }
    return userName;
};

/**
 * Returns the email of the given user
 * @param userName
 * @return String email
 */
var getEmailOfUser = function (userName) {
    var tenantAwareUserName = getTenantAwareUsername(userName);
    var context;
    if (isEmailUserNameEnabled()) {
        return tenantAwareUserName;
    } else {
        try {
            var tenantDomain = getTenantDomain(userName);
            var tenantManager = multitenancy.getTenantManager();
            context = multitenancy.getPrivilegedCarbonContext();
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            var userManagementService = server.osgiService('org.wso2.carbon.cloudmgt.users.service.UserManagementService');
            return userManagementService.getUserEmail(tenantAwareUserName);
        } catch (e) {
            log.error("Error while getting email of user :  " + userName + "\n" + e.message);
            throw "Error while getting email of user :  " + userName
        } finally {
            context.endTenantFlow();
        }
    }
};

/**
 * Returns the Tenant Domain of the given user
 * @param userName
 * @return String tenantDomain
 */
var getTenantDomain = function () {
    var userName = jagg.getUser();
    var tenantDomain = "carbon.super";
    if (userName != null) {
        if (userName.indexOf("@") != -1 && !isEmailUserNameEnabled()) {
            tenantDomain = userName.substring(userName.lastIndexOf("@") + 1);
        } else if (isEmailUserNameEnabled() && userName.indexOf("@") != userName.lastIndexOf("@")) {
            tenantDomain = userName.substring(userName.lastIndexOf("@") + 1);
        }
    }

    if (tenantDomain == null || tenantDomain == "") {
        tenantDomain = "carbon.super";
    }
    return tenantDomain;
};

/**
 * Returns the Tenant Display name of the given Tenant
 * @param tenantDomain
 * @return String tenantDisplayName
 */
var getTenantDisplayName = function (tenantDomain) {
    if (session.get("LOGGED_IN_USER_TENANT_DISPLAY_NAME") != null) {
        return session.get("LOGGED_IN_USER_TENANT_DISPLAY_NAME");
    } else {
        var displayName = jagg.module("util").getTenantDisplayName(tenantDomain);
        session.put("LOGGED_IN_USER_TENANT_DISPLAY_NAME", displayName);
        return session.get("LOGGED_IN_USER_TENANT_DISPLAY_NAME");
    }
};

/**
 * Returns tenantId from tenantDomain by using carbon TenantManager.
 * @param tenantDomain
 * @return  tenantId
 */
var getTenantId = function (tenantDomain) {
    var tenantManager = multitenancy.getTenantManager();
    return tenantManager.getTenantId(tenantDomain);
};

/**
 * Returns an Admin cookie for the given server
 * @param serverUrl
 */
var getAdminCookie = function (serverUrl) {
    var timeNow = clock.getTime();
    if (application.get("adminCookieLastUpdatedTime" + serverUrl) == null) {
        application.put("adminCookieLastUpdatedTime" + serverUrl, timeNow);
    }
    var adminCookieLastUpdatedTime = application.get("adminCookieLastUpdatedTime" + serverUrl);
    if (((timeNow - adminCookieLastUpdatedTime) > cookieRefreshInterval) ||
            (application.get("authenticatedCookie" + serverUrl) == null)) {
        updateAdminCookie(serverUrl);
        application.put("adminCookieLastUpdatedTime" + serverUrl, timeNow);
    }
    return application.get("authenticatedCookie" + serverUrl);
};

/**
 * Updates the Admin cookie in the current session
 * @param serverUrl
 */
var updateAdminCookie = function (serverUrl) {
    try {
        var xhr = new XMLHttpRequest();
        xhr.setRequestHeader('SOAPAction', 'urn:login');
        xhr.setRequestHeader('Content-Type', 'application/soap+xml');
        var endPoint = serverUrl + "AuthenticationAdmin";
        xhr.open("POST", endPoint);
        var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>' + ADMIN_USERNAME + '</aut:username><aut:password>' + ADMIN_PASSWORD + '</aut:password><aut:remoteAddress>localhost</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';
        xhr.send(payload);
        var cookie = xhr.getResponseHeader("Set-Cookie");
        application.put("authenticatedCookie" + serverUrl, cookie);
    } catch (e) {
        log.error("Error while updating admin cookie for  user :  " + ADMIN_USERNAME + "\n" + e.message);
        throw "Error while updating admin cookie for  user :  " + ADMIN_USERNAME
    }
};

/**
 * Returns an authenticated cookie for the current user by exchanging the SAML Token from the current session
 * @param serverUrl
 * @return String cookie
 */
var getAdminCookieBySAMLToken = function (serverUrl) {
    var cookie = null;
    var result = null;
    try {
        var security = require("sso");
        var unauthenticatedError = "An error occurred while retrieving the BPS admin cookie as session details were not available";
        var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);
        if (session != null && session.getId() != null) {
            var token = ssoRelyingParty.getSAMLToken(session.getId());
            if (token != null) {
                var xhr = new XMLHttpRequest();
                var endPoint = serverUrl + "SAML2SSOAuthenticationService";
                xhr.open("POST", endPoint);
                var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>' + token + '</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';
                xhr.setRequestHeader('SOAPAction', 'urn:login');
                xhr.setRequestHeader('Content-Type', 'application/soap+xml');
                xhr.send(payload);
                var responseTxt = xhr.responseText;
                if (responseTxt != null && responseTxt.indexOf("false") === -1
                        && responseTxt.indexOf("faultstring") === -1) {
                    cookie = xhr.getResponseHeader("Set-Cookie");
                    result = {
                        error: false,
                        message: "Successfully retrieved the Admin Cookie by SAML Token  for  user :  " + session.get("LOGGED_IN_USER"),
                        cookie: cookie,
                        statusCode: 200
                    }
                } else {
                    var errorMessage = "An error occurred while retrieving the Admin Cookie by SAML Token  for  user :  " + session.get("LOGGED_IN_USER");
                    log.error(errorMessage);
                    result = {
                        error: true,
                        message: errorMessage,
                        cookie: cookie,
                        invalidCookie: true,
                        statusCode: 500
                    }
                }
            } else {
                log.error(unauthenticatedError);
                result = {
                    error: true,
                    message: unauthenticatedError,
                    cookie: cookie,
                    statusCode: 401
                }
            }
        } else {
            log.error(unauthenticatedError);
            result = {
                error: true,
                message: unauthenticatedError,
                cookie: cookie,
                statusCode: 401
            }
        }
    } catch (e) {
        var errorMessage = "An error occurred while getting the Admin Cookie by SAML Token  for  user :  " + session.get("LOGGED_IN_USER") + ":" + e.message
        log.error(errorMessage);
        log.error(e);
        result = {
            error: true,
            message: errorMessage,
            cookie: cookie,
            statusCode: 500
        }
    }
    return result;
};

%>
