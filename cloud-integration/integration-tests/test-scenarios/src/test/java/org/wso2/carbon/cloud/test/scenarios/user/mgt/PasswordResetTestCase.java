/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package org.wso2.carbon.cloud.test.scenarios.user.mgt;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.wso2.carbon.cloud.integration.test.utils.CloudIntegrationConstants;
import org.wso2.carbon.cloud.integration.test.utils.CloudIntegrationTest;
import org.wso2.carbon.cloud.integration.test.utils.CloudIntegrationTestUtils;
import org.wso2.carbon.cloud.integration.test.utils.clients.authentication.CarbonAuthenticatorClient;
import org.wso2.carbon.cloud.integration.test.utils.clients.service.UserInformationRecoveryServiceClient;
import org.wso2.carbon.cloud.integration.test.utils.external.HttpHandler;
import org.wso2.carbon.cloud.integration.test.utils.restclients.JaggeryAppAuthenticatorClient;
import org.wso2.carbon.identity.mgt.stub.beans.VerificationBean;

import java.util.HashMap;
import java.util.Map;

/**
 * This is to test Password Reset
 */
public class PasswordResetTestCase extends CloudIntegrationTest {
    private static final Log log = LogFactory.getLog(PasswordResetTestCase.class);

    private CarbonAuthenticatorClient authenticatorClient;

    private String userName;
    private String password;
    private String email;
    private String domainLessUserName;

    private static final String TEMP_PASSWORD = "Admin@321";

    private VerificationBean sendNotificationBean;
    private boolean loginStatus;

    /**
     * Before test, Getting user information and generating the confirmation key and user ID required for Step 2 in
     * test case
     *
     * @throws Exception
     */
    @BeforeClass(alwaysRun = true) public void deployService() throws Exception {
        //initializing user info
        userName = CloudIntegrationTestUtils.getPropertyValue(CloudIntegrationConstants.TENANT_USER_USERNAME);
        domainLessUserName = userName.substring(0, userName.lastIndexOf("@"));
        password = CloudIntegrationTestUtils.getPropertyValue(CloudIntegrationConstants.TENANT_USER_PASSWORD);
        email = CloudIntegrationTestUtils.getPropertyValue(CloudIntegrationConstants.TENANT_USER_EMAIL);

        String identityServerUrl = CloudIntegrationTestUtils
                .getPropertyValue(CloudIntegrationConstants.IDENTITY_SERVER_URL);
        authenticatorClient = new CarbonAuthenticatorClient(identityServerUrl);

        UserInformationRecoveryServiceClient recoveryServiceClient = new UserInformationRecoveryServiceClient();
        VerificationBean verificationBean = recoveryServiceClient.verifyUser(domainLessUserName);
        if (!verificationBean.getVerified()) {
            String msg = "Verifying User failed for user : " + domainLessUserName;
            log.error(msg);
            throw new Exception(msg);
        }
        sendNotificationBean = recoveryServiceClient
                .sendRecoveryNotification(domainLessUserName, verificationBean.getKey(), "email");
        if (!sendNotificationBean.getVerified()) {
            String msg = "Send Recovery Notification failed for user : " + domainLessUserName;
            log.error(msg);
            throw new Exception(msg);
        }

    }

    /**
     * Testing Password reset
     * <p/>
     * <ul>
     * <li>Step 1: Verify user and Sending email by initiatePasswordReset, and check weather its successful.</li>
     * <li>Step 2: Verify the confirmation code send via email. Since email access is difficult,
     * a confirmation key is generated by invoking the UserInformationRecoveryService (which is same as in Step 1)</li>
     * <li>Step 3: Update the password using the verified information from Step 2</li>
     * <li>Check weather user can login using the new password</li>
     * <ul>
     *
     * @throws Exception
     */
    @Test(description = "Password Reset Test for User") public void resetPasswordTest() throws Exception {
        log.info("Running Reset password test");

        //Initiating password reset
        String initiateUrl = cloudMgtServerUrl + CloudIntegrationConstants.INITIATE_PASSWORD_RESET_SFX;
        Map<String, String> params = new HashMap<>();
        params.put(CloudIntegrationConstants.PARAMETER_KEY_ACTION, "initiatePasswordReset");
        params.put("email", email);
        Map resultMap = HttpHandler.doPostHttps(initiateUrl, params, null, false);
        JSONObject resultObj =
                new JSONObject(resultMap.get(CloudIntegrationConstants.RESPONSE).toString());
        Assert.assertFalse(resultObj.getBoolean(CloudIntegrationConstants.ERROR), "Error occurred while initiating password reset. ");

        //Verifying the confirmation code send via the email
        String verifyResetUrl = cloudMgtServerUrl + CloudIntegrationConstants.PASSWORD_RESET_VERIFY_SFX;
        params = new HashMap<>();
        params.put(CloudIntegrationConstants.PARAMETER_KEY_ACTION, "verifyPasswordResetConfirmationCode");
        params.put("confirm", sendNotificationBean.getNotificationData().getNotificationCode());
        params.put("id", sendNotificationBean.getNotificationData().getUserId());
        resultMap = HttpHandler.doPostHttps(verifyResetUrl, params, null, false);
        resultObj = new JSONObject(resultMap.get(CloudIntegrationConstants.RESPONSE).toString());

        Assert.assertFalse(resultObj.getBoolean("error"), "Error occurred while verifying confirmation code for"
                + " password reset. " + resultObj.getString("message"));
        JSONObject data = resultObj.getJSONObject("data");
        Assert.assertNotNull(data.getString("confirmationKey"), "Confirmation Key Should not be null.");
        Assert.assertEquals(data.getString("userName"), domainLessUserName,
                "Value mismatch, User Name Should be : " + domainLessUserName);
        Assert.assertEquals(data.getString("email"), email, "Value mismatch, Email Should be : " + email);

        //Update password
        String updatePasswordUrl = cloudMgtServerUrl + CloudIntegrationConstants.PASSWORD_UPDATE_SFX;
        params = new HashMap<>();
        params.put(CloudIntegrationConstants.PARAMETER_KEY_ACTION, "updatePasswordWithUserInput");
        params.put("username", data.getString("userName"));
        params.put("email", data.getString("email"));
        params.put("password", TEMP_PASSWORD);
        params.put("confirmationKey", data.getString("confirmationKey"));
        resultMap = HttpHandler.doPostHttps(updatePasswordUrl, params, null, false);
        resultObj = new JSONObject(resultMap.get(CloudIntegrationConstants.RESPONSE).toString());
        Assert.assertFalse(resultObj.getBoolean("error"), "Error occurred while updating password. " +
                resultObj.getString("message"));

        loginStatus = authenticatorClient.checkLogin(userName, TEMP_PASSWORD, "localhost");
        Assert.assertTrue(loginStatus, "Cannot login with new password");
    }

    /**
     * Reverting password change
     *
     * @throws Exception
     */
    @AfterClass(alwaysRun = true) public void unDeployService() throws Exception {
        JaggeryAppAuthenticatorClient jaggeryAuthClient = new JaggeryAppAuthenticatorClient(cloudMgtServerUrl);
        loginStatus = jaggeryAuthClient.login(userName, TEMP_PASSWORD);
        String errorMsg = "Authentication failure for CloudMgt app while reverting the password after"
                     + " Reset Password Test for user : " + userName;
        Assert.assertTrue(loginStatus, errorMsg);

        String url = cloudMgtServerUrl + CloudIntegrationConstants.CHANGE_PASSWORD_URL_SFX;
        Map<String, String> params = new HashMap<>();
        params.put(CloudIntegrationConstants.PARAMETER_KEY_ACTION, "changePassword");
        params.put("oldPassword", TEMP_PASSWORD);
        params.put("password", password);
        Map responseMap = HttpHandler.doPostHttps(url, params, jaggeryAuthClient.getSessionCookie(), false);
        String result = (String) responseMap.get(CloudIntegrationConstants.RESPONSE);
        super.cleanup();
        Assert.assertEquals(result, "true",
                "Error occurred while resetting to the old password after change password.");
        authenticatorClient.logOut();
    }
}