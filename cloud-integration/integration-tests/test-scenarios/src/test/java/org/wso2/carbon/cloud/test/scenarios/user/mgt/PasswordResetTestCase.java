/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package org.wso2.carbon.cloud.test.scenarios.user.mgt;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.wso2.carbon.cloud.integration.test.utils.CloudIntegrationConstants;
import org.wso2.carbon.cloud.integration.test.utils.CloudIntegrationTest;
import org.wso2.carbon.cloud.integration.test.utils.CloudIntegrationTestUtils;
import org.wso2.carbon.cloud.integration.test.utils.clients.authentication.CarbonAuthenticatorClient;
import org.wso2.carbon.cloud.integration.test.utils.clients.service.UserInformationRecoveryServiceClient;
import org.wso2.carbon.cloud.integration.test.utils.external.HttpHandler;
import org.wso2.carbon.cloud.integration.test.utils.restclients.JaggeryAppAuthenticatorClient;
import org.wso2.carbon.identity.mgt.stub.beans.VerificationBean;

import java.util.HashMap;
import java.util.Map;

/**
 * This is to test Password Reset
 */
public class PasswordResetTestCase extends CloudIntegrationTest {
    private static final Log log = LogFactory.getLog(PasswordResetTestCase.class);

    private CarbonAuthenticatorClient authenticatorClient;

    private String userName;
    private String password;
    private String email;
    private String domainLessUserName;

    private String identityServerUrl;

    private VerificationBean sendNotificationBean;

    /**
     * Before test, Getting user information and generating the confirmation key and user ID required for Step 2 in
     * test case
     *
     * @throws Exception
     */
    @BeforeClass(alwaysRun = true) public void deployService() throws Exception {
        //initializing user info
        userName = CloudIntegrationTestUtils.getPropertyValue(CloudIntegrationConstants.TENANT_USER_USERNAME);
        domainLessUserName = userName.substring(0, userName.lastIndexOf("@"));
        password = CloudIntegrationTestUtils.getPropertyValue(CloudIntegrationConstants.TENANT_USER_PASSWORD);
        email = CloudIntegrationTestUtils.getPropertyValue(CloudIntegrationConstants.TENANT_USER_EMAIL);

        identityServerUrl = CloudIntegrationTestUtils.getPropertyValue(CloudIntegrationConstants.IDENTITY_SERVER_URL);
        authenticatorClient = new CarbonAuthenticatorClient(identityServerUrl);

        UserInformationRecoveryServiceClient recoveryServiceClient = new UserInformationRecoveryServiceClient();
        VerificationBean verificationBean = recoveryServiceClient.verifyUser(domainLessUserName);
        if (!verificationBean.getVerified()) {
            String msg = "Verifying User failed for user : " + domainLessUserName;
            log.error(msg);
            throw new Exception(msg);
        }
        sendNotificationBean = recoveryServiceClient
                .sendRecoveryNotification(domainLessUserName, verificationBean.getKey(), "email");
        if (!sendNotificationBean.getVerified()) {
            String msg = "Send Recovery Notification failed for user : " + domainLessUserName;
            log.error(msg);
            throw new Exception(msg);
        }

    }

    /**
     * Testing Password reset
     *
     * Step 1: Verify user and Sending email by initiatePasswordReset, and check weather its successful.
     * Step 2: Verify the confirmation code send via email. Since email access is difficult, a confirmation key is
     *         generated by invoking the UserInformationRecoveryService (which is same as in Step 1)
     * Step 3: Update the password using the verified information from Step 2
     * Step 4: Check weather user can login using the new password
     *
     * @throws Exception
     */
    @Test() public void resetPasswordTest() throws Exception {
        log.info("Running Reset password test");

        //Initiating password reset
        String initiateUrl = cloudMgtServerUrl + CloudIntegrationConstants.INITIATE_PASSWORD_RESET_SFX;
        Map<String, String> params = new HashMap<String, String>();
        params.put("action", "initiatePasswordReset");
        params.put("email", email);
        Map resultMap = HttpHandler.doPostHttps(initiateUrl, params, null);
        Assert.assertEquals(resultMap.get(CloudIntegrationConstants.RESPONSE), "true",
                "Value mismatch, Should be true.");

        //Verifying the confirmation code send via the email
        String verifyResetUrl = cloudMgtServerUrl + CloudIntegrationConstants.PASSWORD_RESET_VERIFY_SFX;
        params = new HashMap<String, String>();
        params.put("action", "verifyPasswordResetConfirmationCode");
        params.put("confirm", sendNotificationBean.getNotificationData().getNotificationCode());
        params.put("id", sendNotificationBean.getNotificationData().getUserId());
        resultMap = HttpHandler.doPostHttps(verifyResetUrl, params, null);
        JSONObject resultObj = new JSONObject(resultMap.get(CloudIntegrationConstants.RESPONSE).toString());
        Assert.assertEquals(resultObj.getString("verified"), "true", "Value mismatch, Should be true.");
        Assert.assertNotNull(resultObj.getString("confirmationKey"), "Confirmation Key Should not be null.");
        Assert.assertEquals(resultObj.getString("userName"), domainLessUserName,
                "Value mismatch, User Name Should be : " + domainLessUserName);
        Assert.assertEquals(resultObj.getString("email"), email, "Value mismatch, Email Should be : " + email);

        //Update password
        String updatePasswordUrl = cloudMgtServerUrl + CloudIntegrationConstants.PASSWORD_UPDATE_SFX;
        params = new HashMap<String, String>();
        params.put("action", "updatePasswordWithUserInput");
        params.put("username", resultObj.getString("userName"));
        params.put("email", resultObj.getString("email"));
        params.put("password", "Admin@321");
        params.put("confirmationKey", resultObj.getString("confirmationKey"));
        resultMap = HttpHandler.doPostHttps(updatePasswordUrl, params, null);
        Assert.assertEquals(resultMap.get(CloudIntegrationConstants.RESPONSE), "successful",
                "Value mismatch, Should be 'successful'.");

        boolean loginStatus = authenticatorClient.checkLogin(userName, "Admin@321", "localhost");
        Assert.assertTrue(loginStatus, "Cannot login with new password");
    }

    /**
     * Reverting password change
     * @throws Exception
     */
    @AfterClass(alwaysRun = true) public void unDeployService() throws Exception {
        JaggeryAppAuthenticatorClient jaggeryAuthClient = new JaggeryAppAuthenticatorClient(cloudMgtServerUrl);
        jaggeryAuthClient.login(userName, password);
        if (!jaggeryAuthClient.login(userName, "Admin@321")) {
            String msg = "Authentication failure for CloudMgt app while reverting the password after Reset Password Test"
                    + " for user : " + userName;
            log.warn(msg);
            throw new Exception(msg);
        }
        String url = cloudMgtServerUrl + CloudIntegrationConstants.CHANGE_PASSWORD_URL_SFX;
        Map<String, String> params = new HashMap<String, String>();
        params.put("action", "changePassword");
        params.put("oldPassword", "Admin@321");
        params.put("password", password);
        Map responseMap = HttpHandler.doPostHttps(url, params, jaggeryAuthClient.getSessionCookie());
        String result = (String) responseMap.get(CloudIntegrationConstants.RESPONSE);
        if (!"true".equals(result)) {
            String msg = "Error occurred while reverting to the old password after Reset Password Test";
            log.warn(msg);
        }

        super.cleanup();
    }
}